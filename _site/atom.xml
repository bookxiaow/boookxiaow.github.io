<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tom Preston-Werner</title>
 <link href="http://tom.preston-werner.com/atom.xml" rel="self"/>
 <link href="http://tom.preston-werner.com/"/>
 <updated>2015-05-30T22:55:08+08:00</updated>
 <id>http://tom.preston-werner.com/</id>
 <author>
   <name>Tom Preston-Werner</name>
   <email>tom@mojombo.com</email>
 </author>

 
 <entry>
   <title>Singleton Design Pattern</title>
   <link href="http://tom.preston-werner.com/2015/05/30/singleton-design-pattern.html"/>
   <updated>2015-05-30T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2015/05/30/singleton-design-pattern</id>
   <content type="html">&lt;p&gt;singleton模式看似简单，却有很多值得注意的地方。下面给出一个经典的多线程安全的简单例子，然后NOTE下值得注意的几点：&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;josepheng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;design_pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      * Be capable of demonstrate the singleton design pattern.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      * @author hengwei&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;      */&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConnectionManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniqConnctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// private constructor.&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          * Global access point of obtain unqiue object instance.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;          */&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionManager&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniqConnctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConnectionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniqConnctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;uniqConnctor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectionManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniqConnctor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;&lt;strong&gt;Watch Out&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;构造函数是private,防止了外部对象创建类instance,同时保证不能够通过继承来创建。&lt;/li&gt;
&lt;li&gt;全局唯一的access point便是通过getInstance的&lt;strong&gt;&lt;em&gt;static&lt;/em&gt;&lt;/strong&gt;方法来实现。因为方法本身是静态的，所以该方法中的uniqConnctor也需要声明为&lt;strong&gt;&lt;em&gt;static&lt;/em&gt;&lt;/strong&gt;的变量。&lt;/li&gt;
&lt;li&gt;为了处理多线程的情况，getInstance通常需要加上synchronize的线程锁。但考虑到应用实际，性能需求的情况，可以有以下不同的实现：

&lt;ol type=&quot;a&quot;&gt;
&lt;li&gt;直接 synchronize 整个getInstance函数，这样最简单，但对于uniqConnector是否为空，都要synchronize,性能严重下降。&lt;/li&gt;
&lt;li&gt;直接在uniqConnector声明时进行初始化，就省略了getInstance中非空的检测。&lt;/li&gt;
&lt;li&gt;就是上面代码所示的double checking lock。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Common ShortKey And Command on MacOSX</title>
   <link href="http://tom.preston-werner.com/2014/11/11/Common-ShortKey-And-Command-On-MacOSX.html"/>
   <updated>2014-11-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/11/11/Common-ShortKey-And-Command-On-MacOSX</id>
   <content type="html">&lt;h1&gt;Common ShortKey And Command on MacOSX&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;11 Nov 2014 - Beijing&lt;/p&gt;


&lt;p&gt;Only during the 3 hours experience on MacBook Pro, I find that I could not love it more. Yes, maybe you can say, it&#39;s price seems make people daunting. However, if you really give yourself a try, you&#39;ll find that, the biggest regret ever is why I haven&#39;t migrate to Mac earlier. It will really save my so much time and energy.&lt;/p&gt;

&lt;h4&gt;Windows or Linux&lt;/h4&gt;

&lt;p&gt;Perfect position between the simplify and foolish. :). Personally, I think that Windows exactly make people feels himself a foolish and will have no improvment in skills or communications things. And linux is so great, however the biggest problem is that it&#39;s not mature in present. I have try my 7 year college life in all kinds of *nix distribution, such as Ubuntu, OpenSUSE, RedHat, Gentoo, FreeBSD, Solaris and etc. And in the end, I really feels that the processes this years are all combined with so much duplications and complcated process, It will kill so much time, and if you are not devote yourself in this great career, It will gain so little, as long as you&#39;re lack of keeping this work. &lt;br/&gt;
Current, I really find the perfect combination of Windows and *nix. And on the day of Nov 11, 2014. China&#39;s biggest e-comments glories of the year.&lt;/p&gt;

&lt;h4&gt;Common Useful ShortKey,Command&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;os x short key operation:&lt;/strong&gt;    &lt;br/&gt;
1. delete a work : Option + delete. &lt;br/&gt;
2. copy: Command + c  &lt;br/&gt;
3. paste: Command + v  &lt;br/&gt;
4. delete a whole line:  Command + delete &lt;br/&gt;
5. quickly enter a URL: Command + L   &lt;br/&gt;
6. switch between the safari tabs: Ctrl + Tab&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic Tools Installment&lt;/strong&gt;&lt;br/&gt;
Basic tools install:  &lt;br/&gt;
&lt;strong&gt;brew :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &quot;$(curl -fsSl https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;oh-my-zsh:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So long, and really thanks for all the fish!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Add Comment to Jekyll Blog with Disqus</title>
   <link href="http://tom.preston-werner.com/translation/2014/08/09/add-comment-to-jekyll-blog-with-disqus.html"/>
   <updated>2014-08-09T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/translation/2014/08/09/add-comment-to-jekyll-blog-with-disqus</id>
   <content type="html">&lt;h1&gt;Add Comment to Jekyll Blog with Disqus&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;09 Aug 2014 - Beijing&lt;/p&gt;


&lt;h4&gt;Blogging with personal domain, Github hosted, Jekyll themes&lt;/h4&gt;

&lt;p&gt;If you are tired of common blogging with Wordpress, Pager like, and want to try some cool things of DIY, Just take a look at these combination:
Buy a personal domain on &lt;a href=&quot;http://godaddy.com&quot;&gt;Godaddy&lt;/a&gt;, hosted on &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt;, and setting you blog template with the help of
&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;. It&#39;s not a fresh thing when I write this article. So what I am aimed is to introduce a common way to add comments
to your jekyll theme. &lt;a href=&quot;https://disqus.com&quot;&gt;Disqus&lt;/a&gt; Here.&lt;/p&gt;

&lt;h4&gt;Comments with Disqus&lt;/h4&gt;

&lt;p&gt; It&#39;s actually a lot simpler than you might think. The main process just contains following steps: &lt;br/&gt;
 1. Register an account on &lt;a href=&quot;https://disqus.com/admin/create/&quot;&gt;Disqus&lt;/a&gt;. After register of disqus account,
 you could go next step to register your website, such as your personal domain blog website. The whole register process is very self explanation,
 so I will take no more explanation here.  &lt;br/&gt;
 2. Generate code for your jekyll powered blog. The last and crucial step is to select the type of install instruction. You will see a lot of common
 blogger platforms. What we choose here is &lt;strong&gt;Universal Code&lt;/strong&gt; here. And once you selected, Disqus will automatically generate a bit of code that look
 like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;disqus_thread&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// required: replace example with your forum shortname&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;accountname&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  
        &lt;span class=&quot;cm&quot;&gt;/* * * DON&amp;#39;T EDIT BELOW THIS LINE * * */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.disqus.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dsq-brlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;blog comments powered by
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;logo-disqus&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disqus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; Now what you need to do is just putting them into the proper layout html template, post layout for example.   &lt;br/&gt;
 4.  Noted that, most situation we need to test our Jekyll in local. In order for Disqus to work on your local, you need to tell it that you are working in
 development mode. If you don&#39;t do this, then you will get an message stating it can&#39;t reach the server. All you need to do is add a new variable with a value
 of &lt;em&gt;1&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// required: replace example with your forum shortname&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;shortname&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This turns developer mode on&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// Make sure you remove this before you push this&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// to your live site.&lt;/span&gt;
  
      &lt;span class=&quot;cm&quot;&gt;/* * * DON&amp;#39;T EDIT BELOW THIS LINE * * */&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
       &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.disqus.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
           &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dsq-brlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;blog comments powered by 
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;logo-disqus&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disqus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have these set up, everything worked perfectly.&lt;/p&gt;

&lt;h4&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://http://schmidt-happens.com/articles/2011/09/26/adding-disqus-comments.html&quot;&gt;Adding Disqus Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Builder Design Pattern</title>
   <link href="http://tom.preston-werner.com/2014/07/31/Builder-Design-Pattern.html"/>
   <updated>2014-07-31T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/31/Builder-Design-Pattern</id>
   <content type="html">&lt;h1&gt;Builder Design Pattern&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;31 July 2014 - Beijing&lt;/p&gt;


&lt;h4&gt;At First Sight of Builder Pattern&lt;/h4&gt;

&lt;p&gt;The first time I encountered the Builder Pattern would date back to the beautiful internship time in Red Hat. What inspired me a lot is its strange setter way.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Joseph&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;programming&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;talent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function will return object itself, in setter methods. Also these setter methods can avoid too many parameters in a function invocation process, such as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PeopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * Common definition for the doWork() function:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Can not employee cirtical labour!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalAgeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age litter than 18&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;doTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Name:[%s], Talent:[%s]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * define function with PeopleBuilder object as the only parameters.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Heng&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;programming&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Can not employee cirtical labour!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalAgeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age litter than 18&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;doTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Name:[$s], Talent:[%s]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;At the first glance&lt;/strong&gt; of the above &lt;strong&gt;&lt;em&gt;Builder Pattern&lt;/em&gt;&lt;/strong&gt; usage, it resoved the too many parameters problem. However, when &lt;code&gt;doWork()&lt;/code&gt; function invoke the &lt;code&gt;PeopleBuilder&lt;/code&gt; class, it looks really strange and weild. Now the PeopleBuilder looks more like a POJO but a Builder. The &lt;code&gt;get&lt;/code&gt; methods in Builder really strange. So the most important thing to do is to just figure out what the adventages and disadvantages do the builder pattern suit:   &lt;br/&gt;
1. &lt;em&gt;if you find that there are too many parameters in a function invocation, you could take a consideration: could it be encapsulated into a Java Bean Object. and with necessary &lt;/em&gt;&lt;strong&gt;get&lt;/strong&gt;&lt;em&gt;, &lt;/em&gt;&lt;strong&gt;set&lt;/strong&gt;&lt;em&gt; methods&lt;/em&gt;. &lt;br/&gt;
2. &lt;em&gt;Still, you find that the encapsulated class could not satify with your requirement. some construct parameters are necessary for you and some a optional. But all they could only be assigned value at first construct stage of the object. The object become read only, and be immutable.&lt;/em&gt;&lt;br/&gt;
3. &lt;em&gt;Then, Builder Pattern is becoming your first choice.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;An Example of Classical Builder Pattern.&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;mail sender builder&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailSender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * required parameters for send a email.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * optional parameters.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * private construct function with EmailSenderBuilder.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailSenderBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * noted the static class accessor.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailSenderBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* non-final statement compared to EmailSender */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* non-final statement compred to EmailSender */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailSenderBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          * fluent interface idiom .&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;48&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;49&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;50&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;51&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;52&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;53&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          * It&amp;#39;s definitely cool! Also you can implement the logic &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          * condition in build according to your requirement.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;57&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailSender&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;58&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;59&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;60&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;61&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So long and thanks for all the fish!&lt;/p&gt;

&lt;h4&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javacodegeeks.com/2013/01/the-builder-pattern-in-practice.html&quot;&gt;The builder pattern in practice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Builder_pattern&quot;&gt;Builder Pattern&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Facade Design Pattern</title>
   <link href="http://tom.preston-werner.com/2014/07/15/Facade-Design-Pattern.html"/>
   <updated>2014-07-15T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/15/Facade-Design-Pattern</id>
   <content type="html">&lt;h1&gt;Facade Design Pattern&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;15 July 2014 - Beijing&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Facade pattern&lt;/strong&gt; provides a simplified interface to a set of interfaces within a system and thus it hides the complexities of the subsystem from the client. It creates a layer to abstract and unify the related interfaces in the application and define an entry point to each subsystem level and thus make them communicate only through their faces. &lt;br/&gt;
To simplify the interaction process, we introduce the facade layer. Facade expose a simplified interface(in this case a single interface to perform that multi-step process) and internally it interacts with those components and gets job done for you &lt;strong&gt;one way&lt;/strong&gt;.  Common representation are dipicted as followings:&lt;br/&gt;
&lt;img src=&quot;/images/facade_pattern_example.jpg&quot; alt=&quot;facade_pattern&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;Common Mistakes&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Layered architecture is good but assess the need for every layer. Just naming a class as ABCDFacade.java doesn&#39;t really make it a facade.&lt;/li&gt;
&lt;li&gt;facade is focus on process flow, but the bussniess logic. Controller is not a facade.&lt;/li&gt;
&lt;li&gt;facade helps to reduce the complexity of subsystem clients interacts to. But if there is only one or two lines of code, just avoids the facade pattern. Clients can invoke it directly.&lt;/li&gt;
&lt;li&gt;Subsystems are not aware of facade and there should be no reference for facade in subsystem. it&#39;s a one way communication between the facade and subsystem. Anonther common pattern, &lt;strong&gt;Mediator&lt;/strong&gt; pattern adapt two way communication.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Summary of Facade Pattern&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Facade provides a single interface.&lt;/li&gt;
&lt;li&gt;Programmers comfort is a main purpose of facade.&lt;/li&gt;
&lt;li&gt;Facade is used for promoting subsystem independence and portability.&lt;/li&gt;
&lt;li&gt;Translating data to suit the interface of a subsystem is done by the facade.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;   &lt;br/&gt;
+ &lt;a href=&quot;http://www.javacodegeeks.com/2012/11/facade-design-pattern-design-standpoint.html&quot;&gt;JavaCodeGeeks&lt;/a&gt; &lt;br/&gt;
+ &lt;a href=&quot;http://javapapers.com/design-patterns/facade-design-pattern/&quot;&gt;Javapaper&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Controller-View-Model</title>
   <link href="http://tom.preston-werner.com/2014/07/06/Controller-View-Model.html"/>
   <updated>2014-07-06T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/06/Controller-View-Model</id>
   <content type="html">&lt;h1&gt;Controller-View-Model&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;06 July 2014 - Beijing &lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Models represent knowledge. A view is a (visual) representation of its model. It is thus acting as a presentation filter. A view is attached to its model or model part and get the data necessary for the presentation from the model by asking quetions. It may also update the model by sending appropriate messages. A controller is the link between a user and system. It provides the user with input by arranging for relavant views to present themselves in appropriate places on the screen. The controller receives such user output, translate it into the appropriate messages and pass these messages on to one or more of the views.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Model  &lt;/dt&gt;
&lt;dd&gt;Data only. Get methods, set methods, etc. It is isolated. It knows nothing about View, or the controlls.&lt;/dd&gt;
&lt;dt&gt;View  &lt;/dt&gt;
&lt;dd&gt;UI only. Only show what you tell it to, and never  performs any transformation or validation logic. It always forwards input via an event/callback system. It is isolated, knows nothing about the Model nor the Controller.&lt;/dd&gt;
&lt;dt&gt;Controller  &lt;/dt&gt;
&lt;dd&gt;Sits between Model and View. Does any data transformation(bussiness logic) that is necessary to get the data from the Model to the View. Does most data validation on input. It knows about both the View and Model.&lt;/dd&gt;
&lt;/dl&gt;
</content>
 </entry>
 
 <entry>
   <title>EasyMock for Unit Test</title>
   <link href="http://tom.preston-werner.com/2014/07/03/EasyMock-for-unit-test.html"/>
   <updated>2014-07-03T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/03/EasyMock-for-unit-test</id>
   <content type="html">&lt;h1&gt;EasyMock for Unit Test&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;03 July 2014 - Beijing&lt;/p&gt;


&lt;p&gt;I noticed lot of projects code with &lt;strong&gt;unit test&lt;/strong&gt; as a necessary part. Unfortunately that, I didn&#39;t have the opportunity to do it myself. Upon coming out from the campus, it naturally become a necessary part of the carel talent of a SDE.&lt;br/&gt;
Common and basic test procedure framework will be &lt;a href=&quot;http://junit.org&quot;&gt;Junit&lt;/a&gt;, which lay the fundation of test. Such as &lt;code&gt;@Before,@Test,@After&lt;/code&gt; workflow, &lt;code&gt;Assertions, Test Runners, Ignoring, Rule&lt;/code&gt;. However, when encounter complex and sophisticated system, the dependency of functions may become perplexing. It&#39;s impossible to construct all this objects as the input of a to-be tested function. &lt;strong&gt;Mock&lt;/strong&gt; conception arise naturally. Well in plain word, could we just mock these dependency objects, give their input parameters and expected behavior or return value. And it just exactly benefit what our test case needed. There are lots of good mock framework, such as &lt;a href=&quot;http://jmock.org&quot; title=&quot;JMock Official&quot;&gt;JMock&lt;/a&gt;, &lt;a href=&quot;http://easymock.org&quot; title=&quot;EasyMock official&quot;&gt;EasyMock&lt;/a&gt;. All roads to Roma. I spent about three days to learn the JMock for a particular unit test code. When I come from JMock to EasyMock, I found that most prior knowledge and experience can be come in handy. I take notes here as a reminder. &lt;br/&gt;
 1. From scratch, I just know a little about junit. If I want to write tests for a class, the meta element for test is functions. So I need to construct the context for a function test, such as the corresponding main class, the input parameters for a test, external dependency objects need to construct. also the purpose of test, do we need to &lt;code&gt;Assertions&lt;/code&gt;? and so on.&lt;br/&gt;
 2. with these in mind, we need to test the functionality of the methods. Is it a &lt;code&gt;AssertEqual()&lt;/code&gt;,&lt;code&gt;AssertTrue()&lt;/code&gt;,&lt;code&gt;Expected Exception&lt;/code&gt;? How could we guarantee the coverage?&lt;br/&gt;
 3. How to mock the external dependency object. This is definitely a long story. Simplify by three steps, expect what the behavior and result, replay the workflow, verify the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;  &lt;br/&gt;
1. &lt;a href=&quot;http://jmock.org&quot; title=&quot;JMock Official&quot;&gt;JMock Website&lt;/a&gt;&lt;br/&gt;
2. &lt;a href=&quot;http://easymock.org&quot; title=&quot;EasyMock official&quot;&gt;EasyMock Official&lt;/a&gt; &lt;br/&gt;
3. &lt;a href=&quot;http://michaelminella.com/testing/mock-controls-with-easymock.html&quot; title=&quot;EasyMock Control Tutorial&quot;&gt;EasyMock Control Tutorial&lt;/a&gt; &lt;br/&gt;
4. &lt;a href=&quot;http://tamasgyorfi.wordpress.com/2011/04/21/mocking-tutorial-part-1-jmock&quot; title=&quot;JMock Tutorial&quot;&gt;JMock Tutorial&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Study Notes Operating System Concepts</title>
   <link href="http://tom.preston-werner.com/notes/2013/10/27/Study-Notes-Operating-System-Concepts.html"/>
   <updated>2013-10-27T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/10/27/Study-Notes-Operating-System-Concepts</id>
   <content type="html">&lt;h1&gt;Study Notes Operating System Concepts&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;27 Oct 2013 - Beijing&lt;/p&gt;


&lt;p&gt;刚好最近在准备找工作面试，无奈之前的基础知识已经遗忘殆尽，值得在重新复习一下，便做了关于操作系统方面的笔记，书采用的是&lt;a href=&quot;http://www.amazon.com/Operating-System-Concepts-9th-Edition-ebook/dp/B00APSZCEQ&quot;&gt;Operating System Concepts, 9th Edition&lt;/a&gt;，采用边看边做笔记的形式来记录下，以便以后遗忘时可以随时查验。全篇将近有1000页不可能全部看完，只得分批来看，今天主要看进程模块。&lt;/p&gt;

&lt;h3&gt;Process(进程)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;程序的组成主要包括一下几个部分&lt;/strong&gt;:
* &lt;strong&gt;text section&lt;/strong&gt;: it contains the program code, program counter and registers information.
* &lt;strong&gt;stack section&lt;/strong&gt;: it contains the temporary data, such as function parameter, return address, local variables.
* &lt;strong&gt;data section&lt;/strong&gt;: contains the global variables.
* &lt;strong&gt;heap section&lt;/strong&gt;: for dynamically memory allocations during the process run.&lt;/p&gt;

&lt;p&gt;Also the following figure show the common program structure in memory.   &lt;img src=&quot;/assets/img/process_in_memory.png&quot; alt=&quot;process in memory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;进程状态和进程控制块(Process Control Block)&lt;/strong&gt;
进程主要有如下几种状态，分别为：
* &lt;strong&gt;New&lt;/strong&gt;: the process is being created.
* &lt;strong&gt;Ready&lt;/strong&gt;: the process is waiting to be assigned to the processor.
* &lt;strong&gt;Running&lt;/strong&gt;: Instructions are being executed.
* &lt;strong&gt;Terminated&lt;/strong&gt;: the process has finished execution.
* &lt;strong&gt;Wait&lt;/strong&gt;: The process is waiting for some event to occur (such as an I/O completion or reception of a signal).
And the following figure show the work flow of process state.
&lt;img src=&quot;/assets/img/process_state.png&quot; alt=&quot;process_state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;进程的创建&lt;/strong&gt;
子进程创建继承父进程的资源信息，接下来可以利用&lt;code&gt;exec()&lt;/code&gt;函数来覆盖父进程的进程空间，执行自己的进程，也可以保持父进程的执行空间，使的父子进程同时执行。一个经典的创建多进程的实例如下：&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* fork a child process */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* error occurred */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fork Failed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* child process */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Child Execute: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* parent process */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* parent will wait for the child to complete */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Parent Execute: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;&lt;strong&gt;进程间通信&lt;/strong&gt;
主要有两种常见的进程间通信的方式，Shared Memory 和 Messaging Pass。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Const Keyword</title>
   <link href="http://tom.preston-werner.com/languages/2013/10/22/Const-Keyword.html"/>
   <updated>2013-10-22T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/10/22/Const-Keyword</id>
   <content type="html">&lt;h1&gt;Const Keyword&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;22 Oct 2013 - Beijing&lt;/p&gt;


&lt;p&gt;&lt;code&gt;const&lt;/code&gt; 关键词在C/CPP中也是一个类似于&lt;a href=&quot;http://lengerfulluse.com/research/2013/10/20/%E8%99%9A%E5%87%BD%E6%95%B0/&quot;&gt;static&lt;/a&gt;一样，经常出现，且作用往往不止一种，在面试中经常被问及的关键词。我们从其修饰的对象角度来分析。&lt;/p&gt;

&lt;h3&gt;修饰变量或者指针&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;int d = 4;
const int a = 5;   /* the content of variable cannot be change */
int * const b = &amp;amp;d; /* the variable pointer itself cannot be change */
const int * const c = &amp;amp;d; /* the content and the pointer both cannot be changed */

int * const b = &amp;amp;a  /*Compiler Error: a is const variable, while b is not, cannot
                     convert from const int to int */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此处有一点值得提及，当用&lt;code&gt;const&lt;/code&gt;修饰变量或指针时，赋值时只能从非const变量向const变量进行，而如果把const量赋值为非const量，则会发生编译错误。&lt;/p&gt;

&lt;h3&gt;修饰函数&lt;/h3&gt;

&lt;p&gt;1. 当用const放在末尾修饰类成员函数时，其表明该函数不能够改变类成员的值，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;
class A {
    public:
        A(int a) {
            e = a;
        }
        int e;
        void const_fun(int a) const;
};

void A::const_fun(int a) const {
    cout&amp;lt;&amp;lt;&quot;I am const function, cannot change variable content&quot;&amp;lt;&amp;lt;endl;
    e = a;  /* Compiler Error: cannot change value of member variable */
}

int main() {
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. 当用于修饰成员函数返回值时，则表示该函数范围值不能用于&lt;em&gt;左值&lt;/em&gt;，如下例所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const classA operator*(const classA&amp;amp; a1,const classA&amp;amp; a2);
(a * b) = c;  /* cannot assigned to the return value of * operator */
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Static Keyword</title>
   <link href="http://tom.preston-werner.com/languages/2013/10/21/Static-Keyword.html"/>
   <updated>2013-10-21T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/10/21/Static-Keyword</id>
   <content type="html">&lt;h1&gt;Static Keyword&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;21 Oct 2013 - Beijing&lt;/p&gt;


&lt;p&gt;几乎在所有的面试笔试题中都有&lt;strong&gt;static&lt;/strong&gt;变量的身影，其涉及到变量内存分配空间，变量生命周期等。最终我们可以从其&lt;strong&gt;作用域&lt;/strong&gt;的角度来对其进行较为详细的分析与介绍。&lt;/p&gt;

&lt;h3&gt;函数体内的static关键字&lt;/h3&gt;

&lt;p&gt;静态成员变量的内存分配空间是和全局变量的分配空间一样的，都是在静态存储区。所以变量的生命周期一直保持到程序的结束。但由于该静态变量的作用域仍然是在函数体内，所以在函数体外调用该变量会引起编译错误。&lt;/p&gt;

&lt;h3&gt;在一个文件中的全局static关键字&lt;/h3&gt;

&lt;p&gt;实现了一种类似类封装的效果，在该文件中成员可以访问该static变量或是函数，但是文件之外是不可以访问的。&lt;/p&gt;

&lt;h3&gt;在类中的static关键字&lt;/h3&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;static 成员变量:在类的作用域中是全局可见的，且是唯一一份拷贝的。&lt;/li&gt;
&lt;li&gt;static 函数： 也是为类所有，而非类对象所有，且其只能访问static变量成员。
此处在类中的静态成员变量和成员函数的初始化也是非常值得注意的：非&lt;code&gt;const static&lt;/code&gt; 类型成员变量必须在类体外初始化。且在类外初始化时，不需要再加static关键词。而对于类中的成员函数而言，&lt;code&gt;static function&lt;/code&gt;可以在类体中初始化。   可以看下面一个简短的编译通过的例子：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;
class A {
    public:
        const static int a;
        const static int b = 4;
        static int c;
        static void print();

        static void print_() {
            cout&amp;lt;&amp;lt;&quot;I am non static&quot;&amp;lt;&amp;lt;endl;
        }
};

const int A::a = 3;
int A::c = 5;
void A::print() {
    cout&amp;lt;&amp;lt;&quot;I am static&quot; &amp;lt;&amp;lt;endl;
}

int main() {
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从作用域的角度来理解static变量，便能够更加准确的把握其多层意义，并在其中找出之间的联系。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Virtual Function</title>
   <link href="http://tom.preston-werner.com/languages/2013/10/20/Virtual-Function.html"/>
   <updated>2013-10-20T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/10/20/Virtual-Function</id>
   <content type="html">&lt;h1&gt;Virtual Function&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;20 Oct 2013 - Beijing&lt;/p&gt;


&lt;h3&gt;虚函数的作用&lt;/h3&gt;

&lt;p&gt;虚函数是为了实现多态性而实现的，更准确的说，是为了实现运行时多态，即dynamic binding的方法。如下例所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

/* a simple example show the difference between the dynamic binding
 * and static binding. And common function override is a static
 * binding which aims to implement a common function in different
 * class. However, the virtual function is just aimed at interface-like
 * function. It implement the dynamic binding.
 */
class shape {
public:
    shape() { };
    virtual void draw() {
        cout&amp;lt;&amp;lt;&quot;Draw shoap&quot;&amp;lt;&amp;lt;endl;
    }
};

class rectangle: public shape {
public:
    rectangle() {};
    void draw() {
        cout&amp;lt;&amp;lt;&quot;Draw rectangle&quot;&amp;lt;&amp;lt;endl;
    }
};

class round: public shape {
public:
    round() {};
    void draw() {
        cout&amp;lt;&amp;lt;&quot;Draw round&quot;&amp;lt;&amp;lt;endl;
    }
};

int main() {
    shape* s;
    s = new rectangle();
    s-&amp;gt;draw();

    s = new round();
    s-&amp;gt;draw();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不用虚函数实现，派生类中对于&lt;em&gt;draw&lt;/em&gt;函数的overriding是在编译时根据所调用的类指针类决定，并不能实现根据运行时指向的实际对象来进行调用。而正是虚函数使得通过基类指针，便能实现动态绑定。因此，上例的运行结果为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Draw rectangle
Draw round
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;进化一： 纯虚函数&lt;/h3&gt;

&lt;p&gt;这种动态绑定的属性使得我们仅通过基类的指针便可以访问其派生类的某种方法，因此在设计对象继承模式时便很常见了。但是，我们发现对于这种依靠基类来进行动态绑定的方法中，某些基类的某种方法我们并不能实现，如下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Declaration from:
 * http://www.learncpp.com/cpp-tutorial/126-pure-virtual-functions-abstract-base-classes-and-interface-classes/
 */

#include &amp;lt;string&amp;gt;
class Animal
{
protected:
    std::string m_strName;

    /* We&#39;re making this constructor protected because
     * we don&#39;t want people creating Animal objects directly,
     * but we still want derived classes to be able to use it.
     */
    Animal(std::string strName)
        : m_strName(strName)
    {
    }

public:
    std::string GetName() { return m_strName; }
    virtual const char* Speak() { return &quot;???&quot;; }
};

class Cat: public Animal
{
public:
    Cat(std::string strName)
        : Animal(strName)
    {
    }

    virtual const char* Speak() { return &quot;Meow&quot;; }
};

class Dog: public Animal
{
public:
    Dog(std::string strName)
        : Animal(strName)
    {
    }

    virtual const char* Speak() { return &quot;Woof&quot;; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此处我们提及两点：&lt;/p&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;. 对于&lt;em&gt;Animal&lt;/em&gt;这种类型，我们无法对其的virtual方法Speak给出实现，当用户定义一个Animal对象时，如果调用其Speak方法，我们无法实现这样一个方法，或是只能空函数体，则得到的是空结果，或是非用户想要的结果，则在某种程度是一种很不好的设计模式。&lt;/li&gt;
&lt;li&gt;. 对于&lt;em&gt;Animal&lt;/em&gt;类，在某种抽象程度上，对象本身是不具有意义的，往往是一个抽象的个体罢了，从语言理解的层面，其往往是一个具有抽象概念的东西。因此，我们不应该允许其实例化。故上面的代码对于其构造函数使用了Protected控制符。
上面的两种情况，都可以利用纯虚函数的概念来解决。其定义方法为：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;virtual const char* Speak() = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而存在纯虚函数的类成为了抽象类，不允许构造对象实例。如此便进一步解决了这种抽象类中，虚函数无法实现，且抽象类不具有实际定义对象必要的情况。&lt;/p&gt;

&lt;h3&gt;进化二： 接口类&lt;/h3&gt;

&lt;p&gt;严格意义上来，C++中并没有一个&lt;strong&gt;Interface&lt;/strong&gt;关键词，来提供这样一种接口功能，但我们可以通过抽象类来定义。通常而言，接口类只提供一种操作原型的声明，把具体实现指派到派生类。从抽象的角度，接口通常不含有具体的数据成员。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java Interview Question</title>
   <link href="http://tom.preston-werner.com/interview/2013/10/19/Java-Interview-Question.html"/>
   <updated>2013-10-19T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/interview/2013/10/19/Java-Interview-Question</id>
   <content type="html">&lt;h1&gt;Java Interview Question&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;03 July 2014 - Beijing&lt;/p&gt;


&lt;h3&gt;Java 面试题小结&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Java String 类的基础知识&lt;/strong&gt;
Q1: String 类到底创建几个对象？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String str = &quot;Hello, World&quot;;
String str2 = &quot;Hello, World&quot;;
String str3 = new String(&quot;Hello,World&quot;);
String str4 = new String(&quot;Hello, World&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A1: String 构造时，如果是常量赋值的话，首先会去常量&lt;strong&gt;Pool&lt;/strong&gt;中查找是否已经存在常量，如存在则直接把常量字符串的引用赋值便可，如果不存在则需要在常量池中创建新的常量引用在赋值给变量的引用;而如果是new操作的化，则是在堆中创建，且每次都会新创建一个常量池中的对象，然后在把这个对象用过new构造函数赋值给其在堆中的新对象。所以&lt;strong&gt;答案&lt;/strong&gt;为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1
1
2
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Q2:  String 中的== 和 equals操作符含义？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; str == str2 ?
 str equals str2 ?
 str3 == str4 ?
 str3 equals str4 ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A2: 通常对于字符串内容的比较我们通过&lt;strong&gt;equals()&lt;/strong&gt;函数来进行，而==运算符则是比较两个字符串引用是否指向同一个对象。两者的区别用下面&lt;a href=&quot;http://stackoverflow.com/questions/767372/java-string-equals-versus&quot;&gt;stackoverflow&lt;/a&gt;上的回答：
&lt;img src=&quot;/assets/img/java_equals.png&quot; alt=&quot;java equals method source code&quot; /&gt; 因此&lt;strong&gt;答案&lt;/strong&gt;为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true
true
false
true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Synchronized 类线程安全和效率的比较&lt;/strong&gt;
Q1: ArrayList, Vector and LinkedList 三者之间的区别？
A1: 可以从两方面来比较，首先对于ArrayList和Vector其底层都是通过Array的连续存储空间实现，可以按位快速存取，但是当出入值时需要顺序后移，因此效率较低，而LinkedList则是用过链表的方式因此其插入效率很高，但查找效率降低。 然后，如果单从线程安全的角度来看，Vector是实现synchronized，因此是线程安全，但是却会因此降低了其效率。引用&lt;a href=&quot;http://www.coderanch.com/t/409421/java/java/Difference-ArrayList-LinkedList-Vector&quot;&gt;JavaRanch&lt;/a&gt;上的一个回答：
&lt;img src=&quot;/assets/img/java_synchronized.png&quot; alt=&quot;ArrayList, Vector LinkedList difference&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Q2: HashMap 和 HashTable的区别？
A2: 可以从两方面来回答。首先是线程安全的角度;其次是是否允许空值的角度。而HashTable都可以看作是对HashMap的限制和提高。因此HashMap是非线程安全的，且是允许一个null键和多个null值的，而HashTable是线程安全的，且是不允许null值和键的。最后可以从扩展性上来看，如果想要默认插入顺序的，可以选择&lt;strong&gt;LinkedHashMap&lt;/strong&gt;，如果想要线程安全的可以使用&lt;strong&gt;ConcurrentHashMap&lt;/strong&gt;，更详细的解答，仍旧是看&lt;a href=&quot;http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable/40483#40483&quot;&gt;stackoverflow&lt;/a&gt;上的解答：
&lt;img src=&quot;/assets/img/java_hashmap_hashtable_difference.png&quot; alt=&quot;difference between HashMap and HashTable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Overloading vs override in Java&lt;/strong&gt;
Q1: Overloading 和 Override之间有什么区别？
A1: Overloading称之为重载，通常是同一个功能的函数，为了实现不同的输入参数个数和类型等需要，在一个对象中定义的多个函数。而Override则通常是存在与父类和子类中的，同一个函数，其参数类型和个数都相等，在子类中对其重新实现，且覆盖了原先的方法。而Overriding通常有两种，一种是&lt;em&gt;vitual&lt;/em&gt;函数的overriding，另一种是非&lt;em&gt;virtual&lt;/em&gt;函数的overriding。前者是一种动态的绑定，而后者是一种静态的。 具体区别如下：
&lt;img src=&quot;/assets/img/java_overloading_override.png&quot; alt=&quot;difference between overloading and override&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Retrospect With Cpp</title>
   <link href="http://tom.preston-werner.com/languages/2013/09/27/retrospect-with-cpp.html"/>
   <updated>2013-09-27T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/09/27/retrospect-with-cpp</id>
   <content type="html">&lt;h1&gt;Retrospect With Cpp&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;27 Sept 2013 - Beijing&lt;/p&gt;


&lt;h3&gt;Hello C plus plus&lt;/h3&gt;

&lt;p&gt;1  &lt;code&gt;const&lt;/code&gt; &lt;strong&gt;member function &lt;/strong&gt; when a member function is declared as const suffixed, it promises that it will not change current class member
2  &lt;code&gt;vitural1&lt;/code&gt; &lt;strong&gt;member function&lt;/strong&gt; must be declare and definition inside of the class body
3  Inherit class construct after the base construct And destruct process, inherit class will be release first, and base class last And when we construct class with simple declare like &lt;code&gt;Class name;&lt;/code&gt;, it means that we construct the class object in local function stack. However, if we use the &lt;code&gt;new&lt;/code&gt; operator, the destructor function will not execute automatically
4  One of the core technique in c++ is its &lt;strong&gt;STL(Standard Template Library)&lt;/strong&gt; It defines most the whole basic data storage type across the whole c++ language And also&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning With Amazoner</title>
   <link href="http://tom.preston-werner.com/interview/2013/09/25/learning-with-amazoner.html"/>
   <updated>2013-09-25T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/interview/2013/09/25/learning-with-amazoner</id>
   <content type="html">&lt;h1&gt;Learning With Amazoner&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;25 Sept 2013 - Beijing&lt;/p&gt;


&lt;h3&gt;1. A Simple Algorithm for Print All Combination of Balanced Parentheses&lt;/h3&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include&amp;lt;cassert&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* we can define a static char array inside the print_bracket function */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;another method:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* this condition filter the illegal bracket */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* recover the modified flag */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;h3&gt;2. Find the Element Pair in Array with Sum Equals to a integer&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Aterm On Desktop For Fluxbox</title>
   <link href="http://tom.preston-werner.com/work/2013/04/11/Aterm-on-Desktop-For-Fluxbox.html"/>
   <updated>2013-04-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/11/Aterm-on-Desktop-For-Fluxbox</id>
   <content type="html">&lt;h1&gt;Aterm On Desktop For Fluxbox&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;11 Apr 2013 - Beijing&lt;/p&gt;


&lt;p&gt;It&#39;s an amazing thing to conquer the aterm, and make it stick on desktop obediently.
The core of the entire process comes from how to make the aterm windows size on the desktop correctly. And I just find that It aways make me confused when I find the &lt;strong&gt;fluxbox&lt;/strong&gt; options about the size of the windows on desktop cannot work.  Ok, let&#39;s get the whole process from scratch.&lt;/p&gt;

&lt;h4&gt;Install the Aterm terminal and Edit the .Xdefaults file&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;equo install x11-term/aterm or emerge x11-term/aterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and make your own .Xdefaults configuration files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aterm*geometry:  80x60
aterm*color1: #ff23
and etc...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Cofnigure Fluxbox app file to make the aterm sticky on desktop&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;[app](aterm)
[sticky]{yes}
[layer]{12}
[Hidden]{yes}
[Dimensions]{900 710}
[Position](TopLeft){5 5}
[Deco]{NONE}
[end]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common options like above. all these seems so easy done well.
Ok, That&#39;s all, you reload your fluxbox, and run the &lt;strong&gt;aterm&lt;/strong&gt;, you will find the beatiful things on your desktoop. Yes, you are right.&lt;/p&gt;

&lt;p&gt;But, when you open the a large file which more than one page with &lt;strong&gt;vim&lt;/strong&gt; editor like, the unfortunately things happens, the border of your aterm windows seems appearence. why? and How?&lt;/p&gt;

&lt;h4&gt;Some small cares and tricky&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;if you set the [Dimensions] options in the app file, you&#39;d better comment your geometry setting in your &lt;em&gt;.Xdefaults&lt;/em&gt; file.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Gnome Icons Howto</title>
   <link href="http://tom.preston-werner.com/notes/2013/04/05/Gnome-Icons-Howto.html"/>
   <updated>2013-04-05T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/04/05/Gnome-Icons-Howto</id>
   <content type="html">&lt;h1&gt;Gnome Icons Howto&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;05 Apr 2013 - Beijing&lt;/p&gt;


&lt;p&gt;Change Gnome Start-here Icons Howto.&lt;/p&gt;

&lt;h1&gt;This is the basic configuration howto about change the gnome start here icons.&lt;/h1&gt;

&lt;p&gt;Common two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;to directly replace the original start-here png with the alternative one you like to do. as following:&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;cd /usr/share/icons/gnome/24*24/places/
mv start-here.png start-here.png.bak
cp your-own-starticon.png start-here.png
git-update-icons-cache /usr/share/icons/gnome/&lt;/p&gt;

&lt;p&gt;And then, just restart your X window, and Thats all.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Another method is to configure the gnome configuration file to add your customize icon path. as following:
open the &lt;strong&gt;gconf-editor&lt;/strong&gt; tools and then select the apps -&gt; panel -&gt; objects -&gt; object_3, and just check the &lt;strong&gt;use_costom_icon&lt;/strong&gt;, then edit the key as your icon paths.  Thats all.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Installation Mahout</title>
   <link href="http://tom.preston-werner.com/work/2013/04/04/Installation-Mahout.html"/>
   <updated>2013-04-04T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/04/Installation-Mahout</id>
   <content type="html">&lt;h1&gt;Installation Mahout&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;04 Apr 2013 - Beijing&lt;/p&gt;


&lt;p&gt;Wow, this guy is so lazy : ()&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How To Share Project On Bitbucket</title>
   <link href="http://tom.preston-werner.com/work/2013/04/02/How-to-Share-Project-on-Bitbucket.html"/>
   <updated>2013-04-02T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/02/How-to-Share-Project-on-Bitbucket</id>
   <content type="html">&lt;h1&gt;How To Share Project On Bitbucket&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;02 Apr 2013 - Beijing&lt;/p&gt;


&lt;p&gt;In the age of open source and could computer, it become very necessary for us to work together ou the cloud with an
share projects. &lt;a href=&quot;http://bitbucket.org&quot;&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/a&gt; provides an possibility for our needs.  this article is aim to
give an simple introduction about how to share and collaborate on a project.
Generally speacking, it mainly contains the following configurationn steps(I&#39;ll assume that your os is
windows):&lt;/p&gt;

&lt;h4&gt;Some Basic Configuration Steps&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;  Install &lt;a href=&quot;msysgit.github.com&quot;&gt;&lt;strong&gt;git for windows&lt;/strong&gt;&lt;/a&gt;. just as the common way of install software on Windows,
click
all the way.
&lt;strong&gt;2.&lt;/strong&gt;  After installing, you need to do a simple configure of git for your name and emails:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;Name@example.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;also you can configure for you favorite editor or diff tools(optional):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global core.editor &quot;vim&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you can configure your git to display with color:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global color.ui true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; then, you need configure ssh key for pull and push on the bitbucket repository. here, I already configure it
for
you, and I will send to you by email, with usage attached. so just skip if you would care the configure details.
otherwise, a tutorial &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;here&lt;/a&gt;.
&lt;strong&gt;4.&lt;/strong&gt; now, it time to pull the repository down, just copy the following command, and execute it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@bitbucket.org:lengerfulluse/acl-multiling.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;after the pull completement, you will find the directory &lt;em&gt;acl-multiling&lt;/em&gt; in your current working directory. That&#39;s
the repository on the cloud.
&lt;em&gt;Notice: you run the &lt;code&gt;git clone&lt;/code&gt; command just for the first time you pull a repository. After that, every time you
work on the existed repository, the first step is to run the &lt;code&gt;git pull&lt;/code&gt; to ensure that your repository
 is the already up-to-date&lt;/em&gt;.
&lt;strong&gt;5.&lt;/strong&gt; you can work on your local repository now, for example do some modify or add a file to the directory, after
that you can check  what &lt;em&gt;files&lt;/em&gt; you have modify or create:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; then you add the file and commit it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add &amp;lt;file you modified&amp;gt;
git commit -m &quot;message you want to say about this commit&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; you can continue to work on the local repository and do the loop as &lt;em&gt;step 5&lt;/em&gt; and &lt;em&gt;step 6&lt;/em&gt;. you can also now
push
your current commit to bitbucket repository.  Also before the &lt;code&gt;push&lt;/code&gt; step, you&#39;d better do the &lt;code&gt;pull&lt;/code&gt; operation again
to ensure the newest status of your local repository. so you should do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if there doen&#39;t exist some emerge conflict, then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&#39;s all, it simply contains normal workflow loop. It is strongly recommended to read the great arts &lt;a href=&quot;http://www.google.com/search?q=pro+git&quot;&gt;&lt;strong&gt;Pro
Git&lt;/strong&gt;&lt;/a&gt;.
Also we can do a simple demonstration together. Any prolem feel free to contact me any time.&lt;/p&gt;

&lt;h4&gt;Some Conflict Screenshot and Howto Emerge Conflict&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;git push failure&lt;/strong&gt;
&lt;img src=&quot;/assets/img/git/push-conflict.png&quot; alt=&quot;push failure&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git pull to emerge&lt;/strong&gt;
&lt;img src=&quot;/assets/img/git/pull-emerge-conflict.png&quot; alt=&quot;pull emerge&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content in a conflict file&lt;/strong&gt;
&lt;img src=&quot;/assets/img/git/conflict-content.png&quot; alt=&quot;cotent&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Reference&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;[1]&lt;/strong&gt; &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;&lt;strong&gt;Generating SSH keys&lt;/strong&gt;&lt;/a&gt;
&lt;strong&gt;[2]&lt;/strong&gt; &lt;a href=&quot;http://jekyllrb.com&quot;&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Talk About Login Script</title>
   <link href="http://tom.preston-werner.com/work/2013/04/01/Talk-About-Login-Script.html"/>
   <updated>2013-04-01T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/01/Talk-About-Login-Script</id>
   <content type="html">&lt;h1&gt;Talk About Login Script&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;01 Apr 2013 - Beijing&lt;/p&gt;


&lt;p&gt;It seems to be an unfinished wanted. From the begining of learning the computer language programmings, it is naturally to be taughted about
the story of great computer hackers. Among all of the cabaility owned by them , the most important one is to crawl on the complex and wideless
internet. So the automatic robot which wander freely on the internet become the greatest things for all the hacker. No matter how beautiful
and effective a hacker&#39;s code, It stills an sallow pain if they haven&#39;t implements a internet robot programming, namely crawls.  Maybe the
topics about crawl will continue in the next sections because of the recently two important projects. (yes, I just assumed that you have
known them ^_^, all right, exactly it just lie on my &lt;a href=&quot;http://github.com:lengerfulluse/byr-crawler.git&quot;&gt;GitHub:byr-crawler&lt;/a&gt;.).  Now, let
start our
talking from the most basic and important, How to write an simple login script.&lt;/p&gt;

&lt;h4&gt;HTTP related protocol You should know&lt;/h4&gt;

&lt;p&gt;To make my clarification more clear and systemic, maybe the current first thing is to know, what&#39;s login script? why needs login script? how
we write a login script?&lt;/p&gt;

&lt;h4&gt;Some Practical Clues You Should Gain From a Particular Gateway&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;the login and logout gateway. The core of login script is to send the http request. Therefore, the http address provide the object we send
to. and because there often exist some different between the login and logout address. So you should first identify the correct address.&lt;/li&gt;
&lt;li&gt;the particular send data required from the vertification server for the login and logout. to more accuracy, the format of the date is the
key to implement the login/logout. Unfortunately, I haven&#39;t konw the tricy to gain all this information, maybe the most efficient way is to
view the post information from the browsers in a login request.  commonly, the username and passwd is neccessary, and the password often needs
to do the &lt;em&gt;md5sum&lt;/em&gt; process. also the entire connection strings is litte OPAC.&lt;/li&gt;
&lt;li&gt;the text process from the return http response informations. And in the situation of shell script implement, it cannot used some
high-level data structure such as XML or JASON parser. the simple and effective method is text process, such as extraction, filtering, and so
on. to get the success\failure informations returned from the response.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Reference&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://bbs.byr.cn&quot;&gt;BYR LOGIN SCRIPT&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bash Note</title>
   <link href="http://tom.preston-werner.com/work/2013/03/30/Bash-Note.html"/>
   <updated>2013-03-30T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/30/Bash-Note</id>
   <content type="html">&lt;h1&gt;Bash Note&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;30 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;Let&#39;s just start from the practical bash examples. The problem is this: I would do some ideal summary for a set of newswires about a particular topic. for example every topic contains about ten documents, which each is about an specified aspect, also connected with the times sequences. However, the time orders about the topic is only embeded in the content of the documents. When you concatenate all this sub-topic documents into a large topic sets to so the following ideal summary task about the particular topic, you would be confused by the un-order docment sets.
And that&#39;s just what the point we aim to solve.&lt;/p&gt;

&lt;h4&gt;Particular and Important Script&lt;/h4&gt;

&lt;p&gt;Although shell script are almost the same in essentials while differing in minor points. To ensure the accuracy of this article, I just decide to limit my note about the shell script on the bash shell. Therefore, the position of this post is aim to get some conclusion about the experience during the usage of the bash script.
It&#39;s definitely an amazing thing that when you feel that you are just write beautiful code skilfully. Especially that when you encounter a pariticular problem ,and you find that it can be resolved by the computer elegant and high-efficiency. That&#39;s the origin of the sense of achievement.  Now, let&#39;s cut the cackle to just begin our particular requirement and resolution.
First we need to divide our problems into some basic modules. they mainly contains three modules: method to extract the date in the documents; formatted the date from the extracted data string; sort and concatenate the date, generate the results.&lt;/p&gt;

&lt;h5&gt;Normalized the Text and Extract the date String&lt;/h5&gt;

&lt;p&gt;During the process of hummanic translation from english to chinese, we conduct our work by three groups of people. and due to the discrepency of encoding system of ther editor, the result files contained incongruous encoding such as UTF-8 encoding, UTF-8 BOM encoding, ascii encoding and so on, so the first things I need to do it normalize the while encodings of the translations files. Therefore, I just write a simple script to check the encoding of files, and find the unmatched encoding, and then to converted them automatically or manually.
Then, There comes the steps of extract the date string from the translated texts. the first things to do is to delete the blank lines in the texts. this tricky is also very important. it makes me re-relizes the function of sed to execute some other command, such as deletion, except for the common used substitued operations. And following the compress blank lines process, I adopt the grep -o option to extract the date information from the strings. also I learning about the array construction method through the bash substitution operations. It make me notices that some useful bash test conditions such as -z: stands for empty. -n: stands for empty string. also the iteration methods of array &lt;code&gt;for file in ${array[@]}&lt;/code&gt;, also some logic operations. ! and -o, -a. One of most important may the usage of functions. how to defintion a function in bash, and pass paramters to the function and return values from it. Morely, such as the local and global variables.
All in a word, I feel that this attemption just make me write code more easily. Also the standardlize of write code is the most important things I should develops.  Just write the code like compose a poem.  That&#39;s the philosophy of Perl languages.&lt;/p&gt;

&lt;h4&gt;Sort accroding to the date&lt;/h4&gt;

&lt;p&gt;The last things to do is just sort the extracted date which belongs to corresponding docs in a particular topics. Here, I also find that the most ultimately and effective methods to learning the usage of sort. And all these things cannot not be finish once. And since you have encounter before, you should find that only by the combination of sytemic learning of the tutorial with the practical problems resolution you can truely master the essentials. And that&#39;s the different of proficient and possibility.&lt;/p&gt;

&lt;h4&gt;Reference&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://tldp.org/LDP/abs/html/&quot;&gt;Advanced Bash-Scripting Guide&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Systemic Learning</title>
   <link href="http://tom.preston-werner.com/life/2013/03/28/Systemic-Learning.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/life/2013/03/28/Systemic-Learning</id>
   <content type="html">&lt;h1&gt;Systemic Learning&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;28 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;The pain on the installation of FreeBSD system fonts during my college
life still exists. It is still impressive that I was totally confused by
the all series unttacked of the sytem fonts settings and the Chinese
localized. I become suddenly hopeless.
However, today, when I come back to re-learning the X window system
settings by the Xorg tutorial, It suddenly become clear extremly. I just
get the conclusion that systemic learning is thousand more important
than the trivel experience, if we only consider the time and efficiency.&lt;/p&gt;

&lt;h4&gt;the global logic clue in our brain&lt;/h4&gt;

&lt;p&gt;The comprehensive understanding about somethings come with a global
logic clue graphy in our brain. We get clear of the principal and the
imporant process or steps to achieve the finally results. In the case of
the complex or large system, we cannot grasp the whole, we need the
inductive process, and gradually combined all the trivals understands
to a whole entires.  In most time, We are accustomed to gain our
knowledege from the whole to the detail parts, which is called
deductive.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Localize Setting</title>
   <link href="http://tom.preston-werner.com/work/2013/03/28/Localize-setting.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/28/Localize-setting</id>
   <content type="html">&lt;h1&gt;Localize Setting&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;28 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;What&#39;s locale? basically, locale is all the information about your geography postion, such as which country you are? what language you use?
and of course contains date time format, moneny currency format and so much information. With the tendy of software internationalize, the
specific localize for specific local users become urgent and necessary. All above is what locale is responsible for.  Ok, let&#39;s get start.&lt;/p&gt;

&lt;h4&gt;Locale Type and Environment Variables&lt;/h4&gt;

&lt;p&gt;The introduction part generally describe some aspects about what particular a lcoale seems contains. and As we know, all these have their
standard definition, context and content details. For the locale, the ISO files have the regular and comprehensive definition. It may contain
the following aspects and in unix-like system, It&#39;s demonstrated as Locale Environment Variables.
- &lt;em&gt;LANG&lt;/em&gt; the default definition for all local settings at once. while allowing the further individual customization via LC_* settings
belows.
- &lt;em&gt;LC_CTYPE&lt;/em&gt; define the character handling properties for the system. &lt;em&gt;The determines which characters are seen as part of alphabet, numberic
and so on&lt;/em&gt;, This also determine teh character set used, if applicable.
- &lt;em&gt;LC_COLLATE&lt;/em&gt; define the alphabetical ordering of strings. This effects &lt;em&gt;eg.&lt;/em&gt; output of sorted directory listing.
- &lt;em&gt;LC_MESSAGE&lt;/em&gt; Programs&#39; localization for applications use message based localization.
- &lt;em&gt;LC_MONETARY&lt;/em&gt; define curry units and formatting of currency type, numberic values.
- &lt;em&gt;LC_NUMBERIC&lt;/em&gt; define formatting of numberic values which are not monetary.
- &lt;em&gt;LC_TIME&lt;/em&gt; define formatting of data and time.
- &lt;em&gt;LC_...&lt;/em&gt; main contains other setting.
- &lt;em&gt;LC_ALL&lt;/em&gt; A special value to overriding all the above settings.
The linux system self provide a lot of locale for almost all of the countries and regions. the specific locale directory is
&lt;code&gt;/usr/share/locale/&lt;/code&gt;, which provide the locale resource files. By default, all kinds of locale contained Here.&lt;/p&gt;

&lt;h4&gt;Setting locale&lt;/h4&gt;

&lt;p&gt;The first step of settings is to know what locale our system current use. Here we need the &lt;code&gt;locale&lt;/code&gt; command. which is used for get
locale-specific informations.
If we want to know what current locale our system support now, we should add the &lt;code&gt;-a&lt;/code&gt; options for the &lt;code&gt;locale&lt;/code&gt;
command. If you find that there doesn&#39;t exist the locale you wanted , you should generate the locale by yourself. which contain two steps:
1. edit the &lt;code&gt;/etc/locale.gen&lt;/code&gt; configure file to add the locale you want.
2. run the command &lt;code&gt;locale-gen&lt;/code&gt; to generate the locale.&lt;/p&gt;

&lt;p&gt;Now, since we have generate the locale we need, we need to setting the locale. Like common linux configure sytles, almost every configure
settings have the different apply range. namely the system-wide and personal user settings. and no exception for the locale. there are two
choice to setting the locale. if you want to settingt the system-wide, you can edit two setting files.
    /etc/env.d/02locale --&gt; LANG=&quot;en_US.UTF-8&quot; for instance.
    /etc/profile --&gt; export LANG=&quot;en_US.UTF-8&quot; for instance.
and for user specified range.
    $HOME/.bash_profile --&gt; LANG=&quot;en_US.UTF-8&quot; for instance.&lt;/p&gt;

&lt;p&gt;Of course the above just simple give a simple example, you can give a specified setting for LC_* Variables for yourself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fcitx And Fonts Setting</title>
   <link href="http://tom.preston-werner.com/notes/2013/03/28/Fcitx-and-Fonts-setting.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/03/28/Fcitx-and-Fonts-setting</id>
   <content type="html">&lt;h1&gt;Fcitx And Fonts Setting&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;28 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;The purpose of this note is to analyze the steps for setting chinese
input method &lt;a href=&quot;http://www.fcitx-im.org&quot;&gt;&lt;strong&gt;Fcitx&lt;/strong&gt;&lt;/a&gt; in an English system
environment.&lt;/p&gt;

&lt;h4&gt;English Environment for Fcitx&lt;/h4&gt;

&lt;p&gt;If you just Google the articles about installing the fcitx, almost most
of them we noted that, you must setting the LC_CTYPE to zh_CN.UTF-8
locale as the prerequisite. Unfortunately, it is wrong, or partly wrong.
Allthough fcitx cannot run on POSIX and C locale, But, it can run on the
en_US.UTF-8 locale settings. And it can provide you the same english
enrionment.&lt;/p&gt;

&lt;h4&gt;Fcitx Environment Varibles&lt;/h4&gt;

&lt;p&gt;There are mainly three important environment variables, they are:
- XMODIFIERS it connects only to the im module. and common setting as
this &lt;code&gt;XMODIFIERS=&quot;@im=fcitx&quot;&lt;/code&gt;
- GTK_IM_MODULE setting the im select for gtk programs. notice that
only your fcitx compile USE flag contains gtk, gtk3, you should set it:
&lt;code&gt;GTK_IM_MODULE=fcitx&lt;/code&gt;, otherwise for common gtk2 programs,
&lt;code&gt;GTK_IM_MODULE=xim&lt;/code&gt;.
- QT_IM_MODULE setting the im select for qt programms. the same from
the above, you should set &lt;code&gt;QT_IM_MODULE=fcitx&lt;/code&gt; only you USE the qt4
flag. and common situation is &lt;code&gt;QT_IM_MODULE=xim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yes, All about this, for startx command, you should putting the above
environment variables in .xinitrc. if you use Slim, you could put it in
the xsessions files.  Provided that You locale is not POSIX or C, it
will works.&lt;/p&gt;

&lt;h4&gt;Install fonts on Sabayon(Gentoo) manual&lt;/h4&gt;

&lt;p&gt;First you should copy the fonts into a system fonts directory or
user self-definition directory.  And if you use the self-definition
directory, you should add the FontPaths directory in the xorg.conf
directory.
Second, you need to enter the font directory, and construct the
fonts.scale and fonts.dir files for indexing of fonts. with the
following commands.
&lt;code&gt;mkfontscale&lt;/code&gt;
&lt;code&gt;mkfontdir&lt;/code&gt;
Finally, we need to reconstruct the fonts cached with command
&lt;code&gt;fc-cached -fv&lt;/code&gt;
After you reboot the X system, you could use the command &lt;code&gt;fc-list | grep
-i font-name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that&#39;s all.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fluxbox Installation</title>
   <link href="http://tom.preston-werner.com/work/2013/03/26/fluxbox-installation.html"/>
   <updated>2013-03-26T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/26/fluxbox-installation</id>
   <content type="html">&lt;h1&gt;Fluxbox Installation&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;26 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;I have mentioned a little about the configuration process related to the lightweight &lt;em&gt;Desktop Environment&lt;/em&gt; or some kind of full-functional &lt;em&gt;Window Managerment&lt;/em&gt;. It&#39;s extremely a bit lucky that I could have encountered the
&lt;strong&gt;Fluxbox&lt;/strong&gt;. It&#39;s almost the same situation as my dating with Sabayon Linux. One day, I suddenly miss the lovely gentoo linux, so I open my
google plus homepage, and search gentoo&#39;s current release news. It&#39;s definately amazing that the second result of the gentoo query term is
about a lovely logo, which like some animal&#39;s foot surrounded by a circle. After search it in wikipedia, I found that it&#39;s
the honey sweet foot of gentoo penguin. As for the Fluxbox, you couldn&#39;t imagine that it&#39;s almost the same situation. Let&#39;s start our
narrative with the completion of Sabayon linux. I first choice the default Gnome Desktop envrionment, and everythins seems just work properly.
However, when I tried to change the backgroud of the desktop theme, I found I cannot open the setting panel with the right click and selection
of change desktop background item. After that some other symptoms continues one by one. For instance, There doesn&#39;t exist &lt;em&gt;System&lt;/em&gt; menu in the
Gnome default taskbar panel. and I cannot use the function of user system settings in my account applet.   So I decide to remove gnome and
start something new, such as KDE or xfce4 &lt;em&gt;etc&lt;/em&gt;. But at the same time, I found that it&#39;s not an easy thing to remove the gnome environment and
install some new desktop environment due to some fuzzy and frustrating depencdency considerations. So I log out the Gnome and back to the GDM
login manager to see whether there are some other Sessions for selection. Bla bla bla, Fluxbox has just been waiting for me. Great, It&#39;s You.&lt;/p&gt;

&lt;h4&gt;Configure Fluxbox&lt;/h4&gt;

&lt;p&gt;The main confiugre file is under the user&#39;s Home directory, which is adopted a common configure style .fluxbox/. and it contains all aspect of
the fluxbox, from the start application with fluxbox, to the menu item selection, windowmenu, keyboard shortcuts and background of the
desktop.  I&#39;ll list below and give a detailed explanations.
    .
    | --&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Xorg Configuration</title>
   <link href="http://tom.preston-werner.com/work/2013/03/26/Xorg-Configuration.html"/>
   <updated>2013-03-26T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/26/Xorg-Configuration</id>
   <content type="html">&lt;h1&gt;Xorg Configuration&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;26 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;In this article, we focus on some basic and foundational introduction about the X11 related topics in our linux experience.&lt;/p&gt;

&lt;h4&gt;Xorg Server&lt;/h4&gt;

&lt;p&gt;There are mainly two sub-sections in the Xorg Server section. firstly, I will conduct some introduction and explanation about the history and roles Xorg take in our hole GUI system. secondly, I&#39;ll give a practical example to show the process of problem trackback and solved.&lt;/p&gt;

&lt;h4&gt;Login Manager or Display Manager&lt;/h4&gt;

&lt;p&gt;To some kinds, when you setup the xorg server and install the Window manager or Desktop Environment you could start the X11 system with just a command &lt;code&gt;start x&lt;/code&gt;. But if you want the show the GUI graphic system all the way, and you won&#39;t want to start the x system in console, you need the help of &lt;strong&gt;Login manger&lt;/strong&gt;, the default login manager for the Gnome is gdm. and correspondly, for Fluxbox, the slim is an ideal choice. Just with these simple line, you could use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;equo install x11-misc/slim
vim /etc/conf.d/xdm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the make the change of the following:, which is the core of choice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
DISPLAYMANAGER=&quot;slim&quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;finally, you should add the xdm to default run-levels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rc-update add xdm default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After finish the basic configure for the slim, and set the
/etc/conf.d/xdm variable, we should be able to login our personal Xsession with the default themes in the /usr/share/slim/theme.
However, we should notice that the /etc/slim.conf configure script file will automatically read the /etc/X11/Sessions/ directory to
find the default multiply Session, so when you login in with the slim, you could select your particular session with a simple F1 key.
Otherwise, if you want to set the default session environment, the simplest way is just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s /etc/X11/Sessions/fluxbox ~/.xsession
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And let&#39;s conclude the above process. Simplely, if we want to create a X window system with Xorg server, what exactly methods we need to do
contains only three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install the Xorg server related source and config for them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting the kernel support for the input and video driver
support. here we should notice that there exists some problems compatiable
problem related to the lagecy video drivers with the KMS(Kernel ModSet tenique), so we should first disable all of the driver for the video.
and then select the proper &quot;nouveau&quot; or &quot;nvidia&quot; drivers. and the &quot;endev&quot; input driver.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Istall the related driver as listed above and set the
corresponding support for the KMS technique.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  equo install ${qlist -CI x11-drivers}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Install the Xorg server, and further configure manually.
equo install xorg-server&lt;/li&gt;
&lt;li&gt; configure the /etc/X11/Xorg.conf.d/ directory files. for the
keyboard and Screen resulations.&lt;/li&gt;
&lt;li&gt; Verify the successful installation of the xorg with command
&lt;code&gt;startx&lt;/code&gt;, for abvious and essy test setting, you can first install
simple &lt;em&gt;xterm&lt;/em&gt; and &lt;em&gt;twm&lt;/em&gt; to test the xorg&#39;s installation and configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install a window manager or desktop environment. After you can
validate the success of xorg server, the next thing you should complete is to
arrange a slave for the xorg-server boss. And the xorg just assigns lots of dirty and hardship work to it&#39;s slave, namely window manager, or
more functional Desktop environment. Formally, window manager is a kind of programs which are reponsible for the arrangement, sechdule and
position of the GUI programms. Here I will just install the most famous lightweight, &lt;strong&gt;Fluxbox&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;  equo install fluxbox&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;and after its installation, you can just configure it&#39;s behaves accroding to the conf.d in \$HOME directory ~/.fluxbox. such as you can
setting the global keyboard shortcuts, the menu content, the wallpaper, the slit and of course the applet widget in the taskbar slit.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose your favirate Login manager. Yes, don&#39;t take it for grant,
allthough there will be no any problems if you type the command &lt;code&gt;startx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;and following by the command &lt;code&gt;startfluxbox&lt;/code&gt;. or more simplely to edit the .xinitrc file in your home directory to add the &#39;startfluxbox&#39;
command in this. however, leave no consideration for the issues of security from the terminal, if you just do your daily work in X window
envrioment, it becomes naturally that there is no necessary for the intermediate steps for execute all this command in console. That&#39;s where
the Login Manager benifits for.  the configure step has just been demonstrated above, we&#39;ll leave no more words here.&lt;/p&gt;

&lt;h4&gt;Xorg Troubleshotings&lt;/h4&gt;

&lt;p&gt;One of the most important reasons that Xorg server confuse people is that its huge and compliated contents and terminology conceptions, which
all are almost divert us away. also the whole installation process is automatically done, so once there encounters some problems, It&#39;s just
terrible, and in most situation, people would select install the whole system. ^_^. I am at least. I always wonder that when I could resolve
this problem myself, here today, I came over a startx failure, and after some dianostic, I finish it eventually.  Here I note some basic and
important steps:
- You&#39;re aim to solve the problems: the first and the only step is to analyze current problem. What&#39;s the symptoms of the problems, is
there some log or error output? how many possible reasons for this/these symptoms? what&#39;s the most possible one?
- Be careful and most selective for the search keywords when Google, also you should first finish some basic background knowledge learnint to
have a better understanding of the problem.
- Do necessary backup work. when you attempt to some possible solutions for the problems, you&#39;re experiment on the system, back up the
original version files or programs, before you do every dangerous things!!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sabayon Linux Fresh</title>
   <link href="http://tom.preston-werner.com/work/2013/03/25/Sabayon-Linux-Fresh.html"/>
   <updated>2013-03-25T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/25/Sabayon-Linux-Fresh</id>
   <content type="html">&lt;h1&gt;Sabayon Linux Fresh&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;25 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;When &lt;a href=&quot;http://www.gentoo.org&quot;&gt;&lt;strong&gt;Gentoo&lt;/strong&gt;&lt;/a&gt; beckons to you, follows him. Though his ways are hard and steep.
Thanks for the instruction from &lt;strong&gt;Ryan Li&lt;/strong&gt; at &lt;em&gt;RedHat&lt;/em&gt; Co.td during my internship, I stepped on a nice
journal companied by &lt;strong&gt;Gentoo&lt;/strong&gt; linux distribution. &lt;code&gt;If it moves, Just compiles it&lt;/code&gt;. All the way, I finally understand the reason
why lots of guys are so addicted by the linux, by gentoo linux respecially. Althought the journal is full of uncetain hardships, The exciting
of achievement is beyond all these things. When you came over all the way, I can have fruitness harvest which are not only the knowledge or
some cool skills you got, But another most important things in your life,  the courage to conquer every things, the belief to complete tasks
efficiently and perfectly. If we compare life to be a war, It is the wapean that determines the success or failure. Similarly, proper tools
for our daily work is extremly improtant, I used to be curious about every linux distribution, for instance, &lt;strong&gt;Ubuntu&lt;/strong&gt;, &lt;strong&gt;OpenSuse&lt;/strong&gt;,
&lt;strong&gt;FreeBSD&lt;/strong&gt;, &lt;strong&gt;Backtrack&lt;/strong&gt;, &lt;strong&gt;ArchLinux&lt;/strong&gt;, all for the desktop environment too, &lt;strong&gt;Gnome&lt;/strong&gt;, &lt;strong&gt;KDE&lt;/strong&gt;, &lt;strong&gt;Xfce&lt;/strong&gt;, &lt;strong&gt;Awesome&lt;/strong&gt; etc. not to say a
lot of application tools, shell and so much others. However, it&#39;s just to be dispointed that I just cannot stop my step to get further on some
particular useful tools. Exactly, I was always too shallow.
One of my shortcomings is that I cannot pay attention on the same things for a long time. Bla bla bla, yea, you are right, it&#39;s just like a
child, right? To be honesly, this habits frustrates me all the time. In the other hand, it&#39;s the necessary quality for the exploiters. It&#39;s
because of this, that I have the opportunity to explore a lot of amazing zones of the linux world.
Yes, it is the first time I encounter the sabayon linux distribution. yesterday, I miss the &lt;strong&gt;Gentoo&lt;/strong&gt; so much, so I logged into my Google
plus account, and enter the search bar to find some interest news about the gentoo, It&#39;s amzing that the second result of my query is sabayon,
I was very curous about what a kind of distribution it is How can it display here?&lt;/p&gt;

&lt;h4&gt;What distinguish a different distribution for me&lt;/h4&gt;

&lt;p&gt;I admit that what a linux actually attracts me is just about two aspects:
- &lt;em&gt;theme&amp;amp;appearence&lt;/em&gt; You may think that this is a so shallow point, yes, it does. I come contacted with linux since when I was a freshman in
&lt;a href=&quot;www.njupt.edu.cn&quot;&gt;&lt;strong&gt;NUPT&lt;/strong&gt;&lt;/a&gt;. What attracted me a lot lies in that the compize&#39;s cool cubic destkop effects. However, I don&#39;t like it&#39;s theme
appearence, So in the next tries, I try other linux distribution mentioned above.
- &lt;em&gt;mirror source&amp;amp;package manager&lt;/em&gt; It means that how convient it bring to you. Imagine that when you want to install a software for your work,&lt;/p&gt;

&lt;h4&gt;Some basic configure for Sabayon installation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Git configure and SSh protocol configure:

&lt;blockquote&gt;&lt;p&gt;  git config --global core.editor &quot;nano&quot;
  git config --global user.name &quot;Joseph Heng&quot;
  git config --global user.email &quot;lengerfulluse@gmail.com&quot;
  git completion bash. we add it in .bashrc with command &lt;code&gt;source ~/.git-completion.sh&lt;/code&gt;
  copy the private, public keys and known_hosts to the ~/.ssh directory.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the faster mirror for the package update and source download, first you should know where the repositories list lie in:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  /etc/entropy/repositories.conf
then to test the connection speed of these repositories, and then choose the faster.
  equo repo mirrorsort sabayonlinux.org   # for Daily reportory
  equo repo mirrorsort sabayon-weekly     # for Weekly reportory
  equo repo mirrorsort sabayon-limbo      # as limbo implied, the test reportory. Be careful to use!!!&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Equo Update and install:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  equo update
  equo install entropy rigo&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;Keyboard Shortcut:

&lt;blockquote&gt;&lt;p&gt;  bind the &lt;em&gt;Alt+T&lt;/em&gt; to open a terminal
  bind the &lt;em&gt;Alt+J&lt;/em&gt; to switch the terminal to previous tab
  bind the &lt;em&gt;ALt+K&lt;/em&gt; to switch the termianl to next tab
  bind the &lt;em&gt;Meta+D&lt;/em&gt; to display the desktop.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;Be familar some basic package manager tools:

&lt;blockquote&gt;&lt;p&gt;  equo [search install ...]
  rigo GUI entropy manager tools.
  eselect
  emerge&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Migrate from Gnome to Fluxbox&lt;/h4&gt;

&lt;p&gt;Occasionally, I find the install bugs during my sabayon installation, the results is that my &lt;strong&gt;Gnome&lt;/strong&gt; 3.6 version cannot function well. To be disspointed, the &lt;em&gt;System&lt;/em&gt; menu just gone. and some menu panel and desktop background missing too. Hey, hey, hey! A sound reminds me that I still have another default selectioon for desktop windows manager: &lt;strong&gt;Fluxbox&lt;/strong&gt;, It&#39;s Great!
The core configure directory directory is ~/.fluxbox, and that&#39;s all.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web Application Framework</title>
   <link href="http://tom.preston-werner.com/work/2013/03/24/Web-Application-Framework.html"/>
   <updated>2013-03-24T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/24/Web-Application-Framework</id>
   <content type="html">&lt;h1&gt;Web Application Framework&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;24 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;Last week, I was always busy with learning a new programming language &lt;a href=&quot;www.ruby-lang.org&quot;&gt;&lt;em&gt;Ruby&lt;/em&gt;&lt;/a&gt; and was attracted by it&#39;s so much cool features. And of course, it&#39;s philosophy of design. It&#39;s aim to write a language for programmers, but not the computers. It&#39;s many global symbol system, it&#39;s fancy different but meaningful indicators for funtions. It&#39;s functional features like lambda and proc class. It combines a lot of features like &lt;em&gt;python&lt;/em&gt;, &lt;em&gt;perl&lt;/em&gt;, &lt;em&gt;shell&lt;/em&gt;, &lt;em&gt;awk&lt;/em&gt;, &lt;em&gt;Java&lt;/em&gt;, &lt;em&gt;C++&lt;/em&gt; for instance.
Also, to see the power of ruby language, I try to construct a &lt;em&gt;ruby on rails&lt;/em&gt; web application framework. Up to here, I come into contact with the conception of &lt;em&gt;web application framework&lt;/em&gt;. I try to connect my previous knowledge about the web development related work with all the development tools I used before. Such as Spring Structs and Hibernate, Python web.py, including this, Ruby on rails.&lt;/p&gt;

&lt;h4&gt;Features on WAF&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web template system&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Art Of Arrangement</title>
   <link href="http://tom.preston-werner.com/life/2013/03/21/Art-of-Arrangement.html"/>
   <updated>2013-03-21T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/life/2013/03/21/Art-of-Arrangement</id>
   <content type="html">&lt;h1&gt;Art Of Arrangement&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;21 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;A very little things happens today that everybody may encounter and may even not to  mention it. My mental ask to find the previous project&#39;s source programming, which maybe re-used in our current&#39;s project. Accidently, I have no idea where this source I put it. After doze of endeavours, I gave up, and of course felt very dispointed the whole day. I retrospect my this horrible habit, that leave the staged things away. I get the conclusion that I would never re-use or do some back-review work on this done things in mostly situations. And to some exents, except the remain knowledge in my brain, I could hardly adopt any excellent methods or design which is perfectly completed before. In other words, I often tend to reinvent the wheel.&lt;/p&gt;

&lt;h4&gt;Horrible Habits&lt;/h4&gt;

&lt;p&gt;Remember that when I was just a little boy, my grandfather often told me that How important to form the habit of arrangement. Arrangement of our daily events and our mind. However this simple but also profound words almost don&#39;t have any influence on me. from the kidgardon time to the high school age, all the whole of my life and study is just benifited from brain and not to bad memory. Unfortunately, with the increase of our ages and the extend of our life, the knowledge grow rapidly. The big bang of our knowledge make me unpromising and hopeless to my self. It&#39;s a long time before I could came over my un-believable of capability. Until that, I still didn&#39;t recongize it is exactly the inadequate methods that prevent me from my ideal success. In one words, I didn&#39;t know how to study and work efficiently. I was eager to seek new and curious knowledge and tools, but never come back to think the practical meanings and effect behind it.&lt;/p&gt;

&lt;h4&gt;Knowledge and Capability Come from Arragement&lt;/h4&gt;

&lt;p&gt;No one believe that if you own a book, you know all the knowledge and lessons in that book. your knowledge is not decided by how many books you reads, but how much you learn from them. Our brain like all logic and sequece things, it hates unsuitable tedious and dirty. If you put a lot of unrelated or unsorted things in your mind,  it will easily got confused and even refuse to work for you. the spirit or nature of arrangement and category is exactly to make logical sort for our brains. Our brain tends to connect the new isolated knowledge node to the exist large net of knowledge. Knowledge is power, of course, knowledge rise capability. An important approach to improve our capability lies in form the habit of make arrangement for our brain.&lt;/p&gt;

&lt;h4&gt;Some Useful Approach or Tricky Tips&lt;/h4&gt;

&lt;p&gt;From a perspective of a techniquer, Our whole time commonly is dedicated to three things. Our work, here I refer to the true and real work, which we like it and enjoy the moment of working. Our daily Transaction, people&#39;s social property determines that It cannot be avoided to do some daily personnel or social things. The last one is our life which is also the important part besides our work.Tonight, I just discuss the first part, namely arrangement for my work. Every things in our work, we should do some principal or common resolution to simplify our daily life.
- &lt;strong&gt;Software&lt;/strong&gt;  Exactly, It cannot be avoided that we need do a lot of programming working in our daily project work. Therefore, it is naturally will have a ot of finished or unfinished software, which contain the source code itself, als related documents, material, data sets or other project-related  things.
- &lt;strong&gt;Learning Material&lt;/strong&gt; Knowledge grows every moment, You will leave the queue if you stop learning. There learning material mainly contain some tool-like material, such as language learning tutorial, some useful utilies or tools in our daily tasks, such as &lt;strong&gt;markdown&lt;/strong&gt; language, &lt;strong&gt;LaTex&lt;/strong&gt; for typesetting, even &lt;strong&gt;Vim&lt;/strong&gt; manuals.
- &lt;strong&gt;Research&lt;/strong&gt; For a schalor, or a master student, We should have our own research fields and interst research directions. It distinguish us from the college students or others. For the research parts, we should put attention on the algorithms and it&#39;s implementation methods or tools.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Vim Manual</title>
   <link href="http://tom.preston-werner.com/notes/2013/03/20/My-Vim-Manual.html"/>
   <updated>2013-03-20T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/03/20/My-Vim-Manual</id>
   <content type="html">&lt;h1&gt;My Vim Manual&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;20 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;Love is definitely amazing thing! ^_^, A ha ? Penny.
I become to enjoy the writing and thinking time, when the light is  turn off. My heart is warm, and mind is clean, the whole circumstation is just right, except my pumble poor english represion. All right, lets take the driver, go!&lt;/p&gt;

&lt;h4&gt;My Vim Note&lt;/h4&gt;

&lt;p&gt;I choose the excellent vi&amp;amp;vim editor since the first time I got contact with Linux OS. the just perfect j, k, h, l keys, all the scenes are so beautiful! I like the spirk learning curve, which discourage the weak, but encourage the brave man to walk the nice travel of a new world.&lt;/p&gt;

&lt;h5&gt;Cursor movement&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; - jump by start of words (punctuation considered words, etc. &lt;em&gt;word,&lt;/em&gt; two words: &lt;em&gt;word&lt;/em&gt; and &lt;em&gt;,&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;W&lt;/strong&gt; - jump by words (spaces separate words, etc. &lt;em&gt;word,&lt;/em&gt; one word: &lt;em&gt;word,&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; - jump to end of words (punctuation considered words.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt; - jump end of words (no punctuation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;b&lt;/strong&gt; - jump backward by words(punctuation considered)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B&lt;/strong&gt; - jump backward by words(no punctuation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0&lt;/strong&gt; - (zero), start of line. which is very practical.
&lt;strong&gt;Note&lt;/strong&gt;: Prefix a cursor movement command with a number to repeat it.&lt;/li&gt;
&lt;/ul&gt;


&lt;h5&gt;Insert Mode -Inserting/Appending text&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ea&lt;/strong&gt; - append at end of word. the same to bA, append start of words. Amazing combining commands.

&lt;h5&gt;Editing&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;J&lt;/strong&gt; - join line below to the current one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cc&lt;/strong&gt; - change(replace) the whole line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cw&lt;/strong&gt; - change(replace) to the end of word.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c$&lt;/strong&gt; - change(replace) to the end of line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt; - delete character at cursor and substitute text. compare with &lt;em&gt;r&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; - delete line at cursor and substitute text. (same as &lt;em&gt;cc&lt;/em&gt;).

&lt;h5&gt;Cut and Paste&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yy&lt;/strong&gt; - yank(copy) the whole line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yw&lt;/strong&gt; - yank(copy) the whole word.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;y$&lt;/strong&gt; - yank to end of line.

&lt;h5&gt;Search/Replace&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:%s/old/new/gc &lt;/strong&gt; - replace all the &lt;em&gt;old&lt;/em&gt; with &lt;em&gt;new&lt;/em&gt; throughout file with confirmations.

&lt;h5&gt;Working with multiple files&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:e file&lt;/strong&gt; - Edit a file in a new buffer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:bnext&lt;/strong&gt; - go to next buffer(or :bn ).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:bprev&lt;/strong&gt; - go to previous buffer( or :bp).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:bd&lt;/strong&gt; - delete a buffer, namely close a file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:sp filename &lt;/strong&gt; - open file in a new buffer and split window. &lt;strong&gt;This command is useful&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + ww&lt;/strong&gt; - switch between windows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + ws&lt;/strong&gt; -split windows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + wv&lt;/strong&gt; -split windows vertical.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + wq&lt;/strong&gt; -close windows.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Py  Search</title>
   <link href="http://tom.preston-werner.com/work/2013/03/19/py--search.html"/>
   <updated>2013-03-19T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/19/py--search</id>
   <content type="html">&lt;h1&gt;Py  Search&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;19 Mar 2013 - Beijing&lt;/p&gt;


&lt;h3&gt;HOW TO py-search&lt;/h3&gt;

&lt;p&gt;implemented by python to create an integrated search engine module, including crawler, indexing&amp;amp;search, web interface.&lt;/p&gt;

&lt;h4&gt;Main Three Modular&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;index-creator from database.&lt;/li&gt;
&lt;li&gt;search modular with Whoosh&lt;/li&gt;
&lt;li&gt;web interface GUI with web.py template.&lt;/li&gt;
&lt;li&gt;kylin desktop search application. &lt;strong&gt;Here, we supply the query results sorted function &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Source Directory&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
|-- **indexer_from_db.py**: creating index from database.
|-- **searcher.py**: main search api.
|-- web/
|-- |--code.py: python servlet for web.py
|-- templates/
|-- |--index.html: web interface for user query input.
|-- gui/
|-- |--kylin-desktop.py: main desktop application.
|-- |data-index/: index data files.
|-- README.md
|-- README.txt: same as above.
|-- kylin-desktop.py: same as web directory
|-- web-gui.py: same as code.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Congiure &amp;amp; Install&lt;/h4&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;  mysql-connector-python-1.0.9-py2.7.msi install&lt;/li&gt;
&lt;li&gt;  install setuputils through ez_setup.py, and then add Script subdirectory in python install to env variables.&lt;/li&gt;
&lt;li&gt;  install Whoosh 2.4.1 with the easy_install.exe tools&lt;/li&gt;
&lt;li&gt; install web.py with easy_install for web front end display.&lt;/li&gt;
&lt;li&gt; install xlwt package for write results to excel.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Perl Python Ruby Note</title>
   <link href="http://tom.preston-werner.com/languages/2013/03/19/perl-python-ruby-note.html"/>
   <updated>2013-03-19T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/03/19/perl-python-ruby-note</id>
   <content type="html">&lt;h1&gt;Perl Python Ruby Note&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;19 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;Fortunately, I still keep passion about the new things. Especially for the programming languages. from the moment that I first met c language, I wonder whether other various language look like. are they also static strong type? Are they have the unpleasant points? Are they contructed by the function invoking and variables? Are they general purpose or somethings like shell script? All in all, I seek for other interesting features in other language. In a word,  I attempt to find somethings common points and different parts respectively.&lt;/p&gt;

&lt;h4&gt;&quot;All Language are just tools to solve problems&quot;&lt;/h4&gt;

&lt;p&gt;What a  concise summary! languages are just tools to solve particular problems. On one hand, Allthought each one has merits and its area of expertise, you can just show the most suitable for the specific problem. On the other hand, all roads to Roman. Classical book &lt;em&gt;SICP&lt;/em&gt; tells me that except the essential programming paradigms difference under the two branches of functional and imperative, all their sub-branches share lots of commons. the only main difference lies in the discrepancy of &lt;strong&gt;syntax sugar&lt;/strong&gt;. For instance, their all have basic and similar syntax. basic data type(though may distinguish between strong and weak type, dynamical and static), Conditional statement(though it seems little different, such as if else for C Java, if ; then elif done for shell, if : for python. ), Control flow (such as for loop, while loop, break, continue), also some basic data structure, such as array, list, hashmap ( or dictionary in Python and Perl). also some basic function( no matter it&#39;s member function of OO language or function), And also the most important part is its function library(C,C++) or Package(Java) or Module(Perl or Python).
However, In some kinds, you can also think that the above things is just touch the superical part of languages. Because You can&#39;t become an experience and professional programmers with just that. As an chinese old sayings: a man can lead a horse to the water but he cannot make him drink. For the practical enterprise project development, there are often two focus: the develop efficiency and quality of product. there are lot of principals and conventional. it is that distinguish the normal and professional programmers. these potential things can alos thought as something like design pattern and software engineering.
All right, we get involved too much.&lt;/p&gt;

&lt;h4&gt;Intersting features borrowing&lt;/h4&gt;

&lt;p&gt;To design a language is to shut oneself up in a room making a cart, they all borrow a lot of  excellent features in exising languages. For instance, Perl borrows features from other languages including C, shell scrpting, AWK, sed. which obviously will provide it great power in the text processing applications tasks.
Python&#39;s design philosophy emphasizes the code readability.
Ruby is a dynamic, reflective, general-purpose pure OO languages that combines syntax inspired by Perl with Smalltalk-like features. It also was influenced by Eiffel and Lisp.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>About Gui Programming</title>
   <link href="http://tom.preston-werner.com/work/2013/03/18/About-GUI-Programming.html"/>
   <updated>2013-03-18T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/18/About-GUI-Programming</id>
   <content type="html">&lt;h1&gt;About Gui Programming&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;18 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;I couldn&#39;t remember what&#39;s exact the time, when I begin learning to do comparison between different but similar things. there is obvious no exception for the computer programming. Especially for GUI programming.&lt;/p&gt;

&lt;h4&gt;Since GUI Road&lt;/h4&gt;

&lt;p&gt;I do remember the sence that when I first met the GUI programming. It laid a deep impression on my mind. Since then, you recognized that you can do such beautiful and professional(seems like) windows interface yourself.
Just like many modern normal college students, the materials where you first encountered programming are basically textbook. As a consideration of your low-level computer skills, Unix-like OS just makes most people tedious and be kept away naturally.
One of most important member in Windows eco-systems, MFC become my first station in GUI programing travel. Before that, I were very curious about the principal of how can people can implement such complicated windows system with just simple syntax of program languages. How just all that things works!  So, in summar of 2009, for the sake of Image CUP of NUPT, I begin a nice travel with about one month time. How perfect that time!
Last year, I gave another attempt about GUI in java awt and Swing framework, the whole process is surface and short. Except that I was tried by all these framework and their logic relations and event sequence.
Recently, It&#39;s maybe partly caused by the great intrest about &lt;strong&gt;Python&lt;/strong&gt; language, it&#39;s nice syntax and board applications programming fields appeals me a lot.  So when encount the same situation of indexing and searching modualr implementation, I just truned around to another new pypass. I decided to try something new, &lt;strong&gt;wxPython&lt;/strong&gt; GUI framework. To be honestly, It&#39;s not an easy way, which makes me rethink the natural things about the GUI programming themselves, not just the personnal detailed modular or funtions.
A good story just starts...&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;App&lt;/strong&gt; or &lt;strong&gt;Window&lt;/strong&gt; or &lt;strong&gt;Document&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Noted here. In my superficial experience, there are two main basic components in common GUI programing. the App and Window, the former is responsible for the entrance of whole programming, the invoke of windows event loops. In other words, you can regard it as working background. And the latter is window, namely graphic user interface, which show applications&#39; appearances. it interact with user, recieve user response and respond results back to the user through the GUI demonstration too. If we dig it deeper, we can find the key roler laid in the window contains the various of window &lt;em&gt;Widgets&lt;/em&gt; (which layout frame or container) and &lt;em&gt;Event&lt;/em&gt; Bind and handlers.
Equipped with above two weapons, you could finish some basic and simple tasks, whcih rely on some not so complicated dialogs or widgets to show or interact with users, even in the age of user experience first. However, if you want the whole object storage or realtime user interaction operation, such as text/word processor, games applications, You just hit the skin. Document can be viewed as a store or serialize object, which is in charge of the data management. It also manage partly the communication between the data and methods.&lt;/p&gt;

&lt;h4&gt;For Complicated Logic Relation in GUI&lt;/h4&gt;

&lt;p&gt;I found it just very difficult to grasp the whole skeleton of the GUI programming. Put simply, it means that when you sit at your computer, open your favorite editor(Vim for example) or other popular IDE environment, you just become confused. Where should I start from? There exists a lot of tool-tricy logic sequeces in the whole programming procedure.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Wxpython</title>
   <link href="http://tom.preston-werner.com/languages/2013/03/11/learning-wxPython.html"/>
   <updated>2013-03-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/03/11/learning-wxPython</id>
   <content type="html">&lt;h1&gt;Learning Wxpython&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;11 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;For a part of project, the demands for the gui interface enforce me to find a simple and flexibile toolkit-like to develop a desktop programming. the two main choices are the &lt;strong&gt;Swing&lt;/strong&gt; and &lt;strong&gt;wxPython&lt;/strong&gt;. The java things bores me a lot in before. So I decide to try something new, since I have a lot of interest in python recently.&lt;/p&gt;

&lt;h4&gt;Modules introduction&lt;/h4&gt;

&lt;p&gt;wxPython is a cross platform toolkit for creating desktop GUI applications. the principal author is &lt;strong&gt;Robin Dunn&lt;/strong&gt;. wxPython consists of the five basic modules.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- Controls: provides the common widgets, such as Button, Toolbar.
|-- Core: consists of elementary classes. Object, Sizers, Events.
|-- GDI: used for drawing onto the widgets.
|-- Misc: various other classes and modules. logging, configuration.
|-- Windows: consists of various windows. Panel, Dialog, Frame etc.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Widgets are called controls in windows. GUI programming is a tedious project, the main reason lies in that the inner logical flow troubles me a lot. such as when you try to create a menuitem, you should first contruct a MenuBar object, then a Menu object, and then construct a menuitem, finnally append the menu object to the menubar object. Also you should bing the event to the itemmenu object.&lt;/p&gt;

&lt;h4&gt;Sizer&lt;/h4&gt;

&lt;p&gt;The programmer specifies the position and the size of each widget in pixels. when you use the absolute positions, you should understand several things:
- when you resize the window, the size and the position of widgets do not change.
- applications look different on various platforms.
- changing fonts might spoiled the layout.
- it&#39;s difficult to redo the layout.&lt;/p&gt;

&lt;p&gt;Sizer address all those issues, we can choose among these sizers:
    .
    |-- wx.BoxSizer enable us to put several widgets into row or column.
    |-- wx.GridSizer lays out widgets in two dimensional table, each cell has the same size.
    |-- wx.FlexGridSizer all cells have same height in a row.
    |-- wx.BagSizer the most complicated sizer.&lt;/p&gt;

&lt;h4&gt;Events&lt;/h4&gt;

&lt;p&gt;Events are integral part of every GUI application. All GUI application are event-driven.
&lt;strong&gt;Event object&lt;/strong&gt; is an object associated with the event. It is usually a window. &lt;strong&gt;Event type&lt;/strong&gt; is a unique event, that has been generated. &lt;strong&gt;Event binder&lt;/strong&gt; is an object, that binds an event type with an event handler.&lt;/p&gt;

&lt;h4&gt;Widgets&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;wx.Button&lt;/li&gt;
&lt;li&gt;wx.ToggleButton&lt;/li&gt;
&lt;li&gt;wx.StaticLine&lt;/li&gt;
&lt;li&gt;wx.StaticText&lt;/li&gt;
&lt;li&gt;wx.StaticBox it is used to logically group various widgets.&lt;/li&gt;
&lt;li&gt;wx.ComboBox a single line text field, a button with a down arrow image and a listbox.&lt;/li&gt;
&lt;li&gt;wx.CheckBox notice that, like the togglebox, it has two states.&lt;/li&gt;
&lt;li&gt;wx.StatusBar&lt;/li&gt;
&lt;li&gt;wx.RadioButton&lt;/li&gt;
&lt;li&gt;wx.Gauge It has an indicator to show the current state of a task.&lt;/li&gt;
&lt;li&gt;wx.Slider&lt;/li&gt;
&lt;li&gt;wx.SpinCtrl&lt;/li&gt;
&lt;/ul&gt;


&lt;h5&gt;&lt;em&gt;reference&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;[1]:&lt;/em&gt; &lt;strong&gt;&lt;a href=&quot;http://zetcode.com/wxpython/&quot;&gt;wxPython tutorial&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>To Live, To Life</title>
   <link href="http://tom.preston-werner.com/life/2013/03/10/to-live,-to-life.html"/>
   <updated>2013-03-10T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/life/2013/03/10/to-live,-to-life</id>
   <content type="html">&lt;h1&gt;To Live, To Life&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;10 Mar 2013 - Jiangsu&lt;/p&gt;


&lt;p&gt;In the myterious equations of love that any logic or reasons can be found.
you are the only reason I am. You are all the reason.&lt;/p&gt;

&lt;h4&gt;Enjoy writing&lt;/h4&gt;

&lt;p&gt;At some point, I begin to rethink the meanings of writing. It seems to me that it&#39;s not only the memories of carrier, but also it organize my thoughts, enlightened and inspired ideas.  Especially for the developers, it&#39;s important to form the habit of summarization and conclusion.
Under the cover of darkness, a suitable desk accompanied with a laptop, beside a cup of tea. In the warm light, the smell of tea flow with mind. It&#39;s just perfect!&lt;/p&gt;

&lt;h4&gt;Just go ahead&lt;/h4&gt;

&lt;p&gt;The preliminary assumption on the content of this blog contains the following &lt;strong&gt;&lt;em&gt;categories&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;note&lt;/strong&gt; : the usage of some tools or languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;study&lt;/strong&gt;: some interest research fields in my directions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;phi&lt;/strong&gt;: some comprehensive thoughts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lankar&lt;/strong&gt;: about personality writing by Chinese.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compar&lt;/strong&gt;: the customize abbre of comparision, which is appeals to me a lot.
The preliminary assumption on the content of this blog contain the following &lt;strong&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;.
|-- life
|   |-- feelings
|   |-- tips
|-- work
|   |-- languages
|   |   |-- python
|   |   |-- ruby
|   |   |-- c++
|   |   |-- et al.
|   |-- tools
|   |-- |-- git
|   |-- |-- latex
|   |-- |-- et al.
|   |-- research
|   |-- |-- nlp(natural language process)
|   |-- |-- ml(machine learning)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;So long&lt;/h4&gt;

&lt;p&gt;However, the position of this blog is still aimed to technique articles, and do some help for myself, and It will be my honor if it happens to be useful to you.
so long, and thanks for all the fish ^_^&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Some Comparison Between Ruby And Python</title>
   <link href="http://tom.preston-werner.com/languages/2013/03/10/some-comparison-between-ruby-and-python.html"/>
   <updated>2013-03-10T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/03/10/some-comparison-between-ruby-and-python</id>
   <content type="html">&lt;h1&gt;Some Comparison Between Ruby And Python&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;10 Mar 2013 - Beijing&lt;/p&gt;


&lt;p&gt;Memory is a scret things. many people may encounter the following situation: when you endeavour to remember some connected or similar things togther, It often become more difficult to remember them. what confuses us most just lies in the many similarities and differences in their properties.&lt;/p&gt;

&lt;h4&gt;functional programming &lt;strong&gt;vs&lt;/strong&gt; imperative programming&lt;/h4&gt;

&lt;p&gt;From the perspective of deeper phylosophy level of programming, we can distinct all kinds of languages(such as &lt;em&gt;ruby, python, c, c++, haskell, lisp&lt;/em&gt; etc) with the category above.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://tom.preston-werner.com/lessons/2011/12/29/jekyll-introduction.html"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;h1&gt;Jekyll Introduction&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;29 Dec 2011 - Beijing&lt;/p&gt;


&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&#39;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;h3&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &quot;a simple, blog aware, static site generator&quot;.&lt;/p&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
&lt;li&gt;No internet connection required.&lt;/li&gt;
&lt;li&gt;Ability to publish via git.&lt;/li&gt;
&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&#39;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;
  Stores configuration data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;
  This folder is for partial views.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &quot;objects&quot; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&#39;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &quot;set&quot;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &quot;lessons/beginner&quot;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&#39;t find &quot;lessons&quot; and &quot;beginner&quot; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&#39;s or post&#39;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&#39;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;p&gt;  &lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h3&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &quot;root&quot; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&#39;t do jackshit in liquid that hasn&#39;t been allowed explicitly by the implementation.
What&#39;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&#39;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt;
My personal stance is to not invest time trying to hack liquid. It&#39;s really unnecessary
&lt;em&gt;from a programmer&#39;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&#39;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt;
  This is done with textile or markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&#39;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&#39;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&#39;s job is to generate a static representation of your website.
The following is an outline of how that&#39;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt;
Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt;
Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
At this stage your site is one big computed ruby object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;
Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &quot;liquified&quot;.
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt;
 Finally the liquid templates are &quot;rendered&quot;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&#39;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&#39;d like.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>