<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tom Preston-Werner</title>
 <link href="http://tom.preston-werner.com/atom.xml" rel="self"/>
 <link href="http://tom.preston-werner.com/"/>
 <updated>2015-05-28T23:06:24+08:00</updated>
 <id>http://tom.preston-werner.com/</id>
 <author>
   <name>Tom Preston-Werner</name>
   <email>tom@mojombo.com</email>
 </author>

 
 <entry>
   <title>Singleton Design Pattern</title>
   <link href="http://tom.preston-werner.com/2015/05/28/singleton-design-pattern.html"/>
   <updated>2015-05-28T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2015/05/28/singleton-design-pattern</id>
   <content type="html">&lt;h1&gt;Singleton Design Pattern&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;28 May 2015 - Beijing&lt;/p&gt;


&lt;p&gt;singleton模式看似简单，却有很多值得注意的地方。下面给出一个经典的多线程安全的简单例子，然后NOTE下值得注意的几点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package org.josepheng.design_pattern.singleton;

/**
  * Be capable of demonstrate the singleton design pattern.
  *
  * @author hengwei
  */

public class ConnectionManager {
  private static volatile ConnectionManager uniqConnctor;

  private ConnectionManager() {
      // private constructor.
  }

/**
      * Global access point of obtain unqiue object instance.
      */
  public static ConnectionManager getInstance() {
      if (uniqConnctor == null) {
          synchronized (ConnectionManager.class){
              if (uniqConnctor == null) {
                  uniqConnctor = new ConnectionManager();
              }
          }
      }
      return uniqConnctor;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch Out&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;构造函数是private,防止了外部对象创建类instance,同时保证不能够通过继承来创建。&lt;/li&gt;
&lt;li&gt;全局唯一的access point便是通过getInstance的&lt;strong&gt;&lt;em&gt;static&lt;/em&gt;&lt;/strong&gt;方法来实现。因为方法本身是静态的，所以该方法中的uniqConnctor也需要声明为&lt;strong&gt;&lt;em&gt;static&lt;/em&gt;&lt;/strong&gt;的变量。&lt;/li&gt;
&lt;li&gt;为了处理多线程的情况，getInstance通常需要加上synchronize的线程锁。但考虑到应用实际，性能需求的情况，可以有以下不同的实现：

&lt;ol type=&quot;a&quot;&gt;
&lt;li&gt;直接 synchronize 整个getInstance函数，这样最简单，但对于uniqConnector是否为空，都要synchronize,性能严重下降。&lt;/li&gt;
&lt;li&gt;直接在uniqConnector声明时进行初始化，就省略了getInstance中非空的检测。&lt;/li&gt;
&lt;li&gt;就是上面代码所示的double checking lock。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Common ShortKey And Command on MacOSX</title>
   <link href="http://tom.preston-werner.com/2014/11/11/Common-ShortKey-And-Command-On-MacOSX.html"/>
   <updated>2014-11-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/11/11/Common-ShortKey-And-Command-On-MacOSX</id>
   <content type="html">&lt;p&gt;Only during the 3 hours experience on MacBook Pro, I find that I could not love it more. Yes, maybe you can say, it&#39;s price seems make people daunting. However, if you really give yourself a try, you&#39;ll find that, the biggest regret ever is why I haven&#39;t migrate to Mac earlier. It will really save my so much time and energy.&lt;/p&gt;

&lt;h4&gt;Windows or Linux&lt;/h4&gt;

&lt;p&gt;Perfect position between the simplify and foolish. :). Personally, I think that Windows exactly make people feels himself a foolish and will have no improvment in skills or communications things. And linux is so great, however the biggest problem is that it&#39;s not mature in present. I have try my 7 year college life in all kinds of *nix distribution, such as Ubuntu, OpenSUSE, RedHat, Gentoo, FreeBSD, Solaris and etc. And in the end, I really feels that the processes this years are all combined with so much duplications and complcated process, It will kill so much time, and if you are not devote yourself in this great career, It will gain so little, as long as you&#39;re lack of keeping this work. &lt;br/&gt;
Current, I really find the perfect combination of Windows and *nix. And on the day of Nov 11, 2014. China&#39;s biggest e-comments glories of the year.&lt;/p&gt;

&lt;h4&gt;Common Useful ShortKey,Command&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;os x short key operation:&lt;/strong&gt;    &lt;br/&gt;
1. delete a work : Option + delete. &lt;br/&gt;
2. copy: Command + c  &lt;br/&gt;
3. paste: Command + v  &lt;br/&gt;
4. delete a whole line:  Command + delete &lt;br/&gt;
5. quickly enter a URL: Command + L   &lt;br/&gt;
6. switch between the safari tabs: Ctrl + Tab&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic Tools Installment&lt;/strong&gt;&lt;br/&gt;
Basic tools install:  &lt;br/&gt;
&lt;strong&gt;brew :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby -e &quot;$(curl -fsSl https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;oh-my-zsh:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So long, and really thanks for all the fish!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Add Comment to Jekyll Blog with Disqus</title>
   <link href="http://tom.preston-werner.com/translation/2014/08/09/add-comment-to-jekyll-blog-with-disqus.html"/>
   <updated>2014-08-09T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/translation/2014/08/09/add-comment-to-jekyll-blog-with-disqus</id>
   <content type="html">&lt;h1&gt;Add Comment to Jekyll Blog with Disqus&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;09 Aug 2014 - Beijing&lt;/p&gt;


&lt;h4&gt;Blogging with personal domain, Github hosted, Jekyll themes&lt;/h4&gt;

&lt;p&gt;If you are tired of common blogging with Wordpress, Pager like, and want to try some cool things of DIY, Just take a look at these combination:
Buy a personal domain on &lt;a href=&quot;http://godaddy.com&quot;&gt;Godaddy&lt;/a&gt;, hosted on &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt;, and setting you blog template with the help of
&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;. It&#39;s not a fresh thing when I write this article. So what I am aimed is to introduce a common way to add comments
to your jekyll theme. &lt;a href=&quot;https://disqus.com&quot;&gt;Disqus&lt;/a&gt; Here.&lt;/p&gt;

&lt;h4&gt;Comments with Disqus&lt;/h4&gt;

&lt;p&gt; It&#39;s actually a lot simpler than you might think. The main process just contains following steps: &lt;br/&gt;
 1. Register an account on &lt;a href=&quot;https://disqus.com/admin/create/&quot;&gt;Disqus&lt;/a&gt;. After register of disqus account,
 you could go next step to register your website, such as your personal domain blog website. The whole register process is very self explanation,
 so I will take no more explanation here.  &lt;br/&gt;
 2. Generate code for your jekyll powered blog. The last and crucial step is to select the type of install instruction. You will see a lot of common
 blogger platforms. What we choose here is &lt;strong&gt;Universal Code&lt;/strong&gt; here. And once you selected, Disqus will automatically generate a bit of code that look
 like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;disqus_thread&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// required: replace example with your forum shortname&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;accountname&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  
        &lt;span class=&quot;cm&quot;&gt;/* * * DON&amp;#39;T EDIT BELOW THIS LINE * * */&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.disqus.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
                &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dsq-brlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;blog comments powered by
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;logo-disqus&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disqus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; Now what you need to do is just putting them into the proper layout html template, post layout for example.   &lt;br/&gt;
 4.  Noted that, most situation we need to test our Jekyll in local. In order for Disqus to work on your local, you need to tell it that you are working in
 development mode. If you don&#39;t do this, then you will get an message stating it can&#39;t reach the server. All you need to do is add a new variable with a value
 of &lt;em&gt;1&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// required: replace example with your forum shortname&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;shortname&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_developer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This turns developer mode on&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// Make sure you remove this before you push this&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// to your live site.&lt;/span&gt;
  
      &lt;span class=&quot;cm&quot;&gt;/* * * DON&amp;#39;T EDIT BELOW THIS LINE * * */&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
       &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
       &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_shortname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.disqus.com/embed.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
           &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dsq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com/?ref_noscript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://disqus.com&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dsq-brlink&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;blog comments powered by 
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;logo-disqus&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disqus&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you have these set up, everything worked perfectly.&lt;/p&gt;

&lt;h4&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://http://schmidt-happens.com/articles/2011/09/26/adding-disqus-comments.html&quot;&gt;Adding Disqus Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Builder Design Pattern</title>
   <link href="http://tom.preston-werner.com/2014/07/31/Builder-Design-Pattern.html"/>
   <updated>2014-07-31T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/31/Builder-Design-Pattern</id>
   <content type="html">&lt;h1&gt;Builder Design Pattern&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;31 July 2014 - Beijing&lt;/p&gt;


&lt;h4&gt;At First Sight of Builder Pattern&lt;/h4&gt;

&lt;p&gt;The first time I encountered the Builder Pattern would date back to the beautiful internship time in Red Hat. What inspired me a lot is its strange setter way.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Joseph&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;programming&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;talent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function will return object itself, in setter methods. Also these setter methods can avoid too many parameters in a function invocation process, such as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PeopleBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PeopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * Common definition for the doWork() function:&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Can not employee cirtical labour!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalAgeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age litter than 18&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;doTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Name:[%s], Talent:[%s]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;workName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;talent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * define function with PeopleBuilder object as the only parameters.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Heng&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;programming&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Can not employee cirtical labour!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalAgeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age litter than 18&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;doTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Name:[$s], Talent:[%s]&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;peopleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTalent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;At the first glance&lt;/strong&gt; of the above &lt;strong&gt;&lt;em&gt;Builder Pattern&lt;/em&gt;&lt;/strong&gt; usage, it resoved the too many parameters problem. However, when &lt;code&gt;doWork()&lt;/code&gt; function invoke the &lt;code&gt;PeopleBuilder&lt;/code&gt; class, it looks really strange and weild. Now the PeopleBuilder looks more like a POJO but a Builder. The &lt;code&gt;get&lt;/code&gt; methods in Builder really strange. So the most important thing to do is to just figure out what the adventages and disadvantages do the builder pattern suit:   &lt;br/&gt;
1. &lt;em&gt;if you find that there are too many parameters in a function invocation, you could take a consideration: could it be encapsulated into a Java Bean Object. and with necessary &lt;/em&gt;&lt;strong&gt;get&lt;/strong&gt;&lt;em&gt;, &lt;/em&gt;&lt;strong&gt;set&lt;/strong&gt;&lt;em&gt; methods&lt;/em&gt;. &lt;br/&gt;
2. &lt;em&gt;Still, you find that the encapsulated class could not satify with your requirement. some construct parameters are necessary for you and some a optional. But all they could only be assigned value at first construct stage of the object. The object become read only, and be immutable.&lt;/em&gt;&lt;br/&gt;
3. &lt;em&gt;Then, Builder Pattern is becoming your first choice.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;An Example of Classical Builder Pattern.&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;mail sender builder&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailSender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * required parameters for send a email.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * optional parameters.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * private construct function with EmailSenderBuilder.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmailSenderBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     * noted the static class accessor.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailSenderBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;cm&quot;&gt;/* non-final statement compared to EmailSender */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* non-final statement compred to EmailSender */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailSenderBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          * fluent interface idiom .&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;48&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;49&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;50&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;51&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;52&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;53&lt;/span&gt;           &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          * It&amp;#39;s definitely cool! Also you can implement the logic &lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;55&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          * condition in build according to your requirement.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;56&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;          */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;57&lt;/span&gt;           &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmailSender&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;58&lt;/span&gt;               &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailSender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;59&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;60&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;61&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So long and thanks for all the fish!&lt;/p&gt;

&lt;h4&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.javacodegeeks.com/2013/01/the-builder-pattern-in-practice.html&quot;&gt;The builder pattern in practice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Builder_pattern&quot;&gt;Builder Pattern&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Facade Design Pattern</title>
   <link href="http://tom.preston-werner.com/2014/07/15/Facade-Design-Pattern.html"/>
   <updated>2014-07-15T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/15/Facade-Design-Pattern</id>
   <content type="html">&lt;h1&gt;Facade Design Pattern&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;15 July 2014 - Beijing&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Facade pattern&lt;/strong&gt; provides a simplified interface to a set of interfaces within a system and thus it hides the complexities of the subsystem from the client. It creates a layer to abstract and unify the related interfaces in the application and define an entry point to each subsystem level and thus make them communicate only through their faces. &lt;br/&gt;
To simplify the interaction process, we introduce the facade layer. Facade expose a simplified interface(in this case a single interface to perform that multi-step process) and internally it interacts with those components and gets job done for you &lt;strong&gt;one way&lt;/strong&gt;.  Common representation are dipicted as followings:&lt;br/&gt;
&lt;img src=&quot;/images/facade_pattern_example.jpg&quot; alt=&quot;facade_pattern&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;Common Mistakes&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Layered architecture is good but assess the need for every layer. Just naming a class as ABCDFacade.java doesn&#39;t really make it a facade.&lt;/li&gt;
&lt;li&gt;facade is focus on process flow, but the bussniess logic. Controller is not a facade.&lt;/li&gt;
&lt;li&gt;facade helps to reduce the complexity of subsystem clients interacts to. But if there is only one or two lines of code, just avoids the facade pattern. Clients can invoke it directly.&lt;/li&gt;
&lt;li&gt;Subsystems are not aware of facade and there should be no reference for facade in subsystem. it&#39;s a one way communication between the facade and subsystem. Anonther common pattern, &lt;strong&gt;Mediator&lt;/strong&gt; pattern adapt two way communication.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Summary of Facade Pattern&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Facade provides a single interface.&lt;/li&gt;
&lt;li&gt;Programmers comfort is a main purpose of facade.&lt;/li&gt;
&lt;li&gt;Facade is used for promoting subsystem independence and portability.&lt;/li&gt;
&lt;li&gt;Translating data to suit the interface of a subsystem is done by the facade.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;   &lt;br/&gt;
+ &lt;a href=&quot;http://www.javacodegeeks.com/2012/11/facade-design-pattern-design-standpoint.html&quot;&gt;JavaCodeGeeks&lt;/a&gt; &lt;br/&gt;
+ &lt;a href=&quot;http://javapapers.com/design-patterns/facade-design-pattern/&quot;&gt;Javapaper&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Controller-View-Model</title>
   <link href="http://tom.preston-werner.com/2014/07/06/Controller-View-Model.html"/>
   <updated>2014-07-06T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/06/Controller-View-Model</id>
   <content type="html">&lt;h1&gt;Controller-View-Model&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;06 July 2014 - Beijing &lt;/p&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Models represent knowledge. A view is a (visual) representation of its model. It is thus acting as a presentation filter. A view is attached to its model or model part and get the data necessary for the presentation from the model by asking quetions. It may also update the model by sending appropriate messages. A controller is the link between a user and system. It provides the user with input by arranging for relavant views to present themselves in appropriate places on the screen. The controller receives such user output, translate it into the appropriate messages and pass these messages on to one or more of the views.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Model  &lt;/dt&gt;
&lt;dd&gt;Data only. Get methods, set methods, etc. It is isolated. It knows nothing about View, or the controlls.&lt;/dd&gt;
&lt;dt&gt;View  &lt;/dt&gt;
&lt;dd&gt;UI only. Only show what you tell it to, and never  performs any transformation or validation logic. It always forwards input via an event/callback system. It is isolated, knows nothing about the Model nor the Controller.&lt;/dd&gt;
&lt;dt&gt;Controller  &lt;/dt&gt;
&lt;dd&gt;Sits between Model and View. Does any data transformation(bussiness logic) that is necessary to get the data from the Model to the View. Does most data validation on input. It knows about both the View and Model.&lt;/dd&gt;
&lt;/dl&gt;
</content>
 </entry>
 
 <entry>
   <title>EasyMock for Unit Test</title>
   <link href="http://tom.preston-werner.com/2014/07/03/EasyMock-for-unit-test.html"/>
   <updated>2014-07-03T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/07/03/EasyMock-for-unit-test</id>
   <content type="html">&lt;h1&gt;EasyMock for Unit Test&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;03 July 2014 - Beijing&lt;/p&gt;


&lt;p&gt;I noticed lot of projects code with &lt;strong&gt;unit test&lt;/strong&gt; as a necessary part. Unfortunately that, I didn&#39;t have the opportunity to do it myself. Upon coming out from the campus, it naturally become a necessary part of the carel talent of a SDE.&lt;br/&gt;
Common and basic test procedure framework will be &lt;a href=&quot;http://junit.org&quot;&gt;Junit&lt;/a&gt;, which lay the fundation of test. Such as &lt;code&gt;@Before,@Test,@After&lt;/code&gt; workflow, &lt;code&gt;Assertions, Test Runners, Ignoring, Rule&lt;/code&gt;. However, when encounter complex and sophisticated system, the dependency of functions may become perplexing. It&#39;s impossible to construct all this objects as the input of a to-be tested function. &lt;strong&gt;Mock&lt;/strong&gt; conception arise naturally. Well in plain word, could we just mock these dependency objects, give their input parameters and expected behavior or return value. And it just exactly benefit what our test case needed. There are lots of good mock framework, such as &lt;a href=&quot;http://jmock.org&quot; title=&quot;JMock Official&quot;&gt;JMock&lt;/a&gt;, &lt;a href=&quot;http://easymock.org&quot; title=&quot;EasyMock official&quot;&gt;EasyMock&lt;/a&gt;. All roads to Roma. I spent about three days to learn the JMock for a particular unit test code. When I come from JMock to EasyMock, I found that most prior knowledge and experience can be come in handy. I take notes here as a reminder. &lt;br/&gt;
 1. From scratch, I just know a little about junit. If I want to write tests for a class, the meta element for test is functions. So I need to construct the context for a function test, such as the corresponding main class, the input parameters for a test, external dependency objects need to construct. also the purpose of test, do we need to &lt;code&gt;Assertions&lt;/code&gt;? and so on.&lt;br/&gt;
 2. with these in mind, we need to test the functionality of the methods. Is it a &lt;code&gt;AssertEqual()&lt;/code&gt;,&lt;code&gt;AssertTrue()&lt;/code&gt;,&lt;code&gt;Expected Exception&lt;/code&gt;? How could we guarantee the coverage?&lt;br/&gt;
 3. How to mock the external dependency object. This is definitely a long story. Simplify by three steps, expect what the behavior and result, replay the workflow, verify the result.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;  &lt;br/&gt;
1. &lt;a href=&quot;http://jmock.org&quot; title=&quot;JMock Official&quot;&gt;JMock Website&lt;/a&gt;&lt;br/&gt;
2. &lt;a href=&quot;http://easymock.org&quot; title=&quot;EasyMock official&quot;&gt;EasyMock Official&lt;/a&gt; &lt;br/&gt;
3. &lt;a href=&quot;http://michaelminella.com/testing/mock-controls-with-easymock.html&quot; title=&quot;EasyMock Control Tutorial&quot;&gt;EasyMock Control Tutorial&lt;/a&gt; &lt;br/&gt;
4. &lt;a href=&quot;http://tamasgyorfi.wordpress.com/2011/04/21/mocking-tutorial-part-1-jmock&quot; title=&quot;JMock Tutorial&quot;&gt;JMock Tutorial&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Farewell GitHub, Hello Immersive Computing</title>
   <link href="http://tom.preston-werner.com/2014/04/21/farewell-github-hello-immersive-computing.html"/>
   <updated>2014-04-21T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2014/04/21/farewell-github-hello-immersive-computing</id>
   <content type="html">&lt;h1&gt;Farewell GitHub, Hello Immersive Computing&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;21 Apr 2014 - New York City&lt;/p&gt;


&lt;p&gt;Today is my last day at GitHub. Recent events have given me a lot of time to
reflect on what&#39;s important to me, and I&#39;ve decided to switch gears and focus on
building something from scratch again. Since visiting the Oculus VR team at
their office three months ago, I&#39;ve come to believe that immersive computing
(aka virtual reality) is poised to rival the personal computer, the web, social
networking, and mobile devices in its impact. While the timing is more abrupt
than I had intended, with everything that&#39;s happened, I think now is the right
time to do this, and I&#39;d like to explain why.&lt;/p&gt;

&lt;p&gt;First, I want to address the serious accusations that were made against me and
my family over the past month. With every decision I made at GitHub and in every
interaction I had with employees, I tried to treat people better than they
expected and to resolve conflict with empathy. Despite that, I&#39;ve made mistakes,
and I am deeply sorry to anyone who was hurt by those mistakes. It devastates me
to know that I missed the mark, and I will strive to do better, every day.&lt;/p&gt;

&lt;p&gt;That said, I want to be very clear about one thing: neither my wife, Theresa,
nor I have ever engaged in gender-based harassment or discrimination. The
results of GitHub&#39;s independent investigation unequivocally confirm this and we
are prepared to fight any further false claims on this matter to the full extent
of the law. I believe in diversity and equality for all people in all
professions, especially the tech sector. It&#39;s immensely important to me and I
will continue to do my very best to further that belief.&lt;/p&gt;

&lt;p&gt;Unfortunately, the investigation and all the attention surrounding it have me
concerned that remaining at GitHub would be a distraction for both me and the
company. I&#39;m incredibly proud of what I&#39;ve helped build at GitHub and I don&#39;t
want the events of the past month to jeopardize that. I care too much about the
company and the people here to let that happen. The GitHub team is incredibly
strong, with fierce vision, and I have no doubt they will continue to
revolutionize software development for decades to come. Founding and building
GitHub has been the greatest adventure of my life. I&#39;ve been so lucky to be on
this journey with such amazing, helpful, talented, and real people. I&#39;m going to
miss working with such a great team, but I&#39;m also insanely excited about the
future.&lt;/p&gt;

&lt;p&gt;Since the early days of GitHub, I&#39;ve wanted to create a different kind of
business. One that was &lt;a href=&quot;http://tom.preston-werner.com/2010/10/18/optimize-for-happiness.html&quot;&gt;Optimized for
Happiness&lt;/a&gt;
and built atop a &lt;a href=&quot;https://www.youtube.com/watch?v=i0FzgvYxdvk&quot;&gt;Framework of
Happiness&lt;/a&gt;. One where great people
could work on hard problems together to create unbelievably good products. I
believe I was able to achieve a great deal of success with that model at GitHub,
even if things didn&#39;t always go perfectly according to plan. All of this has
been a tremendous learning experience for me.&lt;/p&gt;

&lt;p&gt;Last January I stepped down as CEO and handed that role over to cofounder Chris
Wanstrath so I could focus on future-facing R&amp;amp;D projects with small teams. This
kind of rapid, team-based innovation is what I live for. During my time away
from GitHub I started experimenting with Go, OpenGL, and Unity with an eye
towards the software side of immersive computing. It felt really good to get
back into a code editor and challenge the deeply logical and analytical part of
my brain. I&#39;ve enjoyed the challenges of learning how to lead a company with
hundreds of people, but it&#39;s very hard for me to deny the allure of coding a
system that could once again change the course of history.&lt;/p&gt;

&lt;p&gt;I&#39;m telling you this because I think stealth mode is bullshit and if you feel
the same way I do about immersive computing then I want to talk with you about
it. For the next few months I&#39;m going to be living in Manhattan. My wife,
Theresa, is currently participating in Techstars NYC as their very first
nonprofit. Her startup, &lt;a href=&quot;https://omakasecharity.org/&quot;&gt;The Omakase Charity&lt;/a&gt;,
helps donors learn about and support nonprofits that are changing the world with
technology. She&#39;s one of the strongest and most thoughtful women I know, and I&#39;m
hoping to help her succeed with her mission while I&#39;m here.&lt;/p&gt;

&lt;p&gt;Thank you to everyone that reached out to me over the last month, including the
generous team at Andreessen Horowitz. Your support has made a huge difference
and I&#39;m truly excited for what&#39;s next.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Study Notes Operating System Concepts</title>
   <link href="http://tom.preston-werner.com/notes/2013/10/27/Study-Notes-Operating-System-Concepts.html"/>
   <updated>2013-10-27T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/10/27/Study-Notes-Operating-System-Concepts</id>
   <content type="html">&lt;p&gt;刚好最近在准备找工作面试，无奈之前的基础知识已经遗忘殆尽，值得在重新复习一下，便做了关于操作系统方面的笔记，书采用的是&lt;a href=&quot;http://www.amazon.com/Operating-System-Concepts-9th-Edition-ebook/dp/B00APSZCEQ&quot;&gt;Operating System Concepts, 9th Edition&lt;/a&gt;，采用边看边做笔记的形式来记录下，以便以后遗忘时可以随时查验。全篇将近有1000页不可能全部看完，只得分批来看，今天主要看进程模块。&lt;/p&gt;

&lt;h3&gt;Process(进程)###&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;程序的组成主要包括一下几个部分&lt;/strong&gt;: &lt;br/&gt;
* &lt;strong&gt;text section&lt;/strong&gt;: it contains the program code, program counter and registers information.   &lt;br/&gt;
* &lt;strong&gt;stack section&lt;/strong&gt;: it contains the temporary data, such as function parameter, return address, local variables. &lt;br/&gt;
* &lt;strong&gt;data section&lt;/strong&gt;: contains the global variables. &lt;br/&gt;
* &lt;strong&gt;heap section&lt;/strong&gt;: for dynamically memory allocations during the process run.&lt;/p&gt;

&lt;p&gt;Also the following figure show the common program structure in memory.   &lt;img src=&quot;/assets/img/process_in_memory.png&quot; alt=&quot;process in memory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;进程状态和进程控制块(Process Control Block)&lt;/strong&gt;   &lt;br/&gt;
进程主要有如下几种状态，分别为：  &lt;br/&gt;
* &lt;strong&gt;New&lt;/strong&gt;: the process is being created.  &lt;br/&gt;
* &lt;strong&gt;Ready&lt;/strong&gt;: the process is waiting to be assigned to the processor. &lt;br/&gt;
* &lt;strong&gt;Running&lt;/strong&gt;: Instructions are being executed. &lt;br/&gt;
* &lt;strong&gt;Terminated&lt;/strong&gt;: the process has finished execution.  &lt;br/&gt;
* &lt;strong&gt;Wait&lt;/strong&gt;: The process is waiting for some event to occur (such as an I/O completion or reception of a signal). &lt;br/&gt;
And the following figure show the work flow of process state.   &lt;br/&gt;
&lt;img src=&quot;/assets/img/process_state.png&quot; alt=&quot;process_state&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;进程的创建&lt;/strong&gt;   &lt;br/&gt;
子进程创建继承父进程的资源信息，接下来可以利用&lt;code&gt;exec()&lt;/code&gt;函数来覆盖父进程的进程空间，执行自己的进程，也可以保持父进程的执行空间，使的父子进程同时执行。一个经典的创建多进程的实例如下：&lt;/p&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* fork a child process */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* error occurred */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Fork Failed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* child process */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Child Execute: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* parent process */&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* parent will wait for the child to complete */&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Parent Execute: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;p&gt;&lt;strong&gt;进程间通信&lt;/strong&gt; &lt;br/&gt;
主要有两种常见的进程间通信的方式，Shared Memory 和 Messaging Pass。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Const Keyword</title>
   <link href="http://tom.preston-werner.com/languages/2013/10/22/Const-Keyword.html"/>
   <updated>2013-10-22T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/10/22/Const-Keyword</id>
   <content type="html">&lt;p&gt;&lt;code&gt;const&lt;/code&gt; 关键词在C/CPP中也是一个类似于&lt;a href=&quot;http://lengerfulluse.com/research/2013/10/20/%E8%99%9A%E5%87%BD%E6%95%B0/&quot;&gt;static&lt;/a&gt;一样，经常出现，且作用往往不止一种，在面试中经常被问及的关键词。我们从其修饰的对象角度来分析。&lt;/p&gt;

&lt;h3&gt;修饰变量或者指针###&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;int d = 4;
const int a = 5;   /* the content of variable cannot be change */
int * const b = &amp;amp;d; /* the variable pointer itself cannot be change */
const int * const c = &amp;amp;d; /* the content and the pointer both cannot be changed */

int * const b = &amp;amp;a  /*Compiler Error: a is const variable, while b is not, cannot 
                     convert from const int to int */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此处有一点值得提及，当用&lt;code&gt;const&lt;/code&gt;修饰变量或指针时，赋值时只能从非const变量向const变量进行，而如果把const量赋值为非const量，则会发生编译错误。&lt;/p&gt;

&lt;h3&gt;修饰函数###&lt;/h3&gt;

&lt;p&gt;1. 当用const放在末尾修饰类成员函数时，其表明该函数不能够改变类成员的值，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;
class A {
    public:
        A(int a) {
            e = a;
        }
        int e;
        void const_fun(int a) const;
};

void A::const_fun(int a) const {
    cout&amp;lt;&amp;lt;&quot;I am const function, cannot change variable content&quot;&amp;lt;&amp;lt;endl;
    e = a;  /* Compiler Error: cannot change value of member variable */   
}

int main() {
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. 当用于修饰成员函数返回值时，则表示该函数范围值不能用于&lt;em&gt;左值&lt;/em&gt;，如下例所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const classA operator*(const classA&amp;amp; a1,const classA&amp;amp; a2);
(a * b) = c;  /* cannot assigned to the return value of * operator */
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Static Keyword</title>
   <link href="http://tom.preston-werner.com/languages/2013/10/21/Static-Keyword.html"/>
   <updated>2013-10-21T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/10/21/Static-Keyword</id>
   <content type="html">&lt;p&gt;几乎在所有的面试笔试题中都有&lt;strong&gt;static&lt;/strong&gt;变量的身影，其涉及到变量内存分配空间，变量生命周期等。最终我们可以从其&lt;strong&gt;作用域&lt;/strong&gt;的角度来对其进行较为详细的分析与介绍。&lt;/p&gt;

&lt;h3&gt;函数体内的static关键字###&lt;/h3&gt;

&lt;p&gt;静态成员变量的内存分配空间是和全局变量的分配空间一样的，都是在静态存储区。所以变量的生命周期一直保持到程序的结束。但由于该静态变量的作用域仍然是在函数体内，所以在函数体外调用该变量会引起编译错误。&lt;/p&gt;

&lt;h3&gt;在一个文件中的全局static关键字###&lt;/h3&gt;

&lt;p&gt;实现了一种类似类封装的效果，在该文件中成员可以访问该static变量或是函数，但是文件之外是不可以访问的。&lt;/p&gt;

&lt;h3&gt;在类中的static关键字###&lt;/h3&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;static 成员变量:在类的作用域中是全局可见的，且是唯一一份拷贝的。&lt;/li&gt;
&lt;li&gt;static 函数： 也是为类所有，而非类对象所有，且其只能访问static变量成员。
此处在类中的静态成员变量和成员函数的初始化也是非常值得注意的：非&lt;code&gt;const static&lt;/code&gt; 类型成员变量必须在类体外初始化。且在类外初始化时，不需要再加static关键词。而对于类中的成员函数而言，&lt;code&gt;static function&lt;/code&gt;可以在类体中初始化。   可以看下面一个简短的编译通过的例子：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;
class A {
    public:
        const static int a;
        const static int b = 4;
        static int c;
        static void print();

        static void print_() {
            cout&amp;lt;&amp;lt;&quot;I am non static&quot;&amp;lt;&amp;lt;endl;
        }
};

const int A::a = 3;
int A::c = 5;
void A::print() {
    cout&amp;lt;&amp;lt;&quot;I am static&quot; &amp;lt;&amp;lt;endl;
}

int main() {
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从作用域的角度来理解static变量，便能够更加准确的把握其多层意义，并在其中找出之间的联系。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Virtual Function</title>
   <link href="http://tom.preston-werner.com/languages/2013/10/20/Virtual-Function.html"/>
   <updated>2013-10-20T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/10/20/Virtual-Function</id>
   <content type="html">&lt;h3&gt;虚函数的作用&lt;/h3&gt;

&lt;p&gt;虚函数是为了实现多态性而实现的，更准确的说，是为了实现运行时多态，即dynamic binding的方法。如下例所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
using namespace std;

/* a simple example show the difference between the dynamic binding
 * and static binding. And common function override is a static 
 * binding which aims to implement a common function in different 
 * class. However, the virtual function is just aimed at interface-like 
 * function. It implement the dynamic binding.
 */
class shape {
public:
    shape() { };
    virtual void draw() {
        cout&amp;lt;&amp;lt;&quot;Draw shoap&quot;&amp;lt;&amp;lt;endl;
    }
};

class rectangle: public shape {
public:
    rectangle() {};
    void draw() {
        cout&amp;lt;&amp;lt;&quot;Draw rectangle&quot;&amp;lt;&amp;lt;endl;
    }
};

class round: public shape {
public:
    round() {};
    void draw() {
        cout&amp;lt;&amp;lt;&quot;Draw round&quot;&amp;lt;&amp;lt;endl;
    }
};

int main() {
    shape* s;
    s = new rectangle();
    s-&amp;gt;draw();

    s = new round();
    s-&amp;gt;draw();
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不用虚函数实现，派生类中对于&lt;em&gt;draw&lt;/em&gt;函数的overriding是在编译时根据所调用的类指针类决定，并不能实现根据运行时指向的实际对象来进行调用。而正是虚函数使得通过基类指针，便能实现动态绑定。因此，上例的运行结果为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Draw rectangle
Draw round
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;进化一： 纯虚函数&lt;/h3&gt;

&lt;p&gt;这种动态绑定的属性使得我们仅通过基类的指针便可以访问其派生类的某种方法，因此在设计对象继承模式时便很常见了。但是，我们发现对于这种依靠基类来进行动态绑定的方法中，某些基类的某种方法我们并不能实现，如下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* Declaration from:
 * http://www.learncpp.com/cpp-tutorial/126-pure-virtual-functions-abstract-base-classes-and-interface-classes/ 
 */

#include &amp;lt;string&amp;gt;
class Animal
{
protected:
    std::string m_strName;

    /* We&#39;re making this constructor protected because
     * we don&#39;t want people creating Animal objects directly,
     * but we still want derived classes to be able to use it.
     */
    Animal(std::string strName)
        : m_strName(strName)
    {
    }

public:
    std::string GetName() { return m_strName; }
    virtual const char* Speak() { return &quot;???&quot;; }
};

class Cat: public Animal
{
public:
    Cat(std::string strName)
        : Animal(strName)
    {
    }

    virtual const char* Speak() { return &quot;Meow&quot;; }
};

class Dog: public Animal
{
public:
    Dog(std::string strName)
        : Animal(strName)
    {
    }

    virtual const char* Speak() { return &quot;Woof&quot;; }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此处我们提及两点：&lt;/p&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;. 对于&lt;em&gt;Animal&lt;/em&gt;这种类型，我们无法对其的virtual方法Speak给出实现，当用户定义一个Animal对象时，如果调用其Speak方法，我们无法实现这样一个方法，或是只能空函数体，则得到的是空结果，或是非用户想要的结果，则在某种程度是一种很不好的设计模式。&lt;/li&gt;
&lt;li&gt;. 对于&lt;em&gt;Animal&lt;/em&gt;类，在某种抽象程度上，对象本身是不具有意义的，往往是一个抽象的个体罢了，从语言理解的层面，其往往是一个具有抽象概念的东西。因此，我们不应该允许其实例化。故上面的代码对于其构造函数使用了Protected控制符。   &lt;br/&gt;
上面的两种情况，都可以利用纯虚函数的概念来解决。其定义方法为：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;virtual const char* Speak() = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而存在纯虚函数的类成为了抽象类，不允许构造对象实例。如此便进一步解决了这种抽象类中，虚函数无法实现，且抽象类不具有实际定义对象必要的情况。&lt;/p&gt;

&lt;h3&gt;进化二： 接口类###&lt;/h3&gt;

&lt;p&gt;严格意义上来，C++中并没有一个&lt;strong&gt;Interface&lt;/strong&gt;关键词，来提供这样一种接口功能，但我们可以通过抽象类来定义。通常而言，接口类只提供一种操作原型的声明，把具体实现指派到派生类。从抽象的角度，接口通常不含有具体的数据成员。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Java Interview Question</title>
   <link href="http://tom.preston-werner.com/interview/2013/10/19/Java-Interview-Question.html"/>
   <updated>2013-10-19T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/interview/2013/10/19/Java-Interview-Question</id>
   <content type="html">&lt;h3&gt;Java 面试题小结 ###&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. Java String 类的基础知识&lt;/strong&gt; &lt;br/&gt;
Q1: String 类到底创建几个对象？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String str = &quot;Hello, World&quot;;
String str2 = &quot;Hello, World&quot;;
String str3 = new String(&quot;Hello,World&quot;);
String str4 = new String(&quot;Hello, World&quot;);    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A1: String 构造时，如果是常量赋值的话，首先会去常量&lt;strong&gt;Pool&lt;/strong&gt;中查找是否已经存在常量，如存在则直接把常量字符串的引用赋值便可，如果不存在则需要在常量池中创建新的常量引用在赋值给变量的引用;而如果是new操作的化，则是在堆中创建，且每次都会新创建一个常量池中的对象，然后在把这个对象用过new构造函数赋值给其在堆中的新对象。所以&lt;strong&gt;答案&lt;/strong&gt;为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1
1
2
2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Q2:  String 中的== 和 equals操作符含义？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; str == str2 ?
 str equals str2 ?
 str3 == str4 ?
 str3 equals str4 ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A2: 通常对于字符串内容的比较我们通过&lt;strong&gt;equals()&lt;/strong&gt;函数来进行，而==运算符则是比较两个字符串引用是否指向同一个对象。两者的区别用下面&lt;a href=&quot;http://stackoverflow.com/questions/767372/java-string-equals-versus&quot;&gt;stackoverflow&lt;/a&gt;上的回答：   &lt;br/&gt;
&lt;img src=&quot;/assets/img/java_equals.png&quot; alt=&quot;java equals method source code&quot; /&gt; 因此&lt;strong&gt;答案&lt;/strong&gt;为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;true
true
false
true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. Synchronized 类线程安全和效率的比较&lt;/strong&gt;  &lt;br/&gt;
Q1: ArrayList, Vector and LinkedList 三者之间的区别？   &lt;br/&gt;
A1: 可以从两方面来比较，首先对于ArrayList和Vector其底层都是通过Array的连续存储空间实现，可以按位快速存取，但是当出入值时需要顺序后移，因此效率较低，而LinkedList则是用过链表的方式因此其插入效率很高，但查找效率降低。 然后，如果单从线程安全的角度来看，Vector是实现synchronized，因此是线程安全，但是却会因此降低了其效率。引用&lt;a href=&quot;http://www.coderanch.com/t/409421/java/java/Difference-ArrayList-LinkedList-Vector&quot;&gt;JavaRanch&lt;/a&gt;上的一个回答：   &lt;br/&gt;
&lt;img src=&quot;/assets/img/java_synchronized.png&quot; alt=&quot;ArrayList, Vector LinkedList difference&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Q2: HashMap 和 HashTable的区别？   &lt;br/&gt;
A2: 可以从两方面来回答。首先是线程安全的角度;其次是是否允许空值的角度。而HashTable都可以看作是对HashMap的限制和提高。因此HashMap是非线程安全的，且是允许一个null键和多个null值的，而HashTable是线程安全的，且是不允许null值和键的。最后可以从扩展性上来看，如果想要默认插入顺序的，可以选择&lt;strong&gt;LinkedHashMap&lt;/strong&gt;，如果想要线程安全的可以使用&lt;strong&gt;ConcurrentHashMap&lt;/strong&gt;，更详细的解答，仍旧是看&lt;a href=&quot;http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable/40483#40483&quot;&gt;stackoverflow&lt;/a&gt;上的解答：   &lt;br/&gt;
&lt;img src=&quot;/assets/img/java_hashmap_hashtable_difference.png&quot; alt=&quot;difference between HashMap and HashTable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Overloading vs override in Java&lt;/strong&gt;  &lt;br/&gt;
Q1: Overloading 和 Override之间有什么区别？  &lt;br/&gt;
A1: Overloading称之为重载，通常是同一个功能的函数，为了实现不同的输入参数个数和类型等需要，在一个对象中定义的多个函数。而Override则通常是存在与父类和子类中的，同一个函数，其参数类型和个数都相等，在子类中对其重新实现，且覆盖了原先的方法。而Overriding通常有两种，一种是&lt;em&gt;vitual&lt;/em&gt;函数的overriding，另一种是非&lt;em&gt;virtual&lt;/em&gt;函数的overriding。前者是一种动态的绑定，而后者是一种静态的。 具体区别如下：   &lt;br/&gt;
&lt;img src=&quot;/assets/img/java_overloading_override.png&quot; alt=&quot;difference between overloading and override&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Retrospect With Cpp</title>
   <link href="http://tom.preston-werner.com/languages/2013/09/27/retrospect-with-cpp.html"/>
   <updated>2013-09-27T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/09/27/retrospect-with-cpp</id>
   <content type="html">&lt;h3&gt;Hello C plus plus&lt;/h3&gt;

&lt;p&gt;1  &lt;code&gt;const&lt;/code&gt; &lt;strong&gt;member function &lt;/strong&gt; when a member function is declared as const suffixed, it promises that it will not change current class member  &lt;br/&gt;
2  &lt;code&gt;vitural1&lt;/code&gt; &lt;strong&gt;member function&lt;/strong&gt; must be declare and definition inside of the class body    &lt;br/&gt;
3  Inherit class construct after the base construct And destruct process, inherit class will be release first, and base class last And when we construct class with simple declare like &lt;code&gt;Class name;&lt;/code&gt;, it means that we construct the class object in local function stack. However, if we use the &lt;code&gt;new&lt;/code&gt; operator, the destructor function will not execute automatically    &lt;br/&gt;
4  One of the core technique in c++ is its &lt;strong&gt;STL(Standard Template Library)&lt;/strong&gt; It defines most the whole basic data storage type across the whole c++ language And also&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning With Amazoner</title>
   <link href="http://tom.preston-werner.com/interview/2013/09/25/learning-with-amazoner.html"/>
   <updated>2013-09-25T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/interview/2013/09/25/learning-with-amazoner</id>
   <content type="html">&lt;h3&gt;1. A Simple Algorithm for Print All Combination of Balanced Parentheses###&lt;/h3&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include&amp;lt;cassert&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* we can define a static char array inside the print_bracket function */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;another method:&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;print_bracket_v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* this condition filter the illegal bracket */&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/* recover the modified flag */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print_bracket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;


&lt;h3&gt;2. Find the Element Pair in Array with Sum Equals to a integer ###&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Aterm On Desktop For Fluxbox</title>
   <link href="http://tom.preston-werner.com/work/2013/04/11/Aterm-on-Desktop-For-Fluxbox.html"/>
   <updated>2013-04-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/11/Aterm-on-Desktop-For-Fluxbox</id>
   <content type="html">&lt;p&gt;It&#39;s an amazing thing to conquer the aterm, and make it stick on desktop obediently.&lt;br/&gt;
The core of the entire process comes from how to make the aterm windows size on the desktop correctly. And I just find that It aways make me confused when I find the &lt;strong&gt;fluxbox&lt;/strong&gt; options about the size of the windows on desktop cannot work.  Ok, let&#39;s get the whole process from scratch.&lt;/p&gt;

&lt;h4&gt;Install the Aterm terminal and Edit the .Xdefaults file ####&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;equo install x11-term/aterm or emerge x11-term/aterm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and make your own .Xdefaults configuration files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;aterm*geometry:  80x60
aterm*color1: #ff23
and etc...
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Cofnigure Fluxbox app file to make the aterm sticky on desktop ####&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;[app](aterm)
[sticky]{yes}
[layer]{12}
[Hidden]{yes}
[Dimensions]{900 710}
[Position](TopLeft){5 5}
[Deco]{NONE}
[end]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Common options like above. all these seems so easy done well.&lt;br/&gt;
Ok, That&#39;s all, you reload your fluxbox, and run the &lt;strong&gt;aterm&lt;/strong&gt;, you will find the beatiful things on your desktoop. Yes, you are right.&lt;/p&gt;

&lt;p&gt;But, when you open the a large file which more than one page with &lt;strong&gt;vim&lt;/strong&gt; editor like, the unfortunately things happens, the border of your aterm windows seems appearence. why? and How?&lt;/p&gt;

&lt;h4&gt;Some small cares and tricky ####&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;if you set the [Dimensions] options in the app file, you&#39;d better comment your geometry setting in your &lt;em&gt;.Xdefaults&lt;/em&gt; file.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Gnome Icons Howto</title>
   <link href="http://tom.preston-werner.com/notes/2013/04/05/Gnome-Icons-Howto.html"/>
   <updated>2013-04-05T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/04/05/Gnome-Icons-Howto</id>
   <content type="html">&lt;p&gt;Change Gnome Start-here Icons Howto.&lt;/p&gt;

&lt;h1&gt;This is the basic configuration howto about change the gnome start here icons.  &lt;/h1&gt;

&lt;p&gt;Common two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;to directly replace the original start-here png with the alternative one you like to do. as following:&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;cd /usr/share/icons/gnome/24*24/places/
mv start-here.png start-here.png.bak
cp your-own-starticon.png start-here.png
git-update-icons-cache /usr/share/icons/gnome/&lt;/p&gt;

&lt;p&gt;And then, just restart your X window, and Thats all.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Another method is to configure the gnome configuration file to add your customize icon path. as following:&lt;br/&gt;
open the &lt;strong&gt;gconf-editor&lt;/strong&gt; tools and then select the apps -&gt; panel -&gt; objects -&gt; object_3, and just check the &lt;strong&gt;use_costom_icon&lt;/strong&gt;, then edit the key as your icon paths.  Thats all.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Installation Mahout</title>
   <link href="http://tom.preston-werner.com/work/2013/04/04/Installation-Mahout.html"/>
   <updated>2013-04-04T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/04/Installation-Mahout</id>
   <content type="html">
</content>
 </entry>
 
 <entry>
   <title>How To Share Project On Bitbucket</title>
   <link href="http://tom.preston-werner.com/work/2013/04/02/How-to-Share-Project-on-Bitbucket.html"/>
   <updated>2013-04-02T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/02/How-to-Share-Project-on-Bitbucket</id>
   <content type="html">&lt;p&gt;In the age of open source and could computer, it become very necessary for us to work together ou the cloud with an
share projects. &lt;a href=&quot;http://bitbucket.org&quot;&gt;&lt;strong&gt;Bitbucket&lt;/strong&gt;&lt;/a&gt; provides an possibility for our needs.  this article is aim to
give an simple introduction about how to share and collaborate on a project. &lt;br/&gt;
Generally speacking, it mainly contains the following configurationn steps(I&#39;ll assume that your os is
windows):&lt;/p&gt;

&lt;h4&gt;Some Basic Configuration Steps&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt;  Install &lt;a href=&quot;msysgit.github.com&quot;&gt;&lt;strong&gt;git for windows&lt;/strong&gt;&lt;/a&gt;. just as the common way of install software on Windows,
click
all the way.&lt;br/&gt;
&lt;strong&gt;2.&lt;/strong&gt;  After installing, you need to do a simple configure of git for your name and emails:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global user.name &quot;Your Name&quot;
git config --global user.email &quot;Name@example.com&quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;also you can configure for you favorite editor or diff tools(optional):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global core.editor &quot;vim&quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you can configure your git to display with color:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --global color.ui true  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; then, you need configure ssh key for pull and push on the bitbucket repository. here, I already configure it
for
you, and I will send to you by email, with usage attached. so just skip if you would care the configure details.
otherwise, a tutorial &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;here&lt;/a&gt;.&lt;br/&gt;
&lt;strong&gt;4.&lt;/strong&gt; now, it time to pull the repository down, just copy the following command, and execute it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@bitbucket.org:lengerfulluse/acl-multiling.git  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;after the pull completement, you will find the directory &lt;em&gt;acl-multiling&lt;/em&gt; in your current working directory. That&#39;s
the repository on the cloud.&lt;br/&gt;
&lt;em&gt;Notice: you run the &lt;code&gt;git clone&lt;/code&gt; command just for the first time you pull a repository. After that, every time you
work on the existed repository, the first step is to run the &lt;code&gt;git pull&lt;/code&gt; to ensure that your repository
 is the already up-to-date&lt;/em&gt;.    &lt;br/&gt;
&lt;strong&gt;5.&lt;/strong&gt; you can work on your local repository now, for example do some modify or add a file to the directory, after
that you can check  what &lt;em&gt;files&lt;/em&gt; you have modify or create:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; then you add the file and commit it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add &amp;lt;file you modified&amp;gt;  
git commit -m &quot;message you want to say about this commit&quot;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; you can continue to work on the local repository and do the loop as &lt;em&gt;step 5&lt;/em&gt; and &lt;em&gt;step 6&lt;/em&gt;. you can also now
push
your current commit to bitbucket repository.  Also before the &lt;code&gt;push&lt;/code&gt; step, you&#39;d better do the &lt;code&gt;pull&lt;/code&gt; operation again
to ensure the newest status of your local repository. so you should do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if there doen&#39;t exist some emerge conflict, then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&#39;s all, it simply contains normal workflow loop. It is strongly recommended to read the great arts &lt;a href=&quot;http://www.google.com/search?q=pro+git&quot;&gt;&lt;strong&gt;Pro
Git&lt;/strong&gt;&lt;/a&gt;.&lt;br/&gt;
Also we can do a simple demonstration together. Any prolem feel free to contact me any time.&lt;/p&gt;

&lt;h4&gt;Some Conflict Screenshot and Howto Emerge Conflict&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;git push failure&lt;/strong&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/img/git/push-conflict.png&quot; alt=&quot;push failure&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git pull to emerge&lt;/strong&gt;
&lt;img src=&quot;/assets/img/git/pull-emerge-conflict.png&quot; alt=&quot;pull emerge&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content in a conflict file&lt;/strong&gt;
&lt;img src=&quot;/assets/img/git/conflict-content.png&quot; alt=&quot;cotent&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Reference&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;[1]&lt;/strong&gt; &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys&quot;&gt;&lt;strong&gt;Generating SSH keys&lt;/strong&gt;&lt;/a&gt;   &lt;br/&gt;
&lt;strong&gt;[2]&lt;/strong&gt; &lt;a href=&quot;http://jekyllrb.com&quot;&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Talk About Login Script</title>
   <link href="http://tom.preston-werner.com/work/2013/04/01/Talk-About-Login-Script.html"/>
   <updated>2013-04-01T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/04/01/Talk-About-Login-Script</id>
   <content type="html">&lt;p&gt;It seems to be an unfinished wanted. From the begining of learning the computer language programmings, it is naturally to be taughted about
the story of great computer hackers. Among all of the cabaility owned by them , the most important one is to crawl on the complex and wideless
internet. So the automatic robot which wander freely on the internet become the greatest things for all the hacker. No matter how beautiful
and effective a hacker&#39;s code, It stills an sallow pain if they haven&#39;t implements a internet robot programming, namely crawls.  Maybe the
topics about crawl will continue in the next sections because of the recently two important projects. (yes, I just assumed that you have
known them ^_^, all right, exactly it just lie on my &lt;a href=&quot;http://github.com:lengerfulluse/byr-crawler.git&quot;&gt;GitHub:byr-crawler&lt;/a&gt;.).  Now, let
start our
talking from the most basic and important, How to write an simple login script.&lt;/p&gt;

&lt;h4&gt;HTTP related protocol You should know&lt;/h4&gt;

&lt;p&gt;To make my clarification more clear and systemic, maybe the current first thing is to know, what&#39;s login script? why needs login script? how
we write a login script?&lt;/p&gt;

&lt;h4&gt;Some Practical Clues You Should Gain From a Particular Gateway&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;the login and logout gateway. The core of login script is to send the http request. Therefore, the http address provide the object we send
to. and because there often exist some different between the login and logout address. So you should first identify the correct address.&lt;/li&gt;
&lt;li&gt;the particular send data required from the vertification server for the login and logout. to more accuracy, the format of the date is the
key to implement the login/logout. Unfortunately, I haven&#39;t konw the tricy to gain all this information, maybe the most efficient way is to
view the post information from the browsers in a login request.  commonly, the username and passwd is neccessary, and the password often needs
to do the &lt;em&gt;md5sum&lt;/em&gt; process. also the entire connection strings is litte OPAC.&lt;/li&gt;
&lt;li&gt;the text process from the return http response informations. And in the situation of shell script implement, it cannot used some
high-level data structure such as XML or JASON parser. the simple and effective method is text process, such as extraction, filtering, and so
on. to get the success\failure informations returned from the response.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Reference&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://bbs.byr.cn&quot;&gt;BYR LOGIN SCRIPT&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bash Note</title>
   <link href="http://tom.preston-werner.com/work/2013/03/30/Bash-Note.html"/>
   <updated>2013-03-30T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/30/Bash-Note</id>
   <content type="html">&lt;p&gt;Let&#39;s just start from the practical bash examples. The problem is this: I would do some ideal summary for a set of newswires about a particular topic. for example every topic contains about ten documents, which each is about an specified aspect, also connected with the times sequences. However, the time orders about the topic is only embeded in the content of the documents. When you concatenate all this sub-topic documents into a large topic sets to so the following ideal summary task about the particular topic, you would be confused by the un-order docment sets.&lt;br/&gt;
And that&#39;s just what the point we aim to solve.&lt;/p&gt;

&lt;h4&gt;Particular and Important Script&lt;/h4&gt;

&lt;p&gt;Although shell script are almost the same in essentials while differing in minor points. To ensure the accuracy of this article, I just decide to limit my note about the shell script on the bash shell. Therefore, the position of this post is aim to get some conclusion about the experience during the usage of the bash script.&lt;br/&gt;
It&#39;s definitely an amazing thing that when you feel that you are just write beautiful code skilfully. Especially that when you encounter a pariticular problem ,and you find that it can be resolved by the computer elegant and high-efficiency. That&#39;s the origin of the sense of achievement.  Now, let&#39;s cut the cackle to just begin our particular requirement and resolution.&lt;br/&gt;
First we need to divide our problems into some basic modules. they mainly contains three modules: method to extract the date in the documents; formatted the date from the extracted data string; sort and concatenate the date, generate the results.&lt;/p&gt;

&lt;h5&gt;Normalized the Text and Extract the date String&lt;/h5&gt;

&lt;p&gt;During the process of hummanic translation from english to chinese, we conduct our work by three groups of people. and due to the discrepency of encoding system of ther editor, the result files contained incongruous encoding such as UTF-8 encoding, UTF-8 BOM encoding, ascii encoding and so on, so the first things I need to do it normalize the while encodings of the translations files. Therefore, I just write a simple script to check the encoding of files, and find the unmatched encoding, and then to converted them automatically or manually.&lt;br/&gt;
Then, There comes the steps of extract the date string from the translated texts. the first things to do is to delete the blank lines in the texts. this tricky is also very important. it makes me re-relizes the function of sed to execute some other command, such as deletion, except for the common used substitued operations. And following the compress blank lines process, I adopt the grep -o option to extract the date information from the strings. also I learning about the array construction method through the bash substitution operations. It make me notices that some useful bash test conditions such as -z: stands for empty. -n: stands for empty string. also the iteration methods of array &lt;code&gt;for file in ${array[@]}&lt;/code&gt;, also some logic operations. ! and -o, -a. One of most important may the usage of functions. how to defintion a function in bash, and pass paramters to the function and return values from it. Morely, such as the local and global variables.&lt;br/&gt;
All in a word, I feel that this attemption just make me write code more easily. Also the standardlize of write code is the most important things I should develops.  Just write the code like compose a poem.  That&#39;s the philosophy of Perl languages.&lt;/p&gt;

&lt;h4&gt;Sort accroding to the date&lt;/h4&gt;

&lt;p&gt;The last things to do is just sort the extracted date which belongs to corresponding docs in a particular topics. Here, I also find that the most ultimately and effective methods to learning the usage of sort. And all these things cannot not be finish once. And since you have encounter before, you should find that only by the combination of sytemic learning of the tutorial with the practical problems resolution you can truely master the essentials. And that&#39;s the different of proficient and possibility.&lt;/p&gt;

&lt;h4&gt;Reference&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://tldp.org/LDP/abs/html/&quot;&gt;Advanced Bash-Scripting Guide&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Systemic Learning</title>
   <link href="http://tom.preston-werner.com/life/2013/03/28/Systemic-Learning.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/life/2013/03/28/Systemic-Learning</id>
   <content type="html">&lt;p&gt;The pain on the installation of FreeBSD system fonts during my college
life still exists. It is still impressive that I was totally confused by
the all series unttacked of the sytem fonts settings and the Chinese
localized. I become suddenly hopeless. &lt;br/&gt;
However, today, when I come back to re-learning the X window system
settings by the Xorg tutorial, It suddenly become clear extremly. I just
get the conclusion that systemic learning is thousand more important
than the trivel experience, if we only consider the time and efficiency.&lt;/p&gt;

&lt;h4&gt;the global logic clue in our brain ####&lt;/h4&gt;

&lt;p&gt;The comprehensive understanding about somethings come with a global
logic clue graphy in our brain. We get clear of the principal and the
imporant process or steps to achieve the finally results. In the case of
the complex or large system, we cannot grasp the whole, we need the
inductive process, and gradually combined all the trivals understands
to a whole entires.  In most time, We are accustomed to gain our
knowledege from the whole to the detail parts, which is called
deductive.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Localize Setting</title>
   <link href="http://tom.preston-werner.com/work/2013/03/28/Localize-setting.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/28/Localize-setting</id>
   <content type="html">&lt;p&gt;What&#39;s locale? basically, locale is all the information about your geography postion, such as which country you are? what language you use?
and of course contains date time format, moneny currency format and so much information. With the tendy of software internationalize, the
specific localize for specific local users become urgent and necessary. All above is what locale is responsible for.  Ok, let&#39;s get start.&lt;/p&gt;

&lt;h4&gt;Locale Type and Environment Variables&lt;/h4&gt;

&lt;p&gt;The introduction part generally describe some aspects about what particular a lcoale seems contains. and As we know, all these have their
standard definition, context and content details. For the locale, the ISO files have the regular and comprehensive definition. It may contain
the following aspects and in unix-like system, It&#39;s demonstrated as Locale Environment Variables. &lt;br/&gt;
- &lt;em&gt;LANG&lt;/em&gt; the default definition for all local settings at once. while allowing the further individual customization via LC_* settings
belows.&lt;br/&gt;
- &lt;em&gt;LC_CTYPE&lt;/em&gt; define the character handling properties for the system. &lt;em&gt;The determines which characters are seen as part of alphabet, numberic
and so on&lt;/em&gt;, This also determine teh character set used, if applicable.&lt;br/&gt;
- &lt;em&gt;LC_COLLATE&lt;/em&gt; define the alphabetical ordering of strings. This effects &lt;em&gt;eg.&lt;/em&gt; output of sorted directory listing.&lt;br/&gt;
- &lt;em&gt;LC_MESSAGE&lt;/em&gt; Programs&#39; localization for applications use message based localization.&lt;br/&gt;
- &lt;em&gt;LC_MONETARY&lt;/em&gt; define curry units and formatting of currency type, numberic values.
- &lt;em&gt;LC_NUMBERIC&lt;/em&gt; define formatting of numberic values which are not monetary.&lt;br/&gt;
- &lt;em&gt;LC_TIME&lt;/em&gt; define formatting of data and time.&lt;br/&gt;
- &lt;em&gt;LC_...&lt;/em&gt; main contains other setting.&lt;br/&gt;
- &lt;em&gt;LC_ALL&lt;/em&gt; A special value to overriding all the above settings.&lt;br/&gt;
The linux system self provide a lot of locale for almost all of the countries and regions. the specific locale directory is
&lt;code&gt;/usr/share/locale/&lt;/code&gt;, which provide the locale resource files. By default, all kinds of locale contained Here.&lt;/p&gt;

&lt;h4&gt;Setting locale&lt;/h4&gt;

&lt;p&gt;The first step of settings is to know what locale our system current use. Here we need the &lt;code&gt;locale&lt;/code&gt; command. which is used for get
locale-specific informations. &lt;br/&gt;
If we want to know what current locale our system support now, we should add the &lt;code&gt;-a&lt;/code&gt; options for the &lt;code&gt;locale&lt;/code&gt;
command. If you find that there doesn&#39;t exist the locale you wanted , you should generate the locale by yourself. which contain two steps:&lt;br/&gt;
1. edit the &lt;code&gt;/etc/locale.gen&lt;/code&gt; configure file to add the locale you want.&lt;br/&gt;
2. run the command &lt;code&gt;locale-gen&lt;/code&gt; to generate the locale.&lt;/p&gt;

&lt;p&gt;Now, since we have generate the locale we need, we need to setting the locale. Like common linux configure sytles, almost every configure
settings have the different apply range. namely the system-wide and personal user settings. and no exception for the locale. there are two
choice to setting the locale. if you want to settingt the system-wide, you can edit two setting files.&lt;br/&gt;
    /etc/env.d/02locale --&gt; LANG=&quot;en_US.UTF-8&quot; for instance.
    /etc/profile --&gt; export LANG=&quot;en_US.UTF-8&quot; for instance.
and for user specified range.&lt;br/&gt;
    $HOME/.bash_profile --&gt; LANG=&quot;en_US.UTF-8&quot; for instance.&lt;/p&gt;

&lt;p&gt;Of course the above just simple give a simple example, you can give a specified setting for LC_* Variables for yourself.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fcitx And Fonts Setting</title>
   <link href="http://tom.preston-werner.com/notes/2013/03/28/Fcitx-and-Fonts-setting.html"/>
   <updated>2013-03-28T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/03/28/Fcitx-and-Fonts-setting</id>
   <content type="html">&lt;p&gt;The purpose of this note is to analyze the steps for setting chinese
input method &lt;a href=&quot;http://www.fcitx-im.org&quot;&gt;&lt;strong&gt;Fcitx&lt;/strong&gt;&lt;/a&gt; in an English system
environment.&lt;/p&gt;

&lt;h4&gt;English Environment for Fcitx&lt;/h4&gt;

&lt;p&gt;If you just Google the articles about installing the fcitx, almost most
of them we noted that, you must setting the LC_CTYPE to zh_CN.UTF-8
locale as the prerequisite. Unfortunately, it is wrong, or partly wrong.
Allthough fcitx cannot run on POSIX and C locale, But, it can run on the
en_US.UTF-8 locale settings. And it can provide you the same english
enrionment.&lt;/p&gt;

&lt;h4&gt;Fcitx Environment Varibles&lt;/h4&gt;

&lt;p&gt;There are mainly three important environment variables, they are:&lt;br/&gt;
- XMODIFIERS it connects only to the im module. and common setting as
this &lt;code&gt;XMODIFIERS=&quot;@im=fcitx&quot;&lt;/code&gt;&lt;br/&gt;
- GTK_IM_MODULE setting the im select for gtk programs. notice that
only your fcitx compile USE flag contains gtk, gtk3, you should set it:
&lt;code&gt;GTK_IM_MODULE=fcitx&lt;/code&gt;, otherwise for common gtk2 programs,
&lt;code&gt;GTK_IM_MODULE=xim&lt;/code&gt;.&lt;br/&gt;
- QT_IM_MODULE setting the im select for qt programms. the same from
the above, you should set &lt;code&gt;QT_IM_MODULE=fcitx&lt;/code&gt; only you USE the qt4
flag. and common situation is &lt;code&gt;QT_IM_MODULE=xim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yes, All about this, for startx command, you should putting the above
environment variables in .xinitrc. if you use Slim, you could put it in
the xsessions files.  Provided that You locale is not POSIX or C, it
will works.&lt;/p&gt;

&lt;h4&gt;Install fonts on Sabayon(Gentoo) manual&lt;/h4&gt;

&lt;p&gt;First you should copy the fonts into a system fonts directory or
user self-definition directory.  And if you use the self-definition
directory, you should add the FontPaths directory in the xorg.conf
directory.&lt;br/&gt;
Second, you need to enter the font directory, and construct the
fonts.scale and fonts.dir files for indexing of fonts. with the
following commands.
&lt;code&gt;mkfontscale&lt;/code&gt;
&lt;code&gt;mkfontdir&lt;/code&gt;&lt;br/&gt;
Finally, we need to reconstruct the fonts cached with command&lt;br/&gt;
&lt;code&gt;fc-cached -fv&lt;/code&gt;&lt;br/&gt;
After you reboot the X system, you could use the command &lt;code&gt;fc-list | grep
-i font-name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And that&#39;s all.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Fluxbox Installation</title>
   <link href="http://tom.preston-werner.com/work/2013/03/26/fluxbox-installation.html"/>
   <updated>2013-03-26T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/26/fluxbox-installation</id>
   <content type="html">&lt;p&gt;I have mentioned a little about the configuration process related to the lightweight &lt;em&gt;Desktop Environment&lt;/em&gt; or some kind of full-functional &lt;em&gt;Window Managerment&lt;/em&gt;. It&#39;s extremely a bit lucky that I could have encountered the
&lt;strong&gt;Fluxbox&lt;/strong&gt;. It&#39;s almost the same situation as my dating with Sabayon Linux. One day, I suddenly miss the lovely gentoo linux, so I open my
google plus homepage, and search gentoo&#39;s current release news. It&#39;s definately amazing that the second result of the gentoo query term is
about a lovely logo, which like some animal&#39;s foot surrounded by a circle. After search it in wikipedia, I found that it&#39;s
the honey sweet foot of gentoo penguin. As for the Fluxbox, you couldn&#39;t imagine that it&#39;s almost the same situation. Let&#39;s start our
narrative with the completion of Sabayon linux. I first choice the default Gnome Desktop envrionment, and everythins seems just work properly.
However, when I tried to change the backgroud of the desktop theme, I found I cannot open the setting panel with the right click and selection
of change desktop background item. After that some other symptoms continues one by one. For instance, There doesn&#39;t exist &lt;em&gt;System&lt;/em&gt; menu in the
Gnome default taskbar panel. and I cannot use the function of user system settings in my account applet.   So I decide to remove gnome and
start something new, such as KDE or xfce4 &lt;em&gt;etc&lt;/em&gt;. But at the same time, I found that it&#39;s not an easy thing to remove the gnome environment and
install some new desktop environment due to some fuzzy and frustrating depencdency considerations. So I log out the Gnome and back to the GDM
login manager to see whether there are some other Sessions for selection. Bla bla bla, Fluxbox has just been waiting for me. Great, It&#39;s You.&lt;/p&gt;

&lt;h4&gt;Configure Fluxbox&lt;/h4&gt;

&lt;p&gt;The main confiugre file is under the user&#39;s Home directory, which is adopted a common configure style .fluxbox/. and it contains all aspect of
the fluxbox, from the start application with fluxbox, to the menu item selection, windowmenu, keyboard shortcuts and background of the
desktop.  I&#39;ll list below and give a detailed explanations.&lt;br/&gt;
    .
    | --&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Xorg Configuration</title>
   <link href="http://tom.preston-werner.com/work/2013/03/26/Xorg-Configuration.html"/>
   <updated>2013-03-26T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/26/Xorg-Configuration</id>
   <content type="html">&lt;p&gt;In this article, we focus on some basic and foundational introduction about the X11 related topics in our linux experience.&lt;/p&gt;

&lt;h4&gt;Xorg Server&lt;/h4&gt;

&lt;p&gt;There are mainly two sub-sections in the Xorg Server section. firstly, I will conduct some introduction and explanation about the history and roles Xorg take in our hole GUI system. secondly, I&#39;ll give a practical example to show the process of problem trackback and solved.&lt;/p&gt;

&lt;h4&gt;Login Manager or Display Manager&lt;/h4&gt;

&lt;p&gt;To some kinds, when you setup the xorg server and install the Window manager or Desktop Environment you could start the X11 system with just a command &lt;code&gt;start x&lt;/code&gt;. But if you want the show the GUI graphic system all the way, and you won&#39;t want to start the x system in console, you need the help of &lt;strong&gt;Login manger&lt;/strong&gt;, the default login manager for the Gnome is gdm. and correspondly, for Fluxbox, the slim is an ideal choice. Just with these simple line, you could use it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;equo install x11-misc/slim
vim /etc/conf.d/xdm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the make the change of the following:, which is the core of choice.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
DISPLAYMANAGER=&quot;slim&quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;finally, you should add the xdm to default run-levels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rc-update add xdm default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After finish the basic configure for the slim, and set the
/etc/conf.d/xdm variable, we should be able to login our personal Xsession with the default themes in the /usr/share/slim/theme.
However, we should notice that the /etc/slim.conf configure script file will automatically read the /etc/X11/Sessions/ directory to
find the default multiply Session, so when you login in with the slim, you could select your particular session with a simple F1 key.&lt;br/&gt;
Otherwise, if you want to set the default session environment, the simplest way is just:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s /etc/X11/Sessions/fluxbox ~/.xsession
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And let&#39;s conclude the above process. Simplely, if we want to create a X window system with Xorg server, what exactly methods we need to do
contains only three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install the Xorg server related source and config for them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting the kernel support for the input and video driver
support. here we should notice that there exists some problems compatiable
problem related to the lagecy video drivers with the KMS(Kernel ModSet tenique), so we should first disable all of the driver for the video.
and then select the proper &quot;nouveau&quot; or &quot;nvidia&quot; drivers. and the &quot;endev&quot; input driver.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Istall the related driver as listed above and set the
corresponding support for the KMS technique.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  equo install ${qlist -CI x11-drivers}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Install the Xorg server, and further configure manually.
equo install xorg-server&lt;/li&gt;
&lt;li&gt; configure the /etc/X11/Xorg.conf.d/ directory files. for the
keyboard and Screen resulations.&lt;/li&gt;
&lt;li&gt; Verify the successful installation of the xorg with command
&lt;code&gt;startx&lt;/code&gt;, for abvious and essy test setting, you can first install
simple &lt;em&gt;xterm&lt;/em&gt; and &lt;em&gt;twm&lt;/em&gt; to test the xorg&#39;s installation and configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install a window manager or desktop environment. After you can
validate the success of xorg server, the next thing you should complete is to
arrange a slave for the xorg-server boss. And the xorg just assigns lots of dirty and hardship work to it&#39;s slave, namely window manager, or
more functional Desktop environment. Formally, window manager is a kind of programs which are reponsible for the arrangement, sechdule and
position of the GUI programms. Here I will just install the most famous lightweight, &lt;strong&gt;Fluxbox&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;  equo install fluxbox&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;and after its installation, you can just configure it&#39;s behaves accroding to the conf.d in \$HOME directory ~/.fluxbox. such as you can
setting the global keyboard shortcuts, the menu content, the wallpaper, the slit and of course the applet widget in the taskbar slit.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose your favirate Login manager. Yes, don&#39;t take it for grant,
allthough there will be no any problems if you type the command &lt;code&gt;startx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;and following by the command &lt;code&gt;startfluxbox&lt;/code&gt;. or more simplely to edit the .xinitrc file in your home directory to add the &#39;startfluxbox&#39;
command in this. however, leave no consideration for the issues of security from the terminal, if you just do your daily work in X window
envrioment, it becomes naturally that there is no necessary for the intermediate steps for execute all this command in console. That&#39;s where
the Login Manager benifits for.  the configure step has just been demonstrated above, we&#39;ll leave no more words here.&lt;/p&gt;

&lt;h4&gt;Xorg Troubleshotings&lt;/h4&gt;

&lt;p&gt;One of the most important reasons that Xorg server confuse people is that its huge and compliated contents and terminology conceptions, which
all are almost divert us away. also the whole installation process is automatically done, so once there encounters some problems, It&#39;s just
terrible, and in most situation, people would select install the whole system. ^_^. I am at least. I always wonder that when I could resolve
this problem myself, here today, I came over a startx failure, and after some dianostic, I finish it eventually.  Here I note some basic and
important steps:&lt;br/&gt;
- You&#39;re aim to solve the problems: the first and the only step is to analyze current problem. What&#39;s the symptoms of the problems, is
there some log or error output? how many possible reasons for this/these symptoms? what&#39;s the most possible one?
- Be careful and most selective for the search keywords when Google, also you should first finish some basic background knowledge learnint to
have a better understanding of the problem.
- Do necessary backup work. when you attempt to some possible solutions for the problems, you&#39;re experiment on the system, back up the
original version files or programs, before you do every dangerous things!!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sabayon Linux Fresh</title>
   <link href="http://tom.preston-werner.com/work/2013/03/25/Sabayon-Linux-Fresh.html"/>
   <updated>2013-03-25T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/25/Sabayon-Linux-Fresh</id>
   <content type="html">&lt;p&gt;When &lt;a href=&quot;http://www.gentoo.org&quot;&gt;&lt;strong&gt;Gentoo&lt;/strong&gt;&lt;/a&gt; beckons to you, follows him. Though his ways are hard and steep. &lt;br/&gt;
Thanks for the instruction from &lt;strong&gt;Ryan Li&lt;/strong&gt; at &lt;em&gt;RedHat&lt;/em&gt; Co.td during my internship, I stepped on a nice
journal companied by &lt;strong&gt;Gentoo&lt;/strong&gt; linux distribution. &lt;code&gt;If it moves, Just compiles it&lt;/code&gt;. All the way, I finally understand the reason
why lots of guys are so addicted by the linux, by gentoo linux respecially. Althought the journal is full of uncetain hardships, The exciting
of achievement is beyond all these things. When you came over all the way, I can have fruitness harvest which are not only the knowledge or
some cool skills you got, But another most important things in your life,  the courage to conquer every things, the belief to complete tasks
efficiently and perfectly. If we compare life to be a war, It is the wapean that determines the success or failure. Similarly, proper tools
for our daily work is extremly improtant, I used to be curious about every linux distribution, for instance, &lt;strong&gt;Ubuntu&lt;/strong&gt;, &lt;strong&gt;OpenSuse&lt;/strong&gt;,
&lt;strong&gt;FreeBSD&lt;/strong&gt;, &lt;strong&gt;Backtrack&lt;/strong&gt;, &lt;strong&gt;ArchLinux&lt;/strong&gt;, all for the desktop environment too, &lt;strong&gt;Gnome&lt;/strong&gt;, &lt;strong&gt;KDE&lt;/strong&gt;, &lt;strong&gt;Xfce&lt;/strong&gt;, &lt;strong&gt;Awesome&lt;/strong&gt; etc. not to say a
lot of application tools, shell and so much others. However, it&#39;s just to be dispointed that I just cannot stop my step to get further on some
particular useful tools. Exactly, I was always too shallow. &lt;br/&gt;
One of my shortcomings is that I cannot pay attention on the same things for a long time. Bla bla bla, yea, you are right, it&#39;s just like a
child, right? To be honesly, this habits frustrates me all the time. In the other hand, it&#39;s the necessary quality for the exploiters. It&#39;s
because of this, that I have the opportunity to explore a lot of amazing zones of the linux world.&lt;br/&gt;
Yes, it is the first time I encounter the sabayon linux distribution. yesterday, I miss the &lt;strong&gt;Gentoo&lt;/strong&gt; so much, so I logged into my Google
plus account, and enter the search bar to find some interest news about the gentoo, It&#39;s amzing that the second result of my query is sabayon,
I was very curous about what a kind of distribution it is How can it display here?&lt;/p&gt;

&lt;h4&gt;What distinguish a different distribution for me&lt;/h4&gt;

&lt;p&gt;I admit that what a linux actually attracts me is just about two aspects:
- &lt;em&gt;theme&amp;amp;appearence&lt;/em&gt; You may think that this is a so shallow point, yes, it does. I come contacted with linux since when I was a freshman in
&lt;a href=&quot;www.njupt.edu.cn&quot;&gt;&lt;strong&gt;NUPT&lt;/strong&gt;&lt;/a&gt;. What attracted me a lot lies in that the compize&#39;s cool cubic destkop effects. However, I don&#39;t like it&#39;s theme
appearence, So in the next tries, I try other linux distribution mentioned above.
- &lt;em&gt;mirror source&amp;amp;package manager&lt;/em&gt; It means that how convient it bring to you. Imagine that when you want to install a software for your work,&lt;/p&gt;

&lt;h4&gt;Some basic configure for Sabayon installation&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Git configure and SSh protocol configure:

&lt;blockquote&gt;&lt;p&gt;  git config --global core.editor &quot;nano&quot;&lt;br/&gt;
  git config --global user.name &quot;Joseph Heng&quot;&lt;br/&gt;
  git config --global user.email &quot;lengerfulluse@gmail.com&quot;&lt;br/&gt;
  git completion bash. we add it in .bashrc with command &lt;code&gt;source ~/.git-completion.sh&lt;/code&gt;&lt;br/&gt;
  copy the private, public keys and known_hosts to the ~/.ssh directory.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the faster mirror for the package update and source download, first you should know where the repositories list lie in:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  /etc/entropy/repositories.conf&lt;br/&gt;
then to test the connection speed of these repositories, and then choose the faster.&lt;br/&gt;
  equo repo mirrorsort sabayonlinux.org   # for Daily reportory&lt;br/&gt;
  equo repo mirrorsort sabayon-weekly     # for Weekly reportory&lt;br/&gt;
  equo repo mirrorsort sabayon-limbo      # as limbo implied, the test reportory. Be careful to use!!!&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Equo Update and install:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;  equo update&lt;br/&gt;
  equo install entropy rigo&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;Keyboard Shortcut:

&lt;blockquote&gt;&lt;p&gt;  bind the &lt;em&gt;Alt+T&lt;/em&gt; to open a terminal&lt;br/&gt;
  bind the &lt;em&gt;Alt+J&lt;/em&gt; to switch the terminal to previous tab&lt;br/&gt;
  bind the &lt;em&gt;ALt+K&lt;/em&gt; to switch the termianl to next tab&lt;br/&gt;
  bind the &lt;em&gt;Meta+D&lt;/em&gt; to display the desktop.&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;Be familar some basic package manager tools:

&lt;blockquote&gt;&lt;p&gt;  equo [search install ...] &lt;br/&gt;
  rigo GUI entropy manager tools.&lt;br/&gt;
  eselect&lt;br/&gt;
  emerge&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Migrate from Gnome to Fluxbox&lt;/h4&gt;

&lt;p&gt;Occasionally, I find the install bugs during my sabayon installation, the results is that my &lt;strong&gt;Gnome&lt;/strong&gt; 3.6 version cannot function well. To be disspointed, the &lt;em&gt;System&lt;/em&gt; menu just gone. and some menu panel and desktop background missing too. Hey, hey, hey! A sound reminds me that I still have another default selectioon for desktop windows manager: &lt;strong&gt;Fluxbox&lt;/strong&gt;, It&#39;s Great!&lt;br/&gt;
The core configure directory directory is ~/.fluxbox, and that&#39;s all.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Web Application Framework</title>
   <link href="http://tom.preston-werner.com/work/2013/03/24/Web-Application-Framework.html"/>
   <updated>2013-03-24T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/24/Web-Application-Framework</id>
   <content type="html">&lt;p&gt;Last week, I was always busy with learning a new programming language &lt;a href=&quot;www.ruby-lang.org&quot;&gt;&lt;em&gt;Ruby&lt;/em&gt;&lt;/a&gt; and was attracted by it&#39;s so much cool features. And of course, it&#39;s philosophy of design. It&#39;s aim to write a language for programmers, but not the computers. It&#39;s many global symbol system, it&#39;s fancy different but meaningful indicators for funtions. It&#39;s functional features like lambda and proc class. It combines a lot of features like &lt;em&gt;python&lt;/em&gt;, &lt;em&gt;perl&lt;/em&gt;, &lt;em&gt;shell&lt;/em&gt;, &lt;em&gt;awk&lt;/em&gt;, &lt;em&gt;Java&lt;/em&gt;, &lt;em&gt;C++&lt;/em&gt; for instance.
Also, to see the power of ruby language, I try to construct a &lt;em&gt;ruby on rails&lt;/em&gt; web application framework. Up to here, I come into contact with the conception of &lt;em&gt;web application framework&lt;/em&gt;. I try to connect my previous knowledge about the web development related work with all the development tools I used before. Such as Spring Structs and Hibernate, Python web.py, including this, Ruby on rails.&lt;/p&gt;

&lt;h4&gt;Features on WAF&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Web template system&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Art Of Arrangement</title>
   <link href="http://tom.preston-werner.com/life/2013/03/21/Art-of-Arrangement.html"/>
   <updated>2013-03-21T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/life/2013/03/21/Art-of-Arrangement</id>
   <content type="html">&lt;p&gt;A very little things happens today that everybody may encounter and may even not to  mention it. My mental ask to find the previous project&#39;s source programming, which maybe re-used in our current&#39;s project. Accidently, I have no idea where this source I put it. After doze of endeavours, I gave up, and of course felt very dispointed the whole day. I retrospect my this horrible habit, that leave the staged things away. I get the conclusion that I would never re-use or do some back-review work on this done things in mostly situations. And to some exents, except the remain knowledge in my brain, I could hardly adopt any excellent methods or design which is perfectly completed before. In other words, I often tend to reinvent the wheel.&lt;/p&gt;

&lt;h4&gt;Horrible Habits&lt;/h4&gt;

&lt;p&gt;Remember that when I was just a little boy, my grandfather often told me that How important to form the habit of arrangement. Arrangement of our daily events and our mind. However this simple but also profound words almost don&#39;t have any influence on me. from the kidgardon time to the high school age, all the whole of my life and study is just benifited from brain and not to bad memory. Unfortunately, with the increase of our ages and the extend of our life, the knowledge grow rapidly. The big bang of our knowledge make me unpromising and hopeless to my self. It&#39;s a long time before I could came over my un-believable of capability. Until that, I still didn&#39;t recongize it is exactly the inadequate methods that prevent me from my ideal success. In one words, I didn&#39;t know how to study and work efficiently. I was eager to seek new and curious knowledge and tools, but never come back to think the practical meanings and effect behind it.&lt;/p&gt;

&lt;h4&gt;Knowledge and Capability Come from Arragement&lt;/h4&gt;

&lt;p&gt;No one believe that if you own a book, you know all the knowledge and lessons in that book. your knowledge is not decided by how many books you reads, but how much you learn from them. Our brain like all logic and sequece things, it hates unsuitable tedious and dirty. If you put a lot of unrelated or unsorted things in your mind,  it will easily got confused and even refuse to work for you. the spirit or nature of arrangement and category is exactly to make logical sort for our brains. Our brain tends to connect the new isolated knowledge node to the exist large net of knowledge. Knowledge is power, of course, knowledge rise capability. An important approach to improve our capability lies in form the habit of make arrangement for our brain.&lt;/p&gt;

&lt;h4&gt;Some Useful Approach or Tricky Tips&lt;/h4&gt;

&lt;p&gt;From a perspective of a techniquer, Our whole time commonly is dedicated to three things. Our work, here I refer to the true and real work, which we like it and enjoy the moment of working. Our daily Transaction, people&#39;s social property determines that It cannot be avoided to do some daily personnel or social things. The last one is our life which is also the important part besides our work.Tonight, I just discuss the first part, namely arrangement for my work. Every things in our work, we should do some principal or common resolution to simplify our daily life. &lt;br/&gt;
- &lt;strong&gt;Software&lt;/strong&gt;  Exactly, It cannot be avoided that we need do a lot of programming working in our daily project work. Therefore, it is naturally will have a ot of finished or unfinished software, which contain the source code itself, als related documents, material, data sets or other project-related  things.
- &lt;strong&gt;Learning Material&lt;/strong&gt; Knowledge grows every moment, You will leave the queue if you stop learning. There learning material mainly contain some tool-like material, such as language learning tutorial, some useful utilies or tools in our daily tasks, such as &lt;strong&gt;markdown&lt;/strong&gt; language, &lt;strong&gt;LaTex&lt;/strong&gt; for typesetting, even &lt;strong&gt;Vim&lt;/strong&gt; manuals.
- &lt;strong&gt;Research&lt;/strong&gt; For a schalor, or a master student, We should have our own research fields and interst research directions. It distinguish us from the college students or others. For the research parts, we should put attention on the algorithms and it&#39;s implementation methods or tools.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My Vim Manual</title>
   <link href="http://tom.preston-werner.com/notes/2013/03/20/My-Vim-Manual.html"/>
   <updated>2013-03-20T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/notes/2013/03/20/My-Vim-Manual</id>
   <content type="html">&lt;p&gt;Love is definitely amazing thing! ^_^, A ha ? Penny. &lt;br/&gt;
I become to enjoy the writing and thinking time, when the light is  turn off. My heart is warm, and mind is clean, the whole circumstation is just right, except my pumble poor english represion. All right, lets take the driver, go!&lt;/p&gt;

&lt;h4&gt;My Vim Note&lt;/h4&gt;

&lt;p&gt;I choose the excellent vi&amp;amp;vim editor since the first time I got contact with Linux OS. the just perfect j, k, h, l keys, all the scenes are so beautiful! I like the spirk learning curve, which discourage the weak, but encourage the brave man to walk the nice travel of a new world.&lt;/p&gt;

&lt;h5&gt;Cursor movement&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; - jump by start of words (punctuation considered words, etc. &lt;em&gt;word,&lt;/em&gt; two words: &lt;em&gt;word&lt;/em&gt; and &lt;em&gt;,&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;W&lt;/strong&gt; - jump by words (spaces separate words, etc. &lt;em&gt;word,&lt;/em&gt; one word: &lt;em&gt;word,&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; - jump to end of words (punctuation considered words.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;E&lt;/strong&gt; - jump end of words (no punctuation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;b&lt;/strong&gt; - jump backward by words(punctuation considered)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B&lt;/strong&gt; - jump backward by words(no punctuation)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0&lt;/strong&gt; - (zero), start of line. which is very practical.
&lt;strong&gt;Note&lt;/strong&gt;: Prefix a cursor movement command with a number to repeat it.&lt;/li&gt;
&lt;/ul&gt;


&lt;h5&gt;Insert Mode -Inserting/Appending text&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ea&lt;/strong&gt; - append at end of word. the same to bA, append start of words. Amazing combining commands.

&lt;h5&gt;Editing&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;J&lt;/strong&gt; - join line below to the current one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cc&lt;/strong&gt; - change(replace) the whole line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cw&lt;/strong&gt; - change(replace) to the end of word.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;c$&lt;/strong&gt; - change(replace) to the end of line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;s&lt;/strong&gt; - delete character at cursor and substitute text. compare with &lt;em&gt;r&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; - delete line at cursor and substitute text. (same as &lt;em&gt;cc&lt;/em&gt;).

&lt;h5&gt;Cut and Paste&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yy&lt;/strong&gt; - yank(copy) the whole line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yw&lt;/strong&gt; - yank(copy) the whole word.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;y$&lt;/strong&gt; - yank to end of line.

&lt;h5&gt;Search/Replace&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:%s/old/new/gc &lt;/strong&gt; - replace all the &lt;em&gt;old&lt;/em&gt; with &lt;em&gt;new&lt;/em&gt; throughout file with confirmations.

&lt;h5&gt;Working with multiple files&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:e file&lt;/strong&gt; - Edit a file in a new buffer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:bnext&lt;/strong&gt; - go to next buffer(or :bn ).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:bprev&lt;/strong&gt; - go to previous buffer( or :bp).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:bd&lt;/strong&gt; - delete a buffer, namely close a file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:sp filename &lt;/strong&gt; - open file in a new buffer and split window. &lt;strong&gt;This command is useful&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + ww&lt;/strong&gt; - switch between windows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + ws&lt;/strong&gt; -split windows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + wv&lt;/strong&gt; -split windows vertical.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl + wq&lt;/strong&gt; -close windows.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Py  Search</title>
   <link href="http://tom.preston-werner.com/work/2013/03/19/py--search.html"/>
   <updated>2013-03-19T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/19/py--search</id>
   <content type="html">&lt;h3&gt;HOW TO py-search&lt;/h3&gt;

&lt;p&gt;implemented by python to create an integrated search engine module, including crawler, indexing&amp;amp;search, web interface.&lt;/p&gt;

&lt;h4&gt;Main Three Modular&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;index-creator from database.&lt;/li&gt;
&lt;li&gt;search modular with Whoosh&lt;/li&gt;
&lt;li&gt;web interface GUI with web.py template.&lt;/li&gt;
&lt;li&gt;kylin desktop search application. &lt;strong&gt;Here, we supply the query results sorted function &lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;Source Directory&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;.
|-- **indexer_from_db.py**: creating index from database.
|-- **searcher.py**: main search api.
|-- web/
|-- |--code.py: python servlet for web.py
|-- templates/
|-- |--index.html: web interface for user query input.
|-- gui/
|-- |--kylin-desktop.py: main desktop application.
|-- |data-index/: index data files.
|-- README.md
|-- README.txt: same as above.
|-- kylin-desktop.py: same as web directory
|-- web-gui.py: same as code.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Congiure &amp;amp; Install&lt;/h4&gt;

&lt;blockquote&gt;&lt;ol&gt;
&lt;li&gt;  mysql-connector-python-1.0.9-py2.7.msi install&lt;/li&gt;
&lt;li&gt;  install setuputils through ez_setup.py, and then add Script subdirectory in python install to env variables.&lt;/li&gt;
&lt;li&gt;  install Whoosh 2.4.1 with the easy_install.exe tools&lt;/li&gt;
&lt;li&gt; install web.py with easy_install for web front end display.&lt;/li&gt;
&lt;li&gt; install xlwt package for write results to excel.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Perl Python Ruby Note</title>
   <link href="http://tom.preston-werner.com/languages/2013/03/19/perl-python-ruby-note.html"/>
   <updated>2013-03-19T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/03/19/perl-python-ruby-note</id>
   <content type="html">&lt;p&gt;Fortunately, I still keep passion about the new things. Especially for the programming languages. from the moment that I first met c language, I wonder whether other various language look like. are they also static strong type? Are they have the unpleasant points? Are they contructed by the function invoking and variables? Are they general purpose or somethings like shell script? All in all, I seek for other interesting features in other language. In a word,  I attempt to find somethings common points and different parts respectively.&lt;/p&gt;

&lt;h4&gt;&quot;All Language are just tools to solve problems&quot;&lt;/h4&gt;

&lt;p&gt;What a  concise summary! languages are just tools to solve particular problems. On one hand, Allthought each one has merits and its area of expertise, you can just show the most suitable for the specific problem. On the other hand, all roads to Roman. Classical book &lt;em&gt;SICP&lt;/em&gt; tells me that except the essential programming paradigms difference under the two branches of functional and imperative, all their sub-branches share lots of commons. the only main difference lies in the discrepancy of &lt;strong&gt;syntax sugar&lt;/strong&gt;. For instance, their all have basic and similar syntax. basic data type(though may distinguish between strong and weak type, dynamical and static), Conditional statement(though it seems little different, such as if else for C Java, if ; then elif done for shell, if : for python. ), Control flow (such as for loop, while loop, break, continue), also some basic data structure, such as array, list, hashmap ( or dictionary in Python and Perl). also some basic function( no matter it&#39;s member function of OO language or function), And also the most important part is its function library(C,C++) or Package(Java) or Module(Perl or Python).&lt;br/&gt;
However, In some kinds, you can also think that the above things is just touch the superical part of languages. Because You can&#39;t become an experience and professional programmers with just that. As an chinese old sayings: a man can lead a horse to the water but he cannot make him drink. For the practical enterprise project development, there are often two focus: the develop efficiency and quality of product. there are lot of principals and conventional. it is that distinguish the normal and professional programmers. these potential things can alos thought as something like design pattern and software engineering.&lt;br/&gt;
All right, we get involved too much.&lt;/p&gt;

&lt;h4&gt;Intersting features borrowing&lt;/h4&gt;

&lt;p&gt;To design a language is to shut oneself up in a room making a cart, they all borrow a lot of  excellent features in exising languages. For instance, Perl borrows features from other languages including C, shell scrpting, AWK, sed. which obviously will provide it great power in the text processing applications tasks.
Python&#39;s design philosophy emphasizes the code readability.
Ruby is a dynamic, reflective, general-purpose pure OO languages that combines syntax inspired by Perl with Smalltalk-like features. It also was influenced by Eiffel and Lisp.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>About Gui Programming</title>
   <link href="http://tom.preston-werner.com/work/2013/03/18/About-GUI-Programming.html"/>
   <updated>2013-03-18T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/work/2013/03/18/About-GUI-Programming</id>
   <content type="html">&lt;p&gt;I couldn&#39;t remember what&#39;s exact the time, when I begin learning to do comparison between different but similar things. there is obvious no exception for the computer programming. Especially for GUI programming.&lt;/p&gt;

&lt;h4&gt;Since GUI Road&lt;/h4&gt;

&lt;p&gt;I do remember the sence that when I first met the GUI programming. It laid a deep impression on my mind. Since then, you recognized that you can do such beautiful and professional(seems like) windows interface yourself.&lt;br/&gt;
Just like many modern normal college students, the materials where you first encountered programming are basically textbook. As a consideration of your low-level computer skills, Unix-like OS just makes most people tedious and be kept away naturally.&lt;br/&gt;
One of most important member in Windows eco-systems, MFC become my first station in GUI programing travel. Before that, I were very curious about the principal of how can people can implement such complicated windows system with just simple syntax of program languages. How just all that things works!  So, in summar of 2009, for the sake of Image CUP of NUPT, I begin a nice travel with about one month time. How perfect that time!&lt;br/&gt;
Last year, I gave another attempt about GUI in java awt and Swing framework, the whole process is surface and short. Except that I was tried by all these framework and their logic relations and event sequence.&lt;br/&gt;
Recently, It&#39;s maybe partly caused by the great intrest about &lt;strong&gt;Python&lt;/strong&gt; language, it&#39;s nice syntax and board applications programming fields appeals me a lot.  So when encount the same situation of indexing and searching modualr implementation, I just truned around to another new pypass. I decided to try something new, &lt;strong&gt;wxPython&lt;/strong&gt; GUI framework. To be honestly, It&#39;s not an easy way, which makes me rethink the natural things about the GUI programming themselves, not just the personnal detailed modular or funtions.&lt;br/&gt;
A good story just starts...&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;App&lt;/strong&gt; or &lt;strong&gt;Window&lt;/strong&gt; or &lt;strong&gt;Document&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Noted here. In my superficial experience, there are two main basic components in common GUI programing. the App and Window, the former is responsible for the entrance of whole programming, the invoke of windows event loops. In other words, you can regard it as working background. And the latter is window, namely graphic user interface, which show applications&#39; appearances. it interact with user, recieve user response and respond results back to the user through the GUI demonstration too. If we dig it deeper, we can find the key roler laid in the window contains the various of window &lt;em&gt;Widgets&lt;/em&gt; (which layout frame or container) and &lt;em&gt;Event&lt;/em&gt; Bind and handlers.&lt;br/&gt;
Equipped with above two weapons, you could finish some basic and simple tasks, whcih rely on some not so complicated dialogs or widgets to show or interact with users, even in the age of user experience first. However, if you want the whole object storage or realtime user interaction operation, such as text/word processor, games applications, You just hit the skin. Document can be viewed as a store or serialize object, which is in charge of the data management. It also manage partly the communication between the data and methods.&lt;/p&gt;

&lt;h4&gt;For Complicated Logic Relation in GUI&lt;/h4&gt;

&lt;p&gt;I found it just very difficult to grasp the whole skeleton of the GUI programming. Put simply, it means that when you sit at your computer, open your favorite editor(Vim for example) or other popular IDE environment, you just become confused. Where should I start from? There exists a lot of tool-tricy logic sequeces in the whole programming procedure.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Wxpython</title>
   <link href="http://tom.preston-werner.com/languages/2013/03/11/learning-wxPython.html"/>
   <updated>2013-03-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/03/11/learning-wxPython</id>
   <content type="html">&lt;p&gt;For a part of project, the demands for the gui interface enforce me to find a simple and flexibile toolkit-like to develop a desktop programming. the two main choices are the &lt;strong&gt;Swing&lt;/strong&gt; and &lt;strong&gt;wxPython&lt;/strong&gt;. The java things bores me a lot in before. So I decide to try something new, since I have a lot of interest in python recently.&lt;/p&gt;

&lt;h4&gt;Modules introduction&lt;/h4&gt;

&lt;p&gt;wxPython is a cross platform toolkit for creating desktop GUI applications. the principal author is &lt;strong&gt;Robin Dunn&lt;/strong&gt;. wxPython consists of the five basic modules.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- Controls: provides the common widgets, such as Button, Toolbar.
|-- Core: consists of elementary classes. Object, Sizers, Events.
|-- GDI: used for drawing onto the widgets.
|-- Misc: various other classes and modules. logging, configuration.
|-- Windows: consists of various windows. Panel, Dialog, Frame etc. 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Widgets are called controls in windows. GUI programming is a tedious project, the main reason lies in that the inner logical flow troubles me a lot. such as when you try to create a menuitem, you should first contruct a MenuBar object, then a Menu object, and then construct a menuitem, finnally append the menu object to the menubar object. Also you should bing the event to the itemmenu object.&lt;/p&gt;

&lt;h4&gt;Sizer&lt;/h4&gt;

&lt;p&gt;The programmer specifies the position and the size of each widget in pixels. when you use the absolute positions, you should understand several things:
- when you resize the window, the size and the position of widgets do not change.
- applications look different on various platforms.
- changing fonts might spoiled the layout.
- it&#39;s difficult to redo the layout.&lt;/p&gt;

&lt;p&gt;Sizer address all those issues, we can choose among these sizers:&lt;br/&gt;
    .
    |-- wx.BoxSizer enable us to put several widgets into row or column.
    |-- wx.GridSizer lays out widgets in two dimensional table, each cell has the same size.
    |-- wx.FlexGridSizer all cells have same height in a row.
    |-- wx.BagSizer the most complicated sizer.&lt;/p&gt;

&lt;h4&gt;Events&lt;/h4&gt;

&lt;p&gt;Events are integral part of every GUI application. All GUI application are event-driven.&lt;br/&gt;
&lt;strong&gt;Event object&lt;/strong&gt; is an object associated with the event. It is usually a window. &lt;strong&gt;Event type&lt;/strong&gt; is a unique event, that has been generated. &lt;strong&gt;Event binder&lt;/strong&gt; is an object, that binds an event type with an event handler.&lt;/p&gt;

&lt;h4&gt;Widgets&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;wx.Button&lt;/li&gt;
&lt;li&gt;wx.ToggleButton&lt;/li&gt;
&lt;li&gt;wx.StaticLine&lt;/li&gt;
&lt;li&gt;wx.StaticText&lt;/li&gt;
&lt;li&gt;wx.StaticBox it is used to logically group various widgets.&lt;/li&gt;
&lt;li&gt;wx.ComboBox a single line text field, a button with a down arrow image and a listbox.&lt;/li&gt;
&lt;li&gt;wx.CheckBox notice that, like the togglebox, it has two states.&lt;/li&gt;
&lt;li&gt;wx.StatusBar&lt;/li&gt;
&lt;li&gt;wx.RadioButton&lt;/li&gt;
&lt;li&gt;wx.Gauge It has an indicator to show the current state of a task.&lt;/li&gt;
&lt;li&gt;wx.Slider&lt;/li&gt;
&lt;li&gt;wx.SpinCtrl&lt;/li&gt;
&lt;/ul&gt;


&lt;h5&gt;&lt;em&gt;reference&lt;/em&gt;&lt;/h5&gt;

&lt;p&gt;&lt;em&gt;[1]:&lt;/em&gt; &lt;strong&gt;&lt;a href=&quot;http://zetcode.com/wxpython/&quot;&gt;wxPython tutorial&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>To Live, To Life</title>
   <link href="http://tom.preston-werner.com/life/2013/03/10/to-live,-to-life.html"/>
   <updated>2013-03-10T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/life/2013/03/10/to-live,-to-life</id>
   <content type="html">&lt;p&gt;In the myterious equations of love that any logic or reasons can be found.&lt;br/&gt;
you are the only reason I am. You are all the reason.&lt;/p&gt;

&lt;h4&gt;Enjoy writing&lt;/h4&gt;

&lt;p&gt;At some point, I begin to rethink the meanings of writing. It seems to me that it&#39;s not only the memories of carrier, but also it organize my thoughts, enlightened and inspired ideas.  Especially for the developers, it&#39;s important to form the habit of summarization and conclusion.&lt;br/&gt;
Under the cover of darkness, a suitable desk accompanied with a laptop, beside a cup of tea. In the warm light, the smell of tea flow with mind. It&#39;s just perfect!&lt;/p&gt;

&lt;h4&gt;Just go ahead&lt;/h4&gt;

&lt;p&gt;The preliminary assumption on the content of this blog contains the following &lt;strong&gt;&lt;em&gt;categories&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;note&lt;/strong&gt; : the usage of some tools or languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;study&lt;/strong&gt;: some interest research fields in my directions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;phi&lt;/strong&gt;: some comprehensive thoughts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lankar&lt;/strong&gt;: about personality writing by Chinese.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compar&lt;/strong&gt;: the customize abbre of comparision, which is appeals to me a lot.&lt;br/&gt;
The preliminary assumption on the content of this blog contain the following &lt;strong&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;.  
|-- life   
|   |-- feelings   
|   |-- tips    
|-- work   
|   |-- languages  
|   |   |-- python  
|   |   |-- ruby  
|   |   |-- c++  
|   |   |-- et al.  
|   |-- tools  
|   |-- |-- git  
|   |-- |-- latex  
|   |-- |-- et al.  
|   |-- research  
|   |-- |-- nlp(natural language process)  
|   |-- |-- ml(machine learning)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;So long&lt;/h4&gt;

&lt;p&gt;However, the position of this blog is still aimed to technique articles, and do some help for myself, and It will be my honor if it happens to be useful to you.&lt;br/&gt;
so long, and thanks for all the fish ^_^&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Some Comparison Between Ruby And Python</title>
   <link href="http://tom.preston-werner.com/languages/2013/03/10/some-comparison-between-ruby-and-python.html"/>
   <updated>2013-03-10T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/languages/2013/03/10/some-comparison-between-ruby-and-python</id>
   <content type="html">&lt;p&gt;Memory is a scret things. many people may encounter the following situation: when you endeavour to remember some connected or similar things togther, It often become more difficult to remember them. what confuses us most just lies in the many similarities and differences in their properties.&lt;/p&gt;

&lt;h4&gt;functional programming &lt;strong&gt;vs&lt;/strong&gt; imperative programming&lt;/h4&gt;

&lt;p&gt;From the perspective of deeper phylosophy level of programming, we can distinct all kinds of languages(such as &lt;em&gt;ruby, python, c, c++, haskell, lisp&lt;/em&gt; etc) with the category above.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://tom.preston-werner.com/lessons/2011/12/29/jekyll-introduction.html"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/lessons/2011/12/29/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically  what Jekyll is and why you would want to use it.
Directly following the intro we&#39;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2&gt;Overview&lt;/h2&gt;

&lt;h3&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from
dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &quot;a simple, blog aware, static site generator&quot;.&lt;/p&gt;

&lt;h3&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Sites&quot;&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system.
Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory
is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files,
compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder.
The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags
on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements.
This is a common source of confusion when getting started.
Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient.
The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server.
Traditional dynamic blogs like Wordpress require a database and server-side code.
Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;
&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;
&lt;li&gt;No internet connection required.&lt;/li&gt;
&lt;li&gt;Ability to publish via git.&lt;/li&gt;
&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;
&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;
&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;


&lt;h1&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples.
This information is not intended to specifically teach you how to do anything, rather it
is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately
help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&quot;/index.html#start-now&quot;&gt;installing jekyll&lt;/a&gt; you&#39;ll need to format your website directory in a way jekyll expects.
Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 2011-10-25-open-source-is-good.markdown
|   |-- 2011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br/&gt;
  Stores configuration data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br/&gt;
  This folder is for partial views.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br/&gt;
  This folder is for the main templates your content will be inserted into.
  You can have different layouts for different pages or page sections.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br/&gt;
  This folder contains your dynamic content/posts.
  the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br/&gt;
  This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br/&gt;
  This folder is not part of the standard jekyll structure.
  The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory.
  Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(read more: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Usage&quot;&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Configuration&quot;&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page.
These content &quot;objects&quot; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax.
Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br/&gt;
Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br/&gt;
A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory.
If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file.
Additionally, each file must have &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt; prepended to its content.
YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br/&gt;
Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy.
Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br/&gt;
Posts can have tags associated with them as part of their meta-data.
Tags may be placed on posts by providing them in the post&#39;s YAML front matter.
You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br/&gt;
Posts may be categorized by providing one or more categories in the YAML front matter.
Categories offer more significance over tags in that they can be reflected in the URL path to the given post.
Note categories in Jekyll work in a specific way.
If you define more than one category you are defining a category hierarchy &quot;set&quot;.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &quot;lessons/beginner&quot;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll.
You won&#39;t find &quot;lessons&quot; and &quot;beginner&quot; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br/&gt;
Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br/&gt;
In order to register as a Jekyll page the file must contain &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML Front-Matter&lt;/a&gt;.
Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br/&gt;
Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br/&gt;
If pages are defined in sub-directories, the path to the page will be reflected in the url.
Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br/&gt;
You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br/&gt;
Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br/&gt;
Generating a sitemap is good practice for SEO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br/&gt;
A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&#39;s or post&#39;s content.
All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;.
The site variable holds all accessible content and metadata relative to the site.
The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br/&gt;
Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br/&gt;
Templates should be coded in HTML and contain YAML Front Matter.
All templates can contain Liquid code to work with your site&#39;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br/&gt;
There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;.
The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined.
Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;

&lt;p&gt;  &lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;h3&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they
define another &quot;root&quot; layout/template within their YAML Front Matter.
This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder.
Includes are NOT templates, rather they are just code snippets that get included into templates.
In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll.
This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href=&quot;http://shopify.com&quot;&gt;Shopify&lt;/a&gt;.
Liquid is designed for end-users to be able to execute logic within template files
without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with
your site and post/page data.&lt;/p&gt;

&lt;h3&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.
GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code.
The point being you can&#39;t do jackshit in liquid that hasn&#39;t been allowed explicitly by the implementation.
What&#39;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&#39;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins.
Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to
suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br/&gt;
My personal stance is to not invest time trying to hack liquid. It&#39;s really unnecessary
&lt;em&gt;from a programmer&#39;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code)
you are better off sticking with ruby. Toward that end I&#39;ve built &lt;a href=&quot;http://github.com/plusjade/mustache-with-jekyll&quot;&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages.
That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br/&gt;
  This is done with textile or markdown.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br/&gt;
This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br/&gt;
All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt;  &lt;br/&gt;
  These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax.
  Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br/&gt;
Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through
Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&#39;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;.
Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty.
This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block.
The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here:
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into.
If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt;
That is to say loading a post file into a template file that refers to another template file with work in the way you&#39;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&#39;s job is to generate a static representation of your website.
The following is an outline of how that&#39;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br/&gt;
Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br/&gt;
Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one
big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata.
At this stage your site is one big computed ruby object.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br/&gt;
Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s).
Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &quot;liquified&quot;. &lt;br/&gt;
 &lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler
hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br/&gt;
 Finally the liquid templates are &quot;rendered&quot;, thereby processing any liquid syntax provided in the templates
 and saving the final, static representation of the file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br/&gt;
Because Jekyll computes the entire site in one fell swoop, each template is given access to
a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&#39;ll iterate through and format
using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;
&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap.
You can also read the original documentation here: &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Template-Data&quot;&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does.
As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href=&quot;&quot;&gt;&lt;/a&gt;
or jump right into &lt;a href=&quot;&quot;&gt;Usage&lt;/a&gt; if you&#39;d like.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Open Source (Almost) Everything</title>
   <link href="http://tom.preston-werner.com/2011/11/22/open-source-everything.html"/>
   <updated>2011-11-22T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2011/11/22/open-source-everything</id>
   <content type="html">&lt;h1&gt;Open Source (Almost) Everything&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;22 Nov 2011 - San Francisco&lt;/p&gt;


&lt;p&gt;When Chris and I first started working on GitHub in late 2007, we split the work into two parts. Chris worked on the Rails app and I worked on Grit, the first ever Git bindings for Ruby. After six months of development, Grit had become complete enough to power GitHub during our public launch of the site and we were faced with an interesting question:&lt;/p&gt;

&lt;p&gt;Should we open source Grit or keep it proprietary?&lt;/p&gt;

&lt;p&gt;Keeping it private would provide a higher hurdle for competing Ruby-based Git hosting sites, giving us an advantage. Open sourcing it would mean thousands of people worldwide could use it to build interesting Git tools, creating an even more vibrant Git ecosystem.&lt;/p&gt;

&lt;p&gt;After a small amount of debate we decided to open source Grit. I don&#39;t recall the specifics of the conversation but that decision nearly four years ago has led to what I think is one of our most important core values: open source (almost) everything.&lt;/p&gt;

&lt;h2&gt;Why is it awesome to open source (almost) everything?&lt;/h2&gt;

&lt;p&gt;If you do it right, open sourcing code is &lt;strong&gt;great advertising&lt;/strong&gt; for you and your company. At GitHub we like to talk publicly about libraries and systems we&#39;ve written that are still closed but destined to become open source. This technique has several advantages. It helps determine what to open source and how much care we should put into a launch. We recently open sourced Hubot, our chat bot, to widespread delight. Within two days it had 500 watchers on GitHub and 409 upvotes on Hacker News. This translates into goodwill for GitHub and more superfans than ever before.&lt;/p&gt;

&lt;p&gt;If your code is popular enough to attract outside contributions, you will have created a &lt;strong&gt;force multiplier&lt;/strong&gt; that helps you get more work done faster and cheaper. More users means more use cases being explored which means more robust code. Our very own &lt;a href=&quot;https://github.com/defunkt/resque&quot;&gt;resque&lt;/a&gt; has been improved by 115 different individuals outside the company, with hundreds more providing 3rd-party plugins that extend resque&#39;s functionality. Every bug fix and feature that you merge is time saved and customer frustration avoided.&lt;/p&gt;

&lt;p&gt;Smart people like to hang out with other smart people. Smart developers like to hang out with smart code. When you open source useful code, you &lt;strong&gt;attract talent&lt;/strong&gt;. Every time a talented developer cracks open the code to one of your projects, you win. I&#39;ve had many great conversations at tech conferences about my open source code. Some of these encounters have led to ideas that directly resulted in better solutions to problems I was having with my projects. In an industry with such a huge range of creativity and productivity between developers, the right eyeballs on your code can make a big difference.&lt;/p&gt;

&lt;p&gt;If you&#39;re hiring, &lt;strong&gt;the best technical interview possible&lt;/strong&gt; is the one you don&#39;t have to do because the candidate is already kicking ass on one of your open source projects. Once technical excellence has been established in this way, all that remains is to verify cultural fit and convince that person to come work for you. If they&#39;re passionate about the open source code they&#39;ve been writing, and you&#39;re the kind of company that cares about well-crafted code (which clearly you are), that should be simple! We hired &lt;a href=&quot;https://github.com/tanoku&quot;&gt;Vicent Martí&lt;/a&gt; after we saw him doing stellar work on &lt;a href=&quot;https://github.com/libgit2/libgit2&quot;&gt;libgit2&lt;/a&gt;, a project we&#39;re spearheading at GitHub to extract core Git functionality into a standalone C library. No technical interview was necessary, Vicent had already proven his skills via open source.&lt;/p&gt;

&lt;p&gt;Once you&#39;ve hired all those great people through their contributions, dedication to open source code is an amazingly effective way to &lt;strong&gt;retain that talent&lt;/strong&gt;. Let&#39;s face it, great developers can take their pick of jobs right now. These same developers know the value of coding in the open and will want to build up a portfolio of projects they can show off to their friends and potential future employers. That&#39;s right, a paradox! In order to keep a killer developer happy, you have to help them become more attractive to other employers. But that&#39;s ok, because that&#39;s exactly the kind of developer you want to have working for you. So relax and let them work on open source or they&#39;ll go somewhere else where they can.&lt;/p&gt;

&lt;p&gt;When I start a new project, I assume it will eventually be open sourced (even if it&#39;s unlikely). This mindset leads to &lt;strong&gt;effortless modularization&lt;/strong&gt;. If you think about how other people outside your company might use your code, you become much less likely to bake in proprietary configuration details or tightly coupled interfaces. This, in turn, leads to cleaner, more maintainable code. Even internal code should pretend to be open source code.&lt;/p&gt;

&lt;p&gt;Have you ever written an amazing library or tool at one job and then left to join another company only to rewrite that code or remain miserable in its absence? I have, and it sucks. By getting code out in the public we can drastically &lt;strong&gt;reduce duplication of effort&lt;/strong&gt;. Less duplication means more work towards things that matter.&lt;/p&gt;

&lt;p&gt;Lastly, &lt;strong&gt;it&#39;s the right thing to do&lt;/strong&gt;. It&#39;s almost impossible to do anything these days without directly or indirectly executing huge amounts of open source code. If you use the internet, you&#39;re using open source. That code represents millions of man-hours of time that has been spent and then given away so that everyone may benefit. We all enjoy the benefits of open source software, and I believe we are all morally obligated to give back to that community. If software is an ocean, then open source is the rising tide that raises all ships.&lt;/p&gt;

&lt;h2&gt;Ok, then what shouldn&#39;t I open source?&lt;/h2&gt;

&lt;p&gt;That&#39;s easy. Don&#39;t open source anything that represents core business value.&lt;/p&gt;

&lt;p&gt;Here are some examples of what we don&#39;t open source and why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Core GitHub Rails app (easier to sell when closed)&lt;/li&gt;
&lt;li&gt;The Jobs Sinatra app (specially crafted integration with github.com)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here are some examples of things we do open source and why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grit (general purpose Git bindings, useful for building many tools)&lt;/li&gt;
&lt;li&gt;Ernie (general purpose BERT-RPC server)&lt;/li&gt;
&lt;li&gt;Resque (general purpose job processing)&lt;/li&gt;
&lt;li&gt;Jekyll (general purpose static site generator)&lt;/li&gt;
&lt;li&gt;Gollum (general purpose wiki app)&lt;/li&gt;
&lt;li&gt;Hubot (general purpose chat bot)&lt;/li&gt;
&lt;li&gt;Charlock_Holmes (general purpose character encoding detection)&lt;/li&gt;
&lt;li&gt;Albino (general purpose syntax highlighting)&lt;/li&gt;
&lt;li&gt;Linguist (general purpose filetype detection)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Notice that everything we keep closed has specific business value that could be compromised by giving it away to our competitors. Everything we open is a general purpose tool that can be used by all kinds of people and companies to build all kinds of things.&lt;/p&gt;

&lt;h2&gt;What is the One True License?&lt;/h2&gt;

&lt;p&gt;I prefer the MIT license and almost everything we open source at GitHub carries this license. I love this license for several reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It&#39;s short. Anyone can read this license and understand exactly what it means without wasting a bunch of money consulting high-octane lawyers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enough protection is offered to be relatively sure you won&#39;t sue me if something goes wrong when you use my code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everyone understands the legal implications of the MIT license. Weird licenses like the WTFPL and the Beer license pretend to be the &quot;ultimate in free licenses&quot; but utterly fail at this goal. These fringe licenses are too vague and unenforceable to be acceptable for use in some companies. On the other side, the GPL is too restrictive and dogmatic to be usable in many cases. I want everyone to benefit from my code. Everyone. That&#39;s what Open should mean, and that&#39;s what Free should mean.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Rad, how do I get started?&lt;/h2&gt;

&lt;p&gt;Easy, just flip that switch on your GitHub repository from private to public and tell the world about your software via your blog, Twitter, Hacker News, and over beers at your local pub. Then sit back, relax, and enjoy being part of something big.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=3267432&quot;&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rejected Bio from The Setup</title>
   <link href="http://tom.preston-werner.com/2011/05/03/rejected-bio-from-the-setup.html"/>
   <updated>2011-05-03T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2011/05/03/rejected-bio-from-the-setup</id>
   <content type="html">&lt;h1&gt;Rejected Bio from The Setup&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;03 May 2011 - San Francisco&lt;/p&gt;


&lt;p&gt;Yesterday, &lt;a href=&quot;http://tom.preston-werner.usesthis.com/&quot;&gt;the autobiographical post I wrote for The
Setup&lt;/a&gt; went live. I wrote that post
over a year ago and then entered into an epic battle with
&lt;a href=&quot;http://twitter.com/#!/waferbaby&quot;&gt;@waferbaby&lt;/a&gt; about the length of my &quot;Who are
you, and what do you do?&quot; section. He said it was too long. I said it could
not be shortened. And so the post sat for a year, collecting dust, neither of
us prepared to back down.&lt;/p&gt;

&lt;p&gt;About a month ago I decided that it was foolish to let the words I had written rot on my hard drive and so I did the only thing I knew how to do: overreact. So I cut the original nine-hundred words of my bio down to fourteen words and resubmitted it to Daniel. Those are the words you see in the post now.&lt;/p&gt;

&lt;p&gt;For your pleasure, here is the original bio in its full, unabridged glory.&lt;/p&gt;

&lt;hr /&gt;


&lt;p&gt;My name is Tom Preston-Werner. I find that the hyphenated last name
makes me sound distinguished and worth listening to. I grew up three
decades ago in a small city in Iowa along the Mississippi, which means
I shucked a lot of corn and know exactly how many mosquitos will land
on your arm should you hold it still for ten minutes at dusk on the
muggiest day of the summer. As an aspiring theoretical particle
physicist, I worked my way through entire shelves of scientific
literature from the public library, desperately wanting to understand
the bewildering mathematics that littered the pages like so many
leaves on the bottom of that morning&#39;s cup of green tea. I searched in
vain for instructors or classmates that could provide me with the
insight necessary to comprehend the true meaning of Heisenberg&#39;s
Uncertainty Principle, but all I found were underpaid math teachers
and disillusioned &quot;students&quot; in search of their next smoke break.
After obsessing over US News&#39; Best Colleges reports for months I
finally chose and was accepted to Harvey Mudd, a tiny engineering
school in California famous for assigning the greatest number of hours
of homework per night. This sounded just perfect to me. Finally a
place I could bring up the EPR Paradox and not be immediately
stigmatized as &quot;that science weirdo with the hilariously thick glasses
and unfortunate hairdo.&quot;&lt;/p&gt;

&lt;p&gt;Mudd did not disappoint. But now I had the opposite problem. In order
to properly understand particle physics, you must have a deep and
profound love of math. You have to be so comfortable with abstract
concepts that even Picasso would be jealous. Ironically, in order to
grasp the fundamental reality of our universe, you must forget about
the &quot;reality&quot; of everyday life and start living in a world comprised
of eigenvectors, Hilbert spaces, and Planck&#39;s constant. This was a
leap I could not make. I like math, but I&#39;m too easily distracted by
macroscopic reality to make it my profession.&lt;/p&gt;

&lt;p&gt;Once I accepted that I would never spend late nights poring over
bubble chamber printouts at Fermilab, it became obvious that I was
destined to enter computer science. I started programming in BASIC on
a TRS-80 that my dad bought from Radio Shack when I was 8 years old.
Since then, I&#39;d learned to love the discipline and creativity involved
in making a machine do my bidding. It was like having a super-obedient
but annoyingly logical little brother. He&#39;ll do anything you want as
long as you tell him in precise and unambiguous language. The best
thing is, the feedback is immediate. In physics, it can take twenty
years to prove that a single esoteric particle even exists. When
you&#39;re writing a program that displays the number of electrons in each
of the shells around the nucleus of every element, the feedback is
immediate and intoxicating. With just a few keystrokes, the world is
changed forever. Try to get that kind of rush even once in a lifetime
as a theoretical particle physicist. I dare you.&lt;/p&gt;

&lt;p&gt;In 1999, after two years of college, I dropped out of Harvey Mudd to
join a startup with some friends that were graduating. It was the end
of the first dot-com bubble and I thought I could strike it rich,
right then and there. Sadly, like so many startups of the day, we
never accomplished what we envisioned and I ended up bouncing between
jobs and consulting gigs for six years until I found myself in San
Francisco. If Harvey Mudd was my mecca for physicists, then San
Francisco was my mecca for programmers. Where else can you be grabbing
lunch at a taqueria and overhear a group at the next table discussing
the finer points of optimizing C code to run on an embedded processor?&lt;/p&gt;

&lt;p&gt;I moved to San Francisco to take a job as a Ruby developer with a
Wikipedia search engine called Powerset. I also began attending Ruby
meetups and drinking with local software developers. There are a lot
of talented people in the Bay Area and I wanted to meet them all.
Within the Ruby community, a distributed version control system called
Git was starting to get some attention. It was a really cool way of
working with other people on code, but there wasn&#39;t an easy way to get
up and running with a group of developers. Along with cofounders Chris
Wanstrath and PJ Hyett (who I met at the Ruby meetups) I started a
company called GitHub that would address this problem and make it dead
simple to share Git repositories and collaborate on code with other
developers.&lt;/p&gt;

&lt;p&gt;At first, we worked on GitHub on the side, putting in time on evenings
and weekends. After six months we launched the site to the public and
started charging. Not long after that, Powerset was acquired by
Microsoft and I was faced with a choice: stay on as a Microsoft
employee with a big retention bonus and give up GitHub or turn down
the Microsoft money and quit Powerset to work on GitHub full-time. You
can read more about this saga in my blog post entitled &lt;a href=&quot;http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html&quot;&gt;How I Turned
Down $300,000 from Microsoft to go Full-Time on
GitHub&lt;/a&gt;.
I think I made the right decision.&lt;/p&gt;

&lt;p&gt;Today GitHub has twenty-nine employees and more than 730,000 users with over
2,000,000 repositories. We&#39;re growing fast, and I&#39;m having the time of
my life!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ten Lessons from GitHub's First Year</title>
   <link href="http://tom.preston-werner.com/2011/03/29/ten-lessons-from-githubs-first-year.html"/>
   <updated>2011-03-29T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2011/03/29/ten-lessons-from-githubs-first-year</id>
   <content type="html">&lt;h1&gt;Ten Lessons from GitHub&amp;#8217;s First Year&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;29 Mar 2011 / 29 Dec 2008 &amp;#8211; San Francisco&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span class=&quot;caps&quot;&gt;NOTE&lt;/span&gt;: This post was written in late December of 2008, more than two years ago. It has stayed in my drafts folder since then, waiting for the last 2% to be written. Why I never published it is beyond my reckoning, but it serves as a great reminder of how I perceived the world back then. In the time since I wrote this we&amp;#8217;ve grown from four people to twenty-six, settled into an office, installed a kegerator, and still never taken outside funding. In some ways, things have changed a great deal, but in the most important ways, things are still exactly the same. Realizing this puts a big smile on my face.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;The end of the year is a great time to sit down with a glass of your favorite beverage, dim the lights, snuggle up next to the fire and think about what you&amp;#8217;ve learned over the past twelve months.&lt;/p&gt;
&lt;p&gt;For me, 2008 was the year that I helped design, develop, and launch GitHub. Creating a new startup is an intense learning experience. Through screwups and triumphs, I have learned some valuable lessons this year. Here&amp;#8217;s a few of them.&lt;/p&gt;
&lt;h2&gt;Start Early&lt;/h2&gt;
&lt;p&gt;When Chris and I started working on GitHub in late 2007, Git was largely unknown as a version control system. Sure, Linux kernel hackers had been using it since day one, but outside of that small microcosm, it was rare to come across a developer that was using it on a day-to-day basis. I was first introduced to Git by Dave Fayram, a good friend and former coworker during my days at Powerset. Dave is the quintessential early adopter and, as far as I can calculate, patient zero for the spread of Git adoption in the Ruby community and beyond.&lt;/p&gt;
&lt;p&gt;Back then, the Git landscape was pretty barren. Git had only recently become  usable by normal people with the 1.5 release. As for Git hosting, there was really only &lt;a href=&quot;http://repo.or.cz/&quot;&gt;repo.or.cz&lt;/a&gt;, which felt to me very limited, clumsy, and poorly designed. There were no commercial Git hosting options whatsoever. Despite this, people were starting to talk about Git at the Ruby meetups. About how awesome it was. But something was amiss. Git was supposed to be this amazing way to work on code in a distributed way, but what was the mechanism to securely share private code? Your only option was to setup user accounts on Unix machines and use that as an ad-hoc solution. Not ideal.&lt;/p&gt;
&lt;p&gt;And so GitHub was born. But it was born into a world where there was no existing market for paid Git hosting. We would be &lt;em&gt;creating&lt;/em&gt; the market. I vividly remember telling people, &amp;#8220;I don&amp;#8217;t expect GitHub to succeed right away. Git adoption will take a while, but we&amp;#8217;ll be ready when it happens.&amp;#8221; Neither Chris nor I were in any particular hurry for this to happen. I was working full time at Powerset, and he was making good money as a Rails consultant. By choosing to build early on top of a nascent technology, we were able to construct a startup with basically no overhead, no competition, and in our free time.&lt;/p&gt;
&lt;h2&gt;Adapt to Your Customers&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s a seemingly paradoxical piece of advice for you: Listen to your customers, but don&amp;#8217;t let them tell you what to do. Let me explain. Consider a feature request such as &amp;#8220;GitHub should let me &lt;span class=&quot;caps&quot;&gt;FTP&lt;/span&gt; up a documentation site for my project.&amp;#8221; What this customer is really trying to say is &amp;#8220;I want a simple way to publish content related to my project,&amp;#8221; but they&amp;#8217;re used to what&amp;#8217;s already out there, and so they pose the request in terms that are familiar to them. We could have implemented some horrible &lt;span class=&quot;caps&quot;&gt;FTP&lt;/span&gt; based solution as requested, but we looked deeper into the underlying question and now we allow you to publish content by simply pushing a Git repository to your account. This meets requirements of both functionality &lt;em&gt;and&lt;/em&gt; elegance.&lt;/p&gt;
&lt;p&gt;Another company that understands this concept at a fundamental level is Apple. I&amp;#8217;m sure plenty of people asked Apple to make a phone but Steve Jobs and his posse looked beneath the request and figured out what people really wanted: a nice looking, simple to use, and easy to sync mobile device that kicked some serious ass. And that&amp;#8217;s the secret. Don&amp;#8217;t give your customers what they ask for; give them what they &lt;em&gt;want&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Have Fun&lt;/h2&gt;
&lt;p&gt;I went to college at a little school in California called Harvey Mudd. Yeah, I know you haven&amp;#8217;t heard of it, but if you remember those US News &amp;amp; World Report &amp;#8220;Best Colleges&amp;#8221; books that you obsessed over in highschool (ok, maybe you didn&amp;#8217;t, but I did), Harvey Mudd was generally ranked as the engineering school with the greatest number of hours of homework per night. Yes, more than &lt;span class=&quot;caps&quot;&gt;MIT&lt;/span&gt;, and yes, more than Caltech. It turned out to be true, as far as I can tell. I have fond memories of freaking out about ridiculously complex spring/mass/damper systems and figuring the magnetic flux of a wire wrapped around a cylinder in a double helix. We studied hard&amp;#8212;very hard. But we played hard too. It was the only thing that could possibly keep us sane.&lt;/p&gt;
&lt;p&gt;Working on a startup is like that. It feels a bit like college. You&amp;#8217;re working on insanely hard projects, but you&amp;#8217;re doing it with your best friends in the world and you&amp;#8217;re having a great time (usually). In both environments, you have to goof off a lot in order to balance things out. Burnout is a real and dangerous phenomenon. Fostering a playful and creative environment is critical to maintaining both your personal health, and the health (and idea output) of the company.&lt;/p&gt;
&lt;h2&gt;Pay attention to Twitter&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve found Twitter to be an extremely valuable resource for instant feedback. If the site is slow for some reason, Twitter will tell me so. If the site is unreachable for people in a certain country (I&amp;#8217;m looking at you China), I&amp;#8217;ll find out via Twitter. If that new feature we just released is really awesome, I&amp;#8217;ll get a nice ego boost by scanning the Twitter search.&lt;/p&gt;
&lt;p&gt;People have a tendency to turn to Twitter to bitch about all the little bugs they see on your website, usually appended with the very tiresome &amp;#8220;&lt;span class=&quot;caps&quot;&gt;FAIL&lt;/span&gt;&amp;#8221;. These are irksome to read, but added together are worth noticing. Often times these innocent tweets will inform a decision about whether an esoteric bug is worth adding to the short list. We also created a GitHub account on Twitter that our support guy uses to respond to negative tweets. Offering this level of customer service almost always turns a disgruntled customer into a happy one.&lt;/p&gt;
&lt;p&gt;If you have an iPhone, I heartily recommend the &lt;a href=&quot;http://fanzter.com/products/download/summizer&quot;&gt;Summizer&lt;/a&gt; app from Fanzter, Inc. It makes searching, viewing, and responding to tweets a cinch.&lt;/p&gt;
&lt;h2&gt;Deploy at Will!&lt;/h2&gt;
&lt;p&gt;At the first RailsConf I had the pleasure of hearing Martin Fowler deliver an amazing keynote. He made some apt metaphors regarding agile development that I will now paraphrase and mangle.&lt;/p&gt;
&lt;p&gt;Imagine you&amp;#8217;re tasked with building a computer controlled gun that can accurately hit a target about 50 meters distant. That is the only requirement. One way to do this is to build a complex machine that measures every possible variable (wind, elevation, temperature, etc.) before the shot and then takes aim and shoots. Another approach is to build a simple machine that fires rapidly and can detect where each shot hits. It then uses this information to adjust the aim of the next shot, quickly homing in on the target a little at a time.&lt;/p&gt;
&lt;p&gt;The difference between these two approaches is to realize that bullets are cheap. By the time the former group has perfected their wind detection instrument, you&amp;#8217;ll have finished your simple weapon and already hit the target.&lt;/p&gt;
&lt;p&gt;In the world of web development, the target is your ideal offering, the bullets are your site deploys, and your customers provide the feedback mechanism. The first year of a web offering is a magical one. Your customers are most likely early adopters and love to see new features roll out every few weeks. If this results in a little bit of downtime, they&amp;#8217;ll easily forgive you, as long as those features are sweet. In the early days of GitHub, we&amp;#8217;d deploy up to ten times in one afternoon, always inching closer to that target.&lt;/p&gt;
&lt;p&gt;Make good use of that first year, because once the big important customers start rolling in, you have to be a lot more careful about hitting one of them with a stray bullet. Later in the game, downtime and botched deploys are money lost and you have to rely more on building instruments to predict where you should aim.&lt;/p&gt;
&lt;h2&gt;You Don&amp;#8217;t Need an Office&lt;/h2&gt;
&lt;p&gt;All four fulltime GitHub employees work in the San Francisco area, and yet we have no office. But we&amp;#8217;re not totally virtual either. In fact, a couple times a week you&amp;#8217;ll find us at a cafe in North Beach, huddled around a square table that was made by nailing 2&amp;#215;4s to an ancient fold-out bulletin board. It&amp;#8217;s no Google campus, but the rent is a hell of a lot cheaper and the drinks are just as good!&lt;/p&gt;
&lt;p&gt;This is not to say that we haven&amp;#8217;t looked at a few places to call home. Hell, we almost leased an old bar. But in the end there&amp;#8217;s no hurry to settle down. We&amp;#8217;re going to wait until we find the perfect office. Until then, we can invest the savings back into the company, or into our pockets. For now, I like my couch and the cafe just fine.&lt;/p&gt;
&lt;p&gt;Of course, none of this would be possible without 37signals&amp;#8217; &lt;a href=&quot;http://www.campfirenow.com/&quot;&gt;Campfire&lt;/a&gt; web-based chat and the very-difficult-to-find-but-totally-amazing &lt;a href=&quot;http://productblog.37signals.com/products/2008/10/propane-takes-c.html&quot;&gt;Propane&lt;/a&gt; &lt;span class=&quot;caps&quot;&gt;OSX&lt;/span&gt; desktop app container that doubles the awesome. Both highly recommended.&lt;/p&gt;
&lt;h2&gt;Hire Through Open Source&lt;/h2&gt;
&lt;p&gt;Beyond the three cofounders of GitHub, we&amp;#8217;ve hired one full time developer (Scott Chacon) and one part time support specialist (Tekkub).&lt;/p&gt;
&lt;p&gt;We hired Tekkub because he was one of the earliest GitHub users and actively maintains more than 75 projects (WoW addons mostly) on GitHub and was very active in sending us feedback in the early days. He would even help people out in the &lt;span class=&quot;caps&quot;&gt;IRC&lt;/span&gt; channel, simply because he enjoyed doing so.&lt;/p&gt;
&lt;p&gt;I met Scott at one of the San Francisco Ruby meetups where he was presenting on one of his myriad Git-centric projects. Scott had been working with Git long before anyone else in the room. He was also working on a pure Ruby implementation of Git at the same time I was working on my fork/exec based Git bindings. It was clear to me then that depending on how things went down, he could become either a powerful ally or a dangerous foe. Luckily, we all went drinking afterwards and we became friends. Not long after, Scott started consulting for us and wrote the entire backend for what you now know of as &lt;a href=&quot;http://gist.github.com/&quot;&gt;Gist&lt;/a&gt;. We knew then that we would do whatever it took to hire Scott full time. There would be no need for an interview or references. We already knew everything we needed to know in order to make him an offer without the slightest reservation.&lt;/p&gt;
&lt;p&gt;The lesson here is that it&amp;#8217;s far easier and less risky to hire based on relevant past performance than it is to hire based on projected future performance. There&amp;#8217;s a corollary that also comes into play: if you&amp;#8217;re looking to work for a startup (or anyone for that matter), contribute to the community that surrounds it. Use your time and your code to prove that you&amp;#8217;re the best one for the job.&lt;/p&gt;
&lt;h2&gt;Trust your Team&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s nothing I hate more than micromanagers. When I was doing graphic design consulting 5 years ago I had a client that was very near the Platonic form of a micromanager. He insisted that I travel to his office where I would sit in the back room at an old Mac and design labels and catalogs and touch up photographs of swimwear models (that part was not so bad!). While I did these tasks he would hover over me and bark instructions. &amp;#8220;Too red! Can you make that text smaller? Get rid of those blemishes right there!&amp;#8221; It drove me absolutely batty.&lt;/p&gt;
&lt;p&gt;This client could have just as easily given me the task at the beginning of the day, gone and run the business, and come back in 6 hours whereupon I would have created better designs twice as fast as if he were treating me like a robot that converted his speech into Photoshop manipulations. By treating me this way, he was marginalizing my design skills and wasting both money and talent.&lt;/p&gt;
&lt;p&gt;Micromanagement is symptomatic of a lack of trust. The remedy for this ailment is to hire experts and then trust their judgment. In a startup, you can drastically reduce momentum by applying micromanagement, or you can boost momentum by giving trust. It&amp;#8217;s pretty amazing what can happen when a group of talented people who trust each other get together and decide to make something awesome.&lt;/p&gt;
&lt;h2&gt;You Don&amp;#8217;t Need Venture Capital&lt;/h2&gt;
&lt;p&gt;A lot has been written recently about how the venture capital world is changing. I don&amp;#8217;t pretend to be an expert on the subject, but I&amp;#8217;ve learned enough to say that a web startup like ours doesn&amp;#8217;t need any outside money to succeed. I know this because we haven&amp;#8217;t taken a single dime from investors. We bootstrapped the company on a few thousand dollars and became profitable the day we opened to the public and started charging for subscriptions.&lt;/p&gt;
&lt;p&gt;In the end, every startup is different, and the only person that can decide if outside money makes sense is you. There are a million things that could drive you to seek and accept investment, but you should make sure that doing so is in your best interest, because it&amp;#8217;s quite possible that you don&amp;#8217;t &lt;em&gt;need&lt;/em&gt; to do so. One of the reasons I left my last job was so that I could say &amp;#8220;the buck stops here.&amp;#8221; If we&amp;#8217;d taken money, I would no longer be able to say that.&lt;/p&gt;
&lt;h2&gt;Open Source Whatever You Can&lt;/h2&gt;
&lt;p&gt;In order for GitHub to talk to Git repositories, I created the first ever Ruby Git bindings. Eventually, this library become quite complete and we were faced with a choice: Do we open source it or keep it to ourselves? Both approaches have benefits and drawbacks. Keeping it private means that the hurdle for competing Ruby-based Git hosting sites would be higher, giving us an advantage. But open sourcing it would mean that&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span class=&quot;caps&quot;&gt;NOTE&lt;/span&gt;: This is where the post ended and remained frozen in carbonite until today. I intend to write a follow up post on our open source philosophy at GitHub in the near future. I&amp;#8217;m sure the suspense is killing you!&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=2384320&quot;&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Designer, Architect, Developer</title>
   <link href="http://tom.preston-werner.com/2010/12/11/designer-architect-developer.html"/>
   <updated>2010-12-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2010/12/11/designer-architect-developer</id>
   <content type="html">&lt;h1&gt;Designer, Architect, Developer&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;11 Dec 2010 - San Francisco&lt;/p&gt;


&lt;p&gt;Over the last six years I’ve bootstrapped three successful enterprises (Cube6 Media, Gravatar, and GitHub) and failed to gain traction with a handful of others. After a lot of thought and reflections on these experiences, I’ve identified three major skills that should be present in order to best build a successful web application. These roles can be loosely defined as the Designer, the Architect, and the Developer.&lt;/p&gt;

&lt;p&gt;In college I spent a lot of time in the campus dark room dipping rolls of film and sheets of paper into various chemical baths beneath a dim red light. The most interesting part, though, was mounting the negative into the projector and exposing the photo paper. Every time I turned on the bright light of the projector I was reminded of a saying that has stuck with me ever since: “A photograph is nothing more than an image created by light.” Think about that for a second. The only way the photograph, and hence, the viewer, interact with the original subject is via the light that was captured. None of the fancy flashes, soft boxes, bounces, umbrellas, or backdrops mean a thing if the light they produce or redirect is in the wrong place. If the light is bad, the photograph is bad.&lt;/p&gt;

&lt;p&gt;I think the same concept holds true for web applications. Adapting the saying for our own situation, I would say: “A web application is nothing more than an experience created by design.” Users can’t see what technology you use or whether you follow an agile development process or not. All they experience is what’s on the screen. It can’t be confusing, it can’t look amateur, and it can’t have spelling errors. If the UX is bad, the web application is bad. It’s that simple.&lt;/p&gt;

&lt;p&gt;The way you get good UX is by having a good designer. Someone on the team must be skilled not only in making things pretty, but in making them usable as well. Without a good UX/visual design, you may as well not even bother. It’s impossible to stress how important this is.&lt;/p&gt;

&lt;p&gt;Design comes first. It defines what you will build. Once you have an idea of what you’re creating, you need to figure out how to make it happen. That’s where the Architect comes in.&lt;/p&gt;

&lt;p&gt;With the recent explosion of open source solutions to common problems like databases, web frameworks, job processors, messaging systems, etc, you need a team member that has a broad understanding of the technology landscape. The choices you make early on will impact your company for many years, and the wrong choices can spell disaster. The role of the Architect is to choose the best tools for the job, and to decide when new tools need to be created.&lt;/p&gt;

&lt;p&gt;The Architect must also be ready to scale any piece of the site when you start attracting users. There’s a fine line between premature optimization and crumbling under the wave of thousands of new signups. A good architect will always be one step ahead of the curve, laying the groundwork for future scaling needs just before they are needed.&lt;/p&gt;

&lt;p&gt;Design and architecture dictate what you build and how you build it, but without someone to do the construction, you’re dead in the water. The role of the Developer is to turn the wishes of the Designer into reality while staying within the constraints that the Architect has put forth. In addition, the Developer has to ensure that the codebase remains healthy and protect against technical debt. Sloppy development up front means a huge amount of wasted effort later on.&lt;/p&gt;

&lt;p&gt;The three roles of the Designer, the Architect, and the Developer may reside in a single person, but it’s much more common to see groups of two or three people satisfy all these skills. In fact, the best founding teams are those where everyone fills some combination of roles. This fosters an environment of friendly argument that leads to better decisions.&lt;/p&gt;

&lt;p&gt;But whatever you do, make sure your team fills all of these roles. Once you do, executing on your idea should come easily!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Optimize for Happiness</title>
   <link href="http://tom.preston-werner.com/2010/10/18/optimize-for-happiness.html"/>
   <updated>2010-10-18T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2010/10/18/optimize-for-happiness</id>
   <content type="html">&lt;h1&gt;Optimize for Happiness&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;18 October 2010 - San Francisco&lt;/p&gt;


&lt;p&gt;Two days ago I had the pleasure of speaking at Startup School, a yearly conference on entrepreneurism put on by the great folks at Y Combinator. Never before have I see such a high concentration of smart ambitious people in one place.&lt;/p&gt;

&lt;p&gt;You can watch the recording of my thirty minute slot courtesy of Justin.tv:&lt;/p&gt;

&lt;center&gt;&lt;a href=&quot;http://www.justin.tv/startupschool/b/272031754&quot;&gt;&lt;img src=&quot;http://img.skitch.com/20101018-p9ux9isde8m64ht8wertuytxfd.jpg&quot; /&gt;&lt;/a&gt;&lt;/center&gt;


&lt;p&gt;Since I only had about 25 minutes for the talk and 5 minutes for questions, I wanted to expand upon and clarify some of the ideas I introduced during the talk and then make myself available for additional questions. So today (Monday, 18 October 2010) I&#39;ll be answering any questions you have via Hacker News:&lt;/p&gt;

&lt;center&gt;&lt;b&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1804443&quot;&gt;Ask me a question on HN!&lt;/a&gt;&lt;/b&gt;&lt;/center&gt;


&lt;p&gt;The very first commit to GitHub was made exactly three years ago tomorrow. In that time our team of thirteen has signed up over 420,000 developers and now hosts 1.3 million Git repositories, making us the largest code host on the planet. And we&#39;ve done all of this without ever taking a dime of funding from outside the company. In fact, even within the company we only invested a few thousand dollars out of our own pockets during the first months to cover legal fees.&lt;/p&gt;

&lt;p&gt;During the presentation I talk about a choice between optimizing for happiness and optimizing for money. When I say &quot;optimizing for money&quot; I mean following the traditional venture capital route of raising a ton of money to stash in your bank account and going for a huge exit. The unfortunate reality of this approach is that for aspiring entrepreneurs that are not well connected to the VC world, it can take an extraordinary amount of time and effort to raise that money. Even if you are able to raise capital, you are suddenly responsible to your investors and will need to align your interests with theirs.&lt;/p&gt;

&lt;p&gt;In a world dominated by news about Facebook, Apple, Google, YouTube, Zappos, and other companies heavily funded by venture capital, it&#39;s easy to forget that you can still build a highly profitable business with significant impact on a global market without having to first spend three months on Sand Hill Road asking for permission to build your product.&lt;/p&gt;

&lt;p&gt;The infrastructure components necessary to run an internet business are finally cheap enough that you can get started without a huge up-front investment. In the months that you would traditionally spend in glass-walled conference rooms you can now build a sophisticated prototype of your product and start getting users signed up and engaging you with useful feedback.&lt;/p&gt;

&lt;p&gt;This is what I mean by optimizing for happiness: I&#39;m a hacker; I&#39;m happy when I&#39;m building things of value, not when I&#39;m writing a business plan filled with make believe numbers.&lt;/p&gt;

&lt;p&gt;When Chris and I started GitHub, I was working full time at Powerset and Chris was doing consulting work and plugging away on a product of his own. GitHub became the leisure activity that I worked on when I got home from the office. I could craft it however I pleased, and there was nobody telling me what to do. This feeling of control and ownership of something you own is intoxicating.&lt;/p&gt;

&lt;p&gt;Within three months we had a simple product and moved into private beta. In six months we launched to the public and started charging for private plans. We&#39;ve been profitable every month since public launch except for one (in which we hired two new employees at once). We did this by making a paycheck via other means until GitHub was generating enough revenue to support us full time at about 2/3 of what we were accustomed to making. We then raised our salaries over the next months when we hit specific revenue goals that allowed us to remain profitable. This happened about one year after inception.&lt;/p&gt;

&lt;p&gt;A side effect of bootstrapping a sustainable company is what I like to call &lt;b&gt;infinite runway.&lt;/b&gt; This is another element of optimizing for happiness. With venture backed endeavors you generally find that during the first several years the numbers in your bank account are perpetually decreasing, giving your company an expiration date. Your VCs have encouraged you to grow fast and spend hard, which makes perfect sense for them, but not necessary for you. Not if you&#39;re trying to optimize for happiness.&lt;/p&gt;

&lt;p&gt;VCs want to see quick success or quick failure. They are optimizing for money. There&#39;s nothing wrong with that as long as you want the same things they do. But if you&#39;re like me, then you care more about building a kickass product than you do about having a ten figure exit. If that&#39;s true, then maybe you should be optimizing for happiness. One way to do this is by bootstrapping a sustainable business with infinite runway. When there are fewer potentially catastrophic events on the horizon, you&#39;ll find yourself smiling a lot more often.&lt;/p&gt;

&lt;p&gt;The ironic thing about bootstrapping and venture capital is that once you demonstrate some success, investors will come to YOU. When this happens you will be in a much better place to make a more reasoned choice about taking on additional capital and all the complexities that come with it. Talking to VCs with some leverage in your back pocket is an entirely different game from throwing yourself in front of a conference table full of general partners and trying to persuade them that you&#39;re worth their time and money. Power is happiness.&lt;/p&gt;

&lt;p&gt;There are other really great things you can do when you optimize for happiness. You can throw away things like financial projections, hard deadlines, ineffective executives that make investors feel safe, and everything that hinders your employees from building amazing products.&lt;/p&gt;

&lt;p&gt;At GitHub we don&#39;t have meetings. We don&#39;t have set work hours or even work days. We don&#39;t keep track of vacation or sick days. We don&#39;t have managers or an org chart. We don&#39;t have a dress code. We don&#39;t have expense account audits or an HR department.&lt;/p&gt;

&lt;p&gt;We pay our employees well and give them the tools they need to do their jobs as efficiently as possible. We let them decide what they want to work on and what features are best for the customers. We pay for them to attend any conference at which they&#39;ve gotten a speaking slot. If it&#39;s in a foreign country, we pay for another employee to accompany them because traveling alone sucks. We show them the profit and loss statements every month. We expect them to be responsible.&lt;/p&gt;

&lt;p&gt;We make decisions based on the merits of the arguments, not on who is making them. We strive every day to be better than we were the day before.&lt;/p&gt;

&lt;p&gt;We hold our board meetings in bars.&lt;/p&gt;

&lt;p&gt;We do all this because we&#39;re optimizing for happiness, and because there&#39;s nobody to tell us that we can&#39;t.&lt;/p&gt;

&lt;center&gt;&lt;b&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1804443&quot;&gt;Ask me a question on HN!&lt;/a&gt;&lt;/b&gt;&lt;/center&gt;

</content>
 </entry>
 
 <entry>
   <title>Readme Driven Development</title>
   <link href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html"/>
   <updated>2010-08-23T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2010/08/23/readme-driven-development</id>
   <content type="html">&lt;h1&gt;Readme Driven Development&lt;/h1&gt;

&lt;p class=&quot;meta&quot;&gt;23 August 2010 - San Francisco&lt;/p&gt;


&lt;p&gt;I hear a lot of talk these days about TDD and BDD and Extreme Programming and SCRUM and stand up meetings and all kinds of methodologies and techniques for developing better software, but it&#39;s all irrelevant unless the software we&#39;re building meets the needs of those that are using it. Let me put that another way. A perfect implementation of the wrong specification is worthless. By the same principle a beautifully crafted library with no documentation is also damn near worthless. If your software solves the wrong problem or nobody can figure out how to use it, there&#39;s something very bad going on.&lt;/p&gt;

&lt;p&gt;Fine. So how do we solve this problem? It&#39;s easier than you think, and it&#39;s important enough to warrant its very own paragraph.&lt;/p&gt;

&lt;p&gt;Write your Readme first.&lt;/p&gt;

&lt;p&gt;First. As in, before you write any code or tests or behaviors or stories or ANYTHING. I know, I know, we&#39;re programmers, dammit, not tech writers! But that&#39;s where you&#39;re wrong. Writing a Readme is absolutely essential to writing good software. Until you&#39;ve written about your software, you have no idea what you&#39;ll be coding. Between The Great Backlash Against Waterfall Design and The Supreme Acceptance of Agile Development, something was lost. Don&#39;t get me wrong, waterfall design takes things way too far. Huge systems specified in minute detail end up being the WRONG systems specified in minute detail. We were right to strike it down. But what took its place is too far in the other direction. Now we have projects with short, badly written, or entirely missing documentation. Some projects don&#39;t even have a Readme!&lt;/p&gt;

&lt;p&gt;This is not acceptable. There must be some middle ground between reams of technical specifications and no specifications at all. And in fact there is. That middle ground is the humble Readme.&lt;/p&gt;

&lt;p&gt;It&#39;s important to distinguish Readme Driven Development from Documentation Driven Development. RDD could be considered a subset or limited version of DDD. By restricting your design documentation to a single file that is intended to be read as an introduction to your software, RDD keeps you safe from DDD-turned-waterfall syndrome by punishing you for lengthy or overprecise specification. At the same time, it rewards you for keeping libraries small and modularized. These simple reinforcements go a long way towards driving your project in the right direction without a lot of process to ensure you do the right thing.&lt;/p&gt;

&lt;p&gt;By writing your Readme first you give yourself some pretty significant advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Most importantly, you&#39;re giving yourself a chance to think through the project without the overhead of having to change code every time you change your mind about how something should be organized or what should be included in the Public API. Remember that feeling when you first started writing automated code tests and realized that you caught all kinds of errors that would have otherwise snuck into your codebase? That&#39;s the exact same feeling you&#39;ll have if you write the Readme for your project before you write the actual code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a byproduct of writing a Readme in order to know what you need to implement, you&#39;ll have a very nice piece of documentation sitting in front of you. You&#39;ll also find that it&#39;s much easier to write this document at the beginning of the project when your excitement and motivation are at their highest. Retroactively writing a Readme is an absolute drag, and you&#39;re sure to miss all kinds of important details when you do so.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you&#39;re working with a team of developers you get even more mileage out of your Readme. If everyone else on the team has access to this information before you&#39;ve completed the project, then they can confidently start work on other projects that will interface with your code. Without any sort of defined interface, you have to code in serial or face reimplementing large portions of code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It&#39;s a lot simpler to have a discussion based on something written down. It&#39;s easy to talk endlessly and in circles about a problem if nothing is ever put to text. The simple act of writing down a proposed solution means everyone has a concrete idea that can be argued about and iterated upon.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Consider the process of writing the Readme for your project as the true act of creation. This is where all your brilliant ideas should be expressed. This document should stand on its own as a testament to your creativity and expressiveness. The Readme should be the single most important document in your codebase; writing it first is the proper thing to do.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1627246&quot;&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TomDoc - Reasonable Ruby Documentation</title>
   <link href="http://tom.preston-werner.com/2010/05/11/tomdoc-reasonable-ruby-documentation.html"/>
   <updated>2010-05-11T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2010/05/11/tomdoc-reasonable-ruby-documentation</id>
   <content type="html">&lt;h1&gt;TomDoc &amp;#8211; Reasonable Ruby Documentation&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;11 May 2010 &amp;#8211; San Francisco&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://rdoc.rubyforge.org&quot;&gt;RDoc&lt;/a&gt; is an abomination. It&amp;#8217;s ugly to read in plain text, requires the use of the inane :nodoc: tag to prevent private method documentation from showing up in final rendering, and does nothing to encourage complete or unambiguous documentation of classes, methods, or parameters. &lt;a href=&quot;http://yardoc.org&quot;&gt;&lt;span class=&quot;caps&quot;&gt;YARD&lt;/span&gt;&lt;/a&gt; is much better but goes too far in the other direction (and still doesn&amp;#8217;t look good in plain text). Providing an explicit way to specify parameters and types is great, but having to remember a bunch of strict tag names in order to be compliant is not a good way to encourage coders to write documentation. And again we see a @private tag that&amp;#8217;s necessary to hide docs from the final render.&lt;/p&gt;
&lt;p&gt;Three years ago, after suffering with these existing documentation formats for far too long, I started using my own documentation format. It looked a bit like RDoc but had a set of conventions for specifying parameters, return values, and the expected types. It used plain language and full sentences so that a human could read and understand it without having to parse machine-oriented tags or crufty markup. I called this format TomDoc, because if Linus can name stuff after himself, then why can&amp;#8217;t I?&lt;/p&gt;
&lt;p&gt;After years in the making, TomDoc is finally a well specified documentation format. You can find the full spec at &lt;a href=&quot;http://tomdoc.org&quot;&gt;http://tomdoc.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But enough talk. Here&amp;#8217;s a sample of what a TomDoc&amp;#8217;d method might look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Public: Duplicate some text an abitrary number of times.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# text  - The String to be duplicated.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# count - The Integer number of times to duplicate the text.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Examples&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   multiplex(&amp;#39;Tom&amp;#39;, 4)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   # =&amp;gt; &amp;#39;TomTomTomTom&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Returns the duplicated String.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;multiplex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At first glance you&amp;#8217;ll notice a few things. First, and most important, is that the documentation looks nice in plain text. When I&amp;#8217;m working on a project, I need to be able to scan and read method documentation quickly. Littering the docs with tags and markup (especially &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; markup) is not acceptable. Code documentation should be optimized for human consumption. Second, all parameters and return values, and their expected types are specified. Types are generally denoted by class name. Because Ruby is so flexible, you are not constrained by a rigid type declaration syntax and are free to explain precisely how the expected types may vary under different circumstances. Finally, the basic layout is designed to be easy to remember. Once you commit a few simple conventions to memory, writing documentation becomes second nature, with all of the tricky decision making already done for you.&lt;/p&gt;
&lt;p&gt;Today&amp;#8217;s Ruby libraries suffer deeply from haphazard versioning schemes. Even RubyGems itself does not follow a sane or predictable versioning pattern. This lack of discipline stems from the absence of well defined Public APIs. TomDoc attempts to solve this problem by making it simple to define an unambiguous Public &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; for your library. Instead of assuming that all classes and methods are intended for public consumption, TomDoc makes the Public &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; opt-in. To denote that something is public, all you have to do is preface the main description with &amp;#8220;Public:&amp;#8221;. By forcing you to explicitly state that a class or method is intended for public consumption, a deliberate and thoughtful Public &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; is automatically constructed that can inform disciplined version changes according to the tenets of &lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt;. In addition, the prominent display of &amp;#8220;Public&amp;#8221; in a method description ensures that developers are made aware of the sensitive nature of the method and do not carelessly change the signature of something in the Public &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Once a Public &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; has been established, some very exciting things become possible. We&amp;#8217;re currently working on a processing tool that will render TomDoc into various forms (terminal, &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt;, etc). If you run this tool on a library, you&amp;#8217;ll get a printout of the Public &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; documentation. You can publish this online so that others have easy access to it. When you roll a new version of the library, you can run the tool again, giving it a prior version as a base, and have it automatically display only the methods that have changed. This diff will be extremely useful for users while they upgrade to the new version (or so they can evaluate whether an upgrade is warranted)!&lt;/p&gt;
&lt;p&gt;While I&amp;#8217;ve been using various nascent forms of TomDoc for several years, we&amp;#8217;re just now starting to adopt it for everything we do at GitHub. Now that I&amp;#8217;ve formalized the spec it will be easy for the entire team to write compliant TomDoc. The goal is to have every class, method, and accessor of every GitHub library documented. In the future, once we have proper tooling, we&amp;#8217;d even like to create a unit test that will fail if anything is missing documentation.&lt;/p&gt;
&lt;p&gt;TomDoc is still a rough specification so I&amp;#8217;m initially releasing it as 0.9.0. Over the coming months I&amp;#8217;ll make any necessary changes to address user concerns and release a 1.0.0 version once things have stabilized. If you&amp;#8217;d like to suggest changes, please open an issue on the &lt;a href=&quot;http://github.com/mojombo/tomdoc&quot;&gt;TomDoc GitHub repository&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Git Parable</title>
   <link href="http://tom.preston-werner.com/2009/05/19/the-git-parable.html"/>
   <updated>2009-05-19T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2009/05/19/the-git-parable</id>
   <content type="html">&lt;h1&gt;The Git Parable&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;19 May 2009 &amp;#8211; San Francisco&lt;/p&gt;
&lt;p&gt;Git is a simple, but extremely powerful system. Most people try to teach Git by demonstrating a few dozen commands and then yelling &amp;#8220;tadaaaaa.&amp;#8221; I believe this method is flawed. Such a treatment may leave you with the ability to use Git to perform simple tasks, but the Git commands will still feel like magical incantations. Doing anything out of the ordinary will be terrifying. Until you understand the concepts upon which Git is built, you&amp;#8217;ll feel like a stranger in a foreign land.&lt;/p&gt;
&lt;p&gt;The following parable will take you on a journey through the creation of a Git-like system from the ground up. Understanding the concepts presented here will be the most valuable thing you can do to prepare yourself to harness the full power of Git. The concepts themselves are quite simple, but allow for an amazing wealth of functionality to spring into existence. Read this parable all the way through and you should have very little trouble mastering the various Git commands and wielding the awesome power that Git makes available to you.&lt;/p&gt;
&lt;h2&gt;The Parable&lt;/h2&gt;
&lt;p&gt;Imagine that you have a computer that has nothing on it but a text editor and a few file system commands. Now imagine that you have decided to write a large software program on this system. Because you&amp;#8217;re a responsible software developer, you decide that you need to invent some sort of method for keeping track of versions of your software so that you can retrieve code that you previously changed or deleted. What follows is a story about how you might design one such version control system (&lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt;) and the reasoning behind those design choices.&lt;/p&gt;
&lt;h2&gt;Snapshots&lt;/h2&gt;
&lt;p&gt;Alfred is a friend of yours that works down at the mall as a photographer in one of those &amp;#8220;Special Moments&amp;#8221; photo boutiques. All day long he takes photos of little kids posing awkwardly in front of jungle or ocean backdrops. During one of your frequent lunches at the pretzel stand, Alfred tells you a story about a woman named Hazel who brings her daughter in for a portrait every year on the same day. &amp;#8220;She brings the photos from all the past years with her,&amp;#8221; Alfred tells you. &amp;#8220;She likes to remember what her daughter was like at each different stage, as if the snapshots really let her move back and forth in time to those saved memories.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Like some sort of formulaic plot device, Alfred&amp;#8217;s innocent statement acts as a catalyst for you to see the ideal solution to your version control dilemma. Snapshots, like save points in a video game, are really what you care about when you need to interact with a &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt;. What if you could take snapshots of your codebase at any time and resurrect that code on demand? Alfred reads the dawning realization spreading across your face and knows you&amp;#8217;re about to leave him without another word to go back and implement whatever genius idea he just caused you to have. You do not disappoint him.&lt;/p&gt;
&lt;p&gt;You start your project in a directory named &lt;code&gt;working&lt;/code&gt;. As you code, you try to write one feature at a time. When you complete a self-contained portion of a feature, you make sure that all your files are saved and then make a copy of the entire working directory, giving it the name &lt;code&gt;snapshot-0&lt;/code&gt;. After you perform this copy operation, you make sure to never again change the code files in the new directory. After the next chunk of work, you perform another copy, only this time the new directory gets the name &lt;code&gt;snapshot-1&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;To make it easy to remember what changes you made in each snapshot, you add a special file named &lt;code&gt;message&lt;/code&gt; to each snapshot directory that contains a summary of the work that you did and the date of completion. By printing the contents of each message, it becomes easy to find a specific change that you made in the past, in case you need to resurrect some old code.&lt;/p&gt;
&lt;h2&gt;Branches&lt;/h2&gt;
&lt;p&gt;After a bit of time on the project, a candidate for release begins to emerge. Late nights at the keyboard finally yield &lt;code&gt;snapshot-99&lt;/code&gt;, the nascent form of what will become Release Version 1.0. It comes to pass that this snapshot is packaged and distributed to the eagerly awaiting masses. Stoked by excellent response to your software, you push forward, determined to make the next version an even bigger success.&lt;/p&gt;
&lt;p&gt;Your &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt; has so far been a faithful companion. Old versions of your code are there when you need them and can be accessed with ease. But not long after the release, bug reports start to come in. Nobody&amp;#8217;s perfect, you reassure yourself, and &lt;code&gt;snapshot-99&lt;/code&gt; is readily retrievable, glad to be brought back to life for the purposes of applying bug fixes.&lt;/p&gt;
&lt;p&gt;Since the release, you&amp;#8217;ve created 10 new snapshots. This new work must not be included in the 1.0.1 bug fix version you now need to create. To solve this, you copy &lt;code&gt;snapshot-99&lt;/code&gt; to &lt;code&gt;working&lt;/code&gt; so that your working directory is at exactly the point where Version 1.0 was released. A few swift lines of code and the bug is fixed in the working directory.&lt;/p&gt;
&lt;p&gt;It is here that a problem becomes apparent. The &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt; deals very well with linear development, but for the first time ever, you need to create a new snapshot that is not a direct descendent of the preceding snapshot. If you create a &lt;code&gt;snapshot-110&lt;/code&gt; (remember that you created 10 snapshots since the release), then you&amp;#8217;ll be interrupting the linear flow and will have no way of determining the ancestry of any given snapshot. Clearly, you need something more powerful than a linear system.&lt;/p&gt;
&lt;p&gt;Studies show that even short exposures to nature can help recharge the mind&amp;#8217;s creative potential. You&amp;#8217;ve been sitting behind the artificially polarized light of your monitor for days on end. A walk through the woods in the brisk Autumn air will do you some good and with any luck, will help you arrive at an ideal solution to your problem.&lt;/p&gt;
&lt;p&gt;The great oaks that line the trail have always appealed to you. They seem to stand stark and proud against the perfectly blue sky. Half the ruddy leaves have departed from their branches, leaving an intricate pattern of branches in their wake. Fixating on one of the thousands of branch tips you idly try to follow it back to the solitary trunk. This organically produced structure allows for such great complexity, but the rules for finding your way back to the trunk are so simple, and perfect for keeping track of multiple lines of development! It turns out that what they say about nature and creativity are true.&lt;/p&gt;
&lt;p&gt;By looking at your code history as a tree, solving the problem of ancestry becomes trivial. All you need to do is include the name of the parent snapshot in the &lt;code&gt;message&lt;/code&gt; file you write for each snapshot. Adding just a single upstream pointer will enable you to easily and accurately trace the history of any given snapshot all the way back to the root.&lt;/p&gt;
&lt;h2&gt;Branch Names&lt;/h2&gt;
&lt;p&gt;Your code history is now a tree. Instead of having a single latest snapshot, you have two: one for each branch. With a linear system, your sequential numbering system let you easily identify the latest snapshot. Now, that ability is lost.&lt;/p&gt;
&lt;p&gt;Creating new development branches has become so simple that you&amp;#8217;ll want to take advantage of it all the time. You&amp;#8217;ll be creating branches for fixes to old releases, for experiments that may not pan out; indeed it becomes possible to create a new branch for every feature you begin!&lt;/p&gt;
&lt;p&gt;But like everything good in life, there is a price to be paid. Each time you create a new snapshot, you must remember that the new snapshot becomes the latest on its branch. Without this information, switching to a new branch would become a laborious process indeed.&lt;/p&gt;
&lt;p&gt;Every time you create a new branch you probably give it a name in your head. &amp;#8220;This will be the Version 1.0 Maintenance Branch,&amp;#8221; you might say. Perhaps you refer to the former linear branch as the &amp;#8220;master&amp;#8221; branch.&lt;/p&gt;
&lt;p&gt;Think about this a little further, though. From the perspective of a tree, what does it mean to name a branch? Naming every snapshot that appears in the history of a branch would do the trick, but requires the storage of a potentially large amount of data. Additionally, it still wouldn&amp;#8217;t help you efficiently locate the latest snapshot on a branch.&lt;/p&gt;
&lt;p&gt;The least amount of information necessary to identify a branch is the location of the latest snapshot on that branch. If you need to know the list of snapshots that are part of the branch you can easily trace the parentage.&lt;/p&gt;
&lt;p&gt;Storing the branch names is trivial. In a file named &lt;code&gt;branches&lt;/code&gt;, stored outside of any specific snapshot, you simply list the name/snapshot pairs that represent the tips of branches. To switch to a named branch you need only look up the snapshot for the corresponding name from this file.&lt;/p&gt;
&lt;p&gt;Because you&amp;#8217;re only storing the latest snapshot on each branch, creating a new snapshot now contains an additional step. If the new snapshot is being created as part of a branch, the &lt;code&gt;branches&lt;/code&gt; file must be updated so that the name of the branch becomes associated with the new snapshot. A small price to pay for the benefit.&lt;/p&gt;
&lt;h2&gt;Tags&lt;/h2&gt;
&lt;p&gt;After using branches for a while you notice that they can serve two purposes. First, they can act as movable pointers to snapshots so that you can keep track of the branch tips. Second, they can be pointed at a single snapshot and never move.&lt;/p&gt;
&lt;p&gt;The first use case allows you to keep track of ongoing development, things like &amp;#8220;Release Maintenance&amp;#8221;. The second case is useful for labeling points of interest, like &amp;#8220;Version 1.0&amp;#8221; and &amp;#8220;Version 1.0.1&amp;#8221;.&lt;/p&gt;
&lt;p&gt;Mixing both of these uses into a single file feels messy. Both types are pointers to snapshots, but one moves and one doesn&amp;#8217;t. For the sake of clarity and elegance, you decide to create another file called &lt;code&gt;tags&lt;/code&gt; to contain pointers of the second type.&lt;/p&gt;
&lt;p&gt;Keeping these two inherently different pointers in separate files will help you from accidentally treating a branch as a tag or vice versa.&lt;/p&gt;
&lt;h2&gt;Distributed&lt;/h2&gt;
&lt;p&gt;Working on your own gets pretty lonely. Wouldn&amp;#8217;t it be nice if you could invite a friend to work on your project with you? Well, you&amp;#8217;re in luck. Your friend Zoe has a computer setup just like yours and wants to help with the project. Because you&amp;#8217;ve created such a great version control system, you tell her all about it and send her a copy of all your snapshots, branches, and tags so she can enjoy the same benefits of the code history.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s great to have Zoe on the team but she has a habit of taking long trips to far away places without internet access. As soon as she has the source code, she catches a flight to Patagonia and you don&amp;#8217;t hear from her for a week. In the meantime you both code up a storm. When she finally gets back, you discover a critical flaw in your &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt;. Because you&amp;#8217;ve both been using the same numbering system, you each have directories named &amp;#8216;snapshot-114&amp;#8217;, &amp;#8216;snapshot-115&amp;#8217;, and so on, but with different contents!&lt;/p&gt;
&lt;p&gt;To make matters worse, you don&amp;#8217;t even know who authored the changes in those new snapshots. Together, you devise a plan for dealing with these problems. First, snapshot messages will henceforth contain author name and email. Second, snapshots will no longer be named with simple numbers. Instead, you&amp;#8217;ll use the contents of the message file to produce a hash. This hash will be guaranteed to be unique to the snapshot since no two messages will ever have the same date, message, parent, and author. To make sure everything goes smoothly, you both agree to use the SHA1 hash algorithm that takes the contents of a file and produces a 40 character hexadecimal string. You both update your histories with the new technique and instead of clashing &amp;#8216;snapshot-114&amp;#8217; directories, you now have distinct directories named &amp;#8216;8ba3441b6b89cad23387ee875f2ae55069291f4b&amp;#8217; and &amp;#8216;db9ecb5b5a6294a8733503ab57577db96ff2249e&amp;#8217;.&lt;/p&gt;
&lt;p&gt;With the updated naming scheme, it becomes trivial for you to fetch all the new snapshots from Zoe&amp;#8217;s computer and place them next to your existing snapshots. Because every snapshot specifies its parent, and identical messages (and therefor identical snapshots) have identical names no matter where they are created, the history of the codebase can still be drawn as a tree. Only now, the tree is comprised of snapshots authored by both Zoe and you.&lt;/p&gt;
&lt;p&gt;This point is important enough to warrant repeating. A snapshot is identified by a SHA1 that uniquely identifies it (and its parent). These snapshots can be created and moved around between computers without losing their identity or where they belong in the history tree of a project. What&amp;#8217;s more, snapshots can be shared or kept private as you see fit. If you have some experimental snapshots that you want to keep to yourself, you can do so quite easily. Just don&amp;#8217;t make them available to Zoe!&lt;/p&gt;
&lt;h2&gt;Offline&lt;/h2&gt;
&lt;p&gt;Zoe&amp;#8217;s travel habits cause her to spend countless hours on airplanes and boats. Most of the places she visits have no readily available internet access. At the end of the day, she spends more time offline than online.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s no surprise, then, that Zoe raves about your &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt;. All of the day to day operations that she needs to do can be done locally. The only time she needs a network connection is when she&amp;#8217;s ready to share her snapshots with you.&lt;/p&gt;
&lt;h2&gt;Merges&lt;/h2&gt;
&lt;p&gt;Before Zoe left on her trip, you had asked her to start working off of the branch named &amp;#8216;math&amp;#8217; and to implement a function that generated prime numbers. Meanwhile, you were also developing off of the &amp;#8216;math&amp;#8217; branch, only you were writing a function to generate magic numbers. Now that Zoe has returned, you are faced with the task of merging these two separate branches of development into a single snapshot. Since you both worked on separate tasks, the merge is simple. While constructing the snapshot message for the merge, you realize that this snapshot is special. Instead of just a single parent, this merge snapshot has two parents! The first parent is your latest on the &amp;#8216;math&amp;#8217; branch and the second parent is Zoe&amp;#8217;s latest on her &amp;#8216;math&amp;#8217; branch. The merge snapshot doesn&amp;#8217;t contain any changes beyond those necessary to merge the two disparate parents into a single codebase.&lt;/p&gt;
&lt;p&gt;Once you complete the merge, Zoe fetches all the snapshots that you have that she does not, which include your development on the &amp;#8216;math&amp;#8217; branch and your merge snapshot. Once she does this, both of your histories match exactly!&lt;/p&gt;
&lt;h2&gt;Rewriting History&lt;/h2&gt;
&lt;p&gt;Like many software developers you have a compulsion to keep your code clean and very well organized. This carries over into a desire to keep your code history well groomed. Last night you came home after having a few too many pints of Guinness at the local brewpub and started coding, producing a handful of snapshots along the way. This morning, a review of the code you wrote last night makes you cringe a little bit. The code is good overall, but you made a lot of mistakes early on that you corrected in later snapshots.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s say the branch on which you did your drunken development is called &amp;#8216;drunk&amp;#8217; and you made three snapshots after you got home from the bar. If the name &amp;#8216;drunk&amp;#8217; points at the latest snapshot on that branch, then you can use a useful notation to refer to the parent of that snapshot. The notation &amp;#8216;drunk^&amp;#8217; means the parent of the snapshot pointed to by the branch name &amp;#8216;drunk&amp;#8217;. Similarly &amp;#8216;drunk^^&amp;#8217; means the grandparent of the &amp;#8216;drunk&amp;#8217; snapshot. So the three snapshots in chronological order are &amp;#8216;drunk^^&amp;#8217;, &amp;#8216;drunk^&amp;#8217;, and &amp;#8216;drunk&amp;#8217;.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;d really like those three lousy snapshots to be two clean snapshots. One that changes an existing function, and one that adds a new file. To accomplish this revision of history you copy &amp;#8216;drunk&amp;#8217; to &amp;#8216;working&amp;#8217; and delete the file that is new in the series. Now &amp;#8216;working&amp;#8217; represents the correct modifications to the existing function. You create a new snapshot from &amp;#8216;working&amp;#8217; and write the message to be appropriate to the changes. For the parent you specify the SHA1 of the &amp;#8216;drunk^^^&amp;#8217; snapshot, essentially creating a new branch off of the same snapshot as last night. Now you can copy &amp;#8216;drunk&amp;#8217; to &amp;#8216;working&amp;#8217; and roll a snapshot with the new file addition. As the parent you specify that snapshot you created just before this one.&lt;/p&gt;
&lt;p&gt;As the last step, you change the branch name &amp;#8216;drunk&amp;#8217; to point to the last snapshot you just made.&lt;/p&gt;
&lt;p&gt;The history of the &amp;#8216;drunk&amp;#8217; branch now represents a nicer version of what you did last night. The other snapshots that you&amp;#8217;ve replaced are no longer needed so you can delete them or just leave them around for posterity. No branch names are currently pointing at them so it will be hard to find them later on, but if you don&amp;#8217;t delete them, they&amp;#8217;ll stick around.&lt;/p&gt;
&lt;h2&gt;Staging Area&lt;/h2&gt;
&lt;p&gt;As much as you try to keep your new modifications related to a single feature or logical chunk, you sometimes get sidetracked and start hacking on something totally unrelated. Only half-way into this do you realize that your working directory now contains what should really be separated as two discrete snapshots.&lt;/p&gt;
&lt;p&gt;To help you with this annoying situation, the concept of a staging directory is useful. This area acts as an intermediate step between your working directory and a final snapshot. Each time you finish a snapshot, you also copy that to a &lt;code&gt;staging&lt;/code&gt; directory. Now, every time you finish an edit to a new file, create a new file, or remove a file, you can decide whether that change should be part of your next snapshot. If it belongs, you mimic the change inside &lt;code&gt;staging&lt;/code&gt;. If it doesn&amp;#8217;t, you can leave it in &lt;code&gt;working&lt;/code&gt; and make it part of a later snapshot. From now on, snapshots are created directly from the staging directory.&lt;/p&gt;
&lt;p&gt;This separation of coding and preparing the stage makes it easy to specify what is and is not included in the next snapshot. You no longer have to worry too much about making an accidental, unrelated change in your working directory.&lt;/p&gt;
&lt;p&gt;You have to be a bit careful, though. Consider a file named &lt;code&gt;README&lt;/code&gt;. You make an edit to this file and then mimic that in &lt;code&gt;staging&lt;/code&gt;. You go on about your business, editing other files. After a bit, you make another change to &lt;code&gt;README&lt;/code&gt;. Now you have made two changes to that file, but only one is in the staging area! Were you to create a snapshot now, your second change would be absent.&lt;/p&gt;
&lt;p&gt;The lesson is this: every new edit must be added to the staging area if it is to be part of the next snapshot.&lt;/p&gt;
&lt;h2&gt;Diffs&lt;/h2&gt;
&lt;p&gt;With a working directory, a staging area, and loads of snapshots laying around, it starts to get confusing as to what the specific code changes are between these directories. A snapshot message only gives you a summary of what changed, not exactly what lines were changed between two files.&lt;/p&gt;
&lt;p&gt;Using a diffing algorithm, you can implement a small program that shows you the differences in two codebases. As you develop and copy things from your working directory to the staging area, you&amp;#8217;ll want to easily see what is different between the two, so that you can determine what else needs to be staged. It&amp;#8217;s also important to see how the staging area is different from the last snapshot, since these changes are what will become part of the next snapshot you produce.&lt;/p&gt;
&lt;p&gt;There are many other diffs you might want to see. The differences between a specific snapshot and its parent would show you the &amp;#8220;changeset&amp;#8221; that was introduced by that snapshot. The diff between two branches would be helpful for making sure your development doesn&amp;#8217;t wander too far away from the mainline.&lt;/p&gt;
&lt;h2&gt;Eliminating Duplication&lt;/h2&gt;
&lt;p&gt;After a few more trips to Namibia, Istanbul, and Galapagos, Zoe starts to complain that her hard drive is filling up with hundreds of nearly identical copies of the software. You too have been feeling like all the file duplication is wasteful. After a bit of thinking, you come up with something very clever.&lt;/p&gt;
&lt;p&gt;You remember that the SHA1 hash produces a short string that is unique for a given file contents. Starting with the very first snapshot in the project history, you start a conversion process. First, you create a directory named &lt;code&gt;objects&lt;/code&gt; outside of the code history. Next, you find the most deeply nested directory in the snapshot. Additionally, you open up a temporary file for writing. For each file in this directory you perform three steps. Step 1: Calculate the SHA1 of the contents. Step 2: Add an entry into the temp file that contains the word &amp;#8216;blob&amp;#8217; (binary large object), the SHA1 from the first step, and the filename. Step 3: Copy the file to the objects directory and rename it to the SHA1 from step 1. Once finished with all the files, find the SHA1 of the temp file contents and use that to name the temp file, also placing it in the objects directory.&lt;/p&gt;
&lt;p&gt;If at any time the objects directory already contains a file with a given name, then you have already stored that file&amp;#8217;s contents and there is no need to do so again.&lt;/p&gt;
&lt;p&gt;Now, move up one directory and start over. Only this time, when you get to the entry for the directory that you just processed, enter the word &amp;#8216;tree&amp;#8217;, the SHA1 of the temp file from last time, and the directory&amp;#8217;s name into the new temp file. In this fashion you can build up a tree of directory object files that contain the SHA1s and names of the files and directory objects that they contain.&lt;/p&gt;
&lt;p&gt;Once this has been accomplished for every directory and file in the snapshot, you have a single root directory object file and its corresponding SHA1. Since nothing contains the root directory, you must record the root tree&amp;#8217;s SHA1 somewhere. An ideal place to store it is in the snapshot message file. This way, the uniqueness of the SHA1 of the message also depends on the entire contents of the snapshot, and you can guarantee with absolute certainty that two identical snapshot message SHA1s contain the same files!&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also convenient to create an object from the snapshot message in the same way that you do for blobs and trees. Since you&amp;#8217;re maintaining a list of branch and tag names that point to message SHA1s you don&amp;#8217;t have to worry about losing track of which snapshots are important to you.&lt;/p&gt;
&lt;p&gt;With all of this information stored in the objects directory, you can safely delete the snapshot directory that you used as the source of this operation. If you want to reconstitute the snapshot at a later date it&amp;#8217;s simply a matter of following the SHA1 of the root tree stored in the message file and extracting each tree and blob into their corresponding directory and file.&lt;/p&gt;
&lt;p&gt;For a single snapshot, this transformation process doesn&amp;#8217;t get you much. You&amp;#8217;ve basically just converted one filesystem into another and created a lot of work in the process. The real benefits of this system arise from reuse of trees and blobs across snapshots. Imagine two sequential snapshots in which only a single file in the root directory has changed. If the snapshots both contain 10 directories and 100 files, the transformation process will create 10 trees and 100 blobs from the first snapshot but only one new blob and one new tree from the second snapshot!&lt;/p&gt;
&lt;p&gt;By converting every snapshot directory in the old system to object files in the new system, you can drastically reduce the number of files that are stored on disk. Now, instead of storing perhaps 50 identical copies of a rarely changed file, you only need to keep one.&lt;/p&gt;
&lt;h2&gt;Compressing Blobs&lt;/h2&gt;
&lt;p&gt;Eliminating blob and tree duplication significantly reduces the total storage size of your project history, but that&amp;#8217;s not the only thing you can do to save space. Source code is just text. Text can be very efficiently compressed using something like the &lt;span class=&quot;caps&quot;&gt;LZW&lt;/span&gt; or &lt;span class=&quot;caps&quot;&gt;DEFLATE&lt;/span&gt; compression algorithms. If you compress every blob before computing its SHA1 and saving it to disk you can reduce the total storage size of the project history by another very admirable quantity.&lt;/p&gt;
&lt;h2&gt;The True Git&lt;/h2&gt;
&lt;p&gt;The &lt;span class=&quot;caps&quot;&gt;VCS&lt;/span&gt; you have constructed is now a reasonable facsimile of Git. The main difference is that Git gives you very nice command lines tools to handle such things as creating new snapshots and switching to old ones (Git uses the term &amp;#8220;commit&amp;#8221; instead of &amp;#8220;snapshot&amp;#8221;), tracing history, keeping branch tips up-to-date, fetching changes from other people, merging and diffing branches, and hundreds of other common (and not-so-common tasks).&lt;/p&gt;
&lt;p&gt;As you continue to learn Git, keep this parable in mind. Git is really very simple underneath, and it is this simplicity that makes it so flexible and powerful. One last thing before you run off to learn all the Git commands: remember that it is almost impossible to lose work that has been committed. Even when you delete a branch, all that&amp;#8217;s really happened is that the pointer to that commit has been removed. All of the snapshots are still in the objects directory, you just need to dig up the commit &lt;span class=&quot;caps&quot;&gt;SHA&lt;/span&gt;. In these cases, look up &lt;code&gt;git reflog&lt;/code&gt;. It contains a history of what each branch pointed to and in times of crisis, it will save the day.&lt;/p&gt;
&lt;p&gt;Here are some resources that you should follow as your next step. Now, go, and become a Git master!&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://learn.github.com/&quot;&gt;Learn Git&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://book.git-scm.com/&quot;&gt;Git Community Book&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www-cs-students.stanford.edu/~blynn/gitmagic/&quot;&gt;Git Magic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#8212;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=615308&quot;&gt;Discuss this post on Hacker News&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel=&quot;license&quot; href=&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/us/&quot;&gt;&lt;img alt=&quot;Creative Commons License&quot; style=&quot;border-width:0&quot; src=&quot;http://i.creativecommons.org/l/by-nc-sa/3.0/us/80x15.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Blogging Like a Hacker</title>
   <link href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html"/>
   <updated>2008-11-17T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker</id>
   <content type="html">&lt;h1&gt;Blogging Like a Hacker&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;17 Nov 2008 &amp;#8211; San Francisco&lt;/p&gt;
&lt;p&gt;Back in 2000, when I thought I was going to be a professional writer, I spent hours a day on LiveJournal doing writing practice with other aspiring poets and authors. Since then I&amp;#8217;ve blogged at three different domains about web standards, print design, photography, Flash, illustration, information architecture, ColdFusion, package management, &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, advertising, Ruby, Rails, and Erlang.&lt;/p&gt;
&lt;p&gt;I love writing. I get a kick out of sharing my thoughts with others. The act of transforming ideas into words is an amazingly efficient way to solidify and refine your thoughts about a given topic. But as much as I enjoy blogging, I seem to be stuck in a cycle of quitting and starting over. Before starting the current iteration, I resolved to do some introspection to determine the factors that were leading to this destructive pattern.&lt;/p&gt;
&lt;p&gt;I already knew a lot about what I &lt;strong&gt;didn&amp;#8217;t&lt;/strong&gt; want. I was tired of complicated blogging engines like WordPress and Mephisto. I wanted to write great posts, not style a zillion template pages, moderate comments all day long, and constantly lag behind the latest software release. Something like Posterous looked attractive, but I wanted to style my blog, and it needed to be hosted at the domain of my choosing. For the same reason, other hosted sites (wordpress.com, blogger.com) were disqualified. There are a few people directly using GitHub as a blog (which is very cool), but that&amp;#8217;s a bit too much of an impedance mismatch for my tastes.&lt;/p&gt;
&lt;p&gt;On Sunday, October 19th, I sat down in my San Francisco apartment with a glass of apple cider and a clear mind. After a period of reflection, I had an idea. While I&amp;#8217;m not specifically trained as an author of prose, I &lt;strong&gt;am&lt;/strong&gt; trained as an author of code. What would happen if I approached blogging from a software development perspective? What would that look like?&lt;/p&gt;
&lt;p&gt;First, all my writing would be stored in a Git repository. This would ensure that I could try out different ideas and explore a variety of posts all from the comfort of my preferred editor and the command line. I&amp;#8217;d be able to publish a post via a simple deploy script or post-commit hook. Complexity would be kept to an absolute minimum, so a static site would be preferable to a dynamic site that required ongoing maintenance. My blog would need to be easily customizable; coming from a graphic design background means I&amp;#8217;ll always be tweaking the site&amp;#8217;s appearance and layout.&lt;/p&gt;
&lt;p&gt;Over the last month I&amp;#8217;ve brought these concepts to fruition and I&amp;#8217;m pleased to announce &lt;a href=&quot;http://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;. Jekyll is a simple, blog aware, static site generator. It takes a template directory (representing the raw form of a website), runs it through Textile and Liquid converters, and spits out a complete, static website suitable for serving with Apache or your favorite web server. If you&amp;#8217;re reading this on the website (http://tom.preston-werner.com), you&amp;#8217;re seeing a Jekyll generated blog!&lt;/p&gt;
&lt;p&gt;To understand how this all works, open up my &lt;a href=&quot;http://github.com/mojombo/tpw&quot;&gt;&lt;span class=&quot;caps&quot;&gt;TPW&lt;/span&gt;&lt;/a&gt; repo in a new browser window. I&amp;#8217;ll be referencing the code there.&lt;/p&gt;
&lt;p&gt;Take a look at &lt;a href=&quot;http://github.com/mojombo/tpw/tree/master/index.html&quot;&gt;index.html&lt;/a&gt;. This file represents the homepage of the site. At the top of the file is a chunk of &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; that contains metadata about the file. This data tells Jekyll what layout to give the file, what the page&amp;#8217;s title should be, etc. In this case, I specify that the &amp;#8220;default&amp;#8221; template should be used. You can find the layout files in the &lt;a href=&quot;http://github.com/mojombo/tpw/tree/master/_layouts&quot;&gt;_layouts&lt;/a&gt; directory. If you open &lt;a href=&quot;http://github.com/mojombo/tpw/tree/master/_layouts/default.html&quot;&gt;default.html&lt;/a&gt; you can see that the homepage is constructed by wrapping index.html with this layout.&lt;/p&gt;
&lt;p&gt;You&amp;#8217;ll also notice Liquid templating code in these files. &lt;a href=&quot;http://www.liquidmarkup.org/&quot;&gt;Liquid&lt;/a&gt; is a simple, extensible templating language that makes it easy to embed data in your templates. For my homepage I wanted to have a list of all my blog posts. Jekyll hands me a Hash containing various data about my site. A reverse chronological list of all my blog posts can be found in &lt;code&gt;site.posts&lt;/code&gt;. Each post, in turn, contains various fields such as &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Jekyll gets the list of blog posts by parsing the files in the &lt;a href=&quot;http://github.com/mojombo/tpw/tree/master/_posts&quot;&gt;_posts&lt;/a&gt; directory. Each post&amp;#8217;s filename contains the publishing date and slug (what shows up in the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;) that the final &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; file should have. Open up the file corresponding to this blog post: &lt;a href=&quot;http://github.com/mojombo/tpw/tree/master/_posts/2008-11-17-blogging-like-a-hacker.textile&quot;&gt;2008-11-17-blogging-like-a-hacker.textile&lt;/a&gt;. GitHub renders textile files by default, so to better understand the file, click on the &lt;a href=&quot;http://github.com/mojombo/tpw/tree/master/_posts/2008-11-17-blogging-like-a-hacker.textile?raw=true&quot;&gt;raw&lt;/a&gt; view to see the original file. Here I&amp;#8217;ve specified the &lt;code&gt;post&lt;/code&gt; layout. If you look at that file you&amp;#8217;ll see an example of a nested layout. Layouts can contain other layouts allowing you a great deal of flexibility in how pages are assembled. In my case I use a nested layout in order to show related posts for each blog entry. The &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; also specifies the post&amp;#8217;s title which is then embedded in the post&amp;#8217;s body via Liquid.&lt;/p&gt;
&lt;p&gt;Posts are handled in a special way by Jekyll. The date you specify in the filename is used to construct the &lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt; in the generated site. This post, for instance, ends up at &lt;code&gt;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Files that do not reside in directories prefixed with an underscore are mirrored into a corresponding directory structure in the generated site. If a file does not have a &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; preface, it is not run through the Liquid interpreter. Binary files are copied over unmodified.&lt;/p&gt;
&lt;p&gt;In order to convert your raw site into the finished version, you simply run:&lt;/p&gt;
&lt;pre class=&quot;terminal&quot;&gt;&lt;code&gt;$ jekyll /path/to/raw/site /path/to/place/generated/site&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Jekyll is still a very young project. I&amp;#8217;ve only developed the exact functionality that I&amp;#8217;ve needed. As time goes on I&amp;#8217;d like to see the project mature and support additional features. If you end up using Jekyll for your own blog, drop me a line and let me know what you&amp;#8217;d like to see in future versions. Better yet, fork the project over at GitHub and hack in the features yourself!&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been living with Jekyll for just over a month now. I love it. Driving the development of Jekyll based on the needs of my blog has been very rewarding. I can edit my posts in TextMate, giving me automatic and competent spell checking. I have immediate and first class access to the &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; and page templates. Everything is backed up on GitHub. I feel a lightness now when I&amp;#8217;m writing a post. The system is simple enough that I can keep the entire conversion process in my head. The distance from my brain to my blog has shrunk, and, in the end, I think that will make me a better author.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How to Meet Your Next Cofounder</title>
   <link href="http://tom.preston-werner.com/2008/11/03/how-to-meet-your-next-cofounder.html"/>
   <updated>2008-11-03T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2008/11/03/how-to-meet-your-next-cofounder</id>
   <content type="html">&lt;h1&gt;How to Meet Your Next Cofounder&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;3 Nov 2008 &amp;#8211; San Francisco&lt;/p&gt;
&lt;p&gt;Over the last few months I&amp;#8217;ve seen a number of people looking for cofounders on Hacker News or via their own personal blogs. I think this is, at best, a highly inefficient way to find a cofounder and, at worst, a way to fool yourself into finding the &lt;strong&gt;wrong&lt;/strong&gt; cofounder. In any case, it&amp;#8217;s a naive approach to finding the person that will need to stand by your side in the coming storm that we call &amp;#8220;running a startup.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Don&amp;#8217;t get me wrong, the internet is an amazing tool for meeting people. The wider the net you cast, the more likely you are to find the perfect match. But the internet has its limitations. I&amp;#8217;ve had internet friends that were engaging, witty, and brilliant online, but in person felt awkward and boring. Conversely, I know people that are volatile and inflammatory online, but present an attitude of friendliness and caring in person. This phenomenon makes it difficult to gauge an individual&amp;#8217;s personality from online interaction alone.&lt;/p&gt;
&lt;p&gt;A far better use of the internet is to find groups of people that share your interests. Track down the local users group for your language or technology of choice. The simple fact that members of these groups take time out of their day to show up means that they&amp;#8217;re more motivated and driven than the average person. Even if it&amp;#8217;s a bit of a commute to get to the meetings, start showing up regularly. Prepare a few presentations on topics that you&amp;#8217;re passionate about. Bonus points if you present on ideas related to your potential startup. Don&amp;#8217;t worry about revealing your game-changing secrets; stealth mode is bullshit. Talk to everyone. Steer the conversation toward your interests and if someone there is excited about the same things, it will be clear.&lt;/p&gt;
&lt;p&gt;It may take weeks or months, but in a good group you&amp;#8217;ll find a handful of people that you really like. If at all possible, go out drinking with these people after the meetups. This is one of the easiest ways to go from &amp;#8220;acquaintance&amp;#8221; to &amp;#8220;friend&amp;#8221; and gives you free license to bring up your craziest of ideas without sounding like too much of a nutjob.&lt;/p&gt;
&lt;p&gt;Of the people that you like, several may make excellent candidates for cofounders. Do a little research on these individuals. What does their code look like? Have they done much open source? Do they demonstrate an entrepreneurial spirit? Can they stick with a single project for a long time? Have they been loyal to their friends and companies in the past? A good cofounder should be someone with whom you feel privileged to work. And they should feel privileged to work with you. The two of you should be on very solid ground before you begin your startup adventure, because once you do, the impact of every argument is going to feel like it&amp;#8217;s been multiplied by a thousand.&lt;/p&gt;
&lt;p&gt;This all sounds like a lot of hard work. Maybe you&amp;#8217;re wondering if it would be better to just go solo. I did that with Gravatar, and, in retrospect, it&amp;#8217;s painfully obvious that I made a lot of stupid mistakes. When it&amp;#8217;s just you and your thoughts it becomes too easy to pick the first thing that pops into your head. We&amp;#8217;re programmed to think all of our ideas are good, but reality tells a different story. Truly good decisions are forged from the furnace of argument, not plucked like daisies from the pasture of a peaceful mind. A good cofounder tells you when your ideas are half-baked and ensures that your good ideas actually get implemented.&lt;/p&gt;
&lt;p&gt;The second biggest danger with going solo is the loss of motivation. Solipsism might make you feel important at first, but the constant lack of feedback and the absence of support during tough times can easily lead to a premature end to your adventure. Cofounders are like workout buddies. Just when you think there&amp;#8217;s no possible way you can do another rep, there they are, rooting you on toward an achievement that wouldn&amp;#8217;t be possible without them.&lt;/p&gt;
&lt;p&gt;Your choice of cofounder will affect everything you do in your startup. They&amp;#8217;ll share every defeat with you and celebrate every success. They&amp;#8217;ll help you understand your own ideas better by offering a different perspective. They&amp;#8217;ll be the single most important decision you make during the tenure of your startup, so choose wisely and with extreme care.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Looking back on Selling Gravatar to Automattic</title>
   <link href="http://tom.preston-werner.com/2008/10/27/looking-back-on-selling-gravatar-to-automattic.html"/>
   <updated>2008-10-27T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2008/10/27/looking-back-on-selling-gravatar-to-automattic</id>
   <content type="html">&lt;h1&gt;Looking back on Selling Gravatar to Automattic&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;23 Oct 2008 &amp;#8211; San Francisco&lt;/p&gt;
&lt;p&gt;For an entrepreneur, the line between horrible mistake and runaway success can be so thin that even Kate Moss would be envious. I lived with &lt;a href=&quot;http://gravatar.com/&quot;&gt;Gravatar&lt;/a&gt; for nearly four years before that line even became thick enough to measure.&lt;/p&gt;
&lt;p&gt;As it&amp;#8217;s become one of my favorite parables, I&amp;#8217;ll save the details of how I came up with the idea for Gravatar for a future post. What&amp;#8217;s important to know is that the idea was spawned not from a business perspective, but from a desperate desire to create something new in the world of blogging.&lt;/p&gt;
&lt;p&gt;Spin the clock back four years and you&amp;#8217;ll find me sitting at my Windows desktop machine in my underwear with a box of Life cereal to my left and a day old Coke to my right. Since I&amp;#8217;d been laid off from my job as a Java developer some months earlier, I&amp;#8217;d decided to take the entrepreneurial plunge doing what I knew best: web design. Working in a cone of isolation, I&amp;#8217;d become accustomed to waking up late, swinging my legs over the right side of the bed, and in one fluid movement sliding over to the ratty chair I stole from my old college dorm room. I&amp;#8217;d spend most of the day working on client projects in ColdFusion or &lt;span class=&quot;caps&quot;&gt;PHP&lt;/span&gt;. It was hard work and could become a bit tiresome. I needed an outlet, something that didn&amp;#8217;t have a suit on the other end of a telephone telling me how blue was the wrong color and things would be so much better if only the photo had a slightly bigger border. Gravatar would become that outlet for me.&lt;/p&gt;
&lt;p&gt;I was really big into web standards at the time, having recently read Zeldman&amp;#8217;s seminal work, and became a true believer. Eric Meyers, Dan Cederholm, and Jon Hicks became like gods to me. I worked very hard at making relevant and witty comments around the right kinds of blogs. Being a part of that movement became a significant goal for me. My Movable Type weblog rarely went more than two days days without a post on design or standards.&lt;/p&gt;
&lt;p&gt;Two weeks after I had the idea for Gravatar the first version was written and deployed. Every request hit the database and dynamically generated a properly sized gravatar via PHP&amp;#8217;s gd2 api. Premature optimization and all that, right? The first thing I did after getting the system to a workable state was email all the bloggers I looked up to (and that had no idea who I was). Blog comments at the time were a pretty dreary affair and I guess Cederholm was intrigued enough by my idea that he linked to it in a sidebar micro-post on simplebits.com.&lt;/p&gt;
&lt;p&gt;That single mention kicked off a slow but steady trickle of interest in the system. A few blogs here and there installed the plugin and the world started seeing avatars that mysteriously followed them around. At the same time, just as people must have thought Cheez Whiz was a stupid idea when it first came out, some bloggers started railing against Gravatar, calling it frivolous, inefficient, and &amp;#8220;an abomination.&amp;#8221; This was my first nibble at the smorgasbord of what was to become the &amp;#8220;horrible mistake&amp;#8221; aspect of Gravatar.&lt;/p&gt;
&lt;p&gt;Due to the inherently self-advertising nature of gravatars (the &amp;#8220;what the hell is that and how do I get one?&amp;#8221; brand of advertising), Gravatar adoption increased at a rapid rate. Having crafted the idea for Gravatar without any semblance of business model or growth projection or build-out strategy, things took a rather dramatic dive away from &amp;#8220;runaway success&amp;#8221; as my server (yes, singular) buckled under the pressure of tens of requests per second! As it turns out, regenerating a gravatar on every request is not very &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; efficient. Gravatars worldwide suddenly turned into little red Xs. Then, in what has become known as the Twitter Effect, a barrage of emails hit me complaining about how the free service on which they had come to depend was down, and how this would adversely impact my well-being.&lt;/p&gt;
&lt;p&gt;I fixed the code. Gravatar came back online with caching. All the while I&amp;#8217;d had the bright idea that gravatars would be rated for content, &lt;span class=&quot;caps&quot;&gt;MPAA&lt;/span&gt;-style. Because users clearly were not fit to rate their own images, I was manually rating 400 or more avatars each day. If I missed a day, I&amp;#8217;d have damn near a thousand waiting for me the next day. In addition to the angry mob, I was very fortunate to have an amazingly supportive group of users that volunteered to help me rate images. I owe them my sanity, and it freed up enough time for me to work on the next iteration of the site.&lt;/p&gt;
&lt;p&gt;G2, as I called it, would be written in Rails and use lighttpd plus a convoluted directory structure of symlinks to enable me to pre-render every gravatar (1&amp;#215;1 up to 80&amp;#215;80) and serve only static images. I did this to avoid having to rent or buy the kind of hardware necessary to hook up a properly scaled system. Up until the end I ran Gravatar on a maximum of two rented commodity servers that set me back a mere $300/month, a pittance for the kind of traffic I was serving. I say it was a pittance, but that&amp;#8217;s not really true. Donations didn&amp;#8217;t even come close to covering that cost.&lt;/p&gt;
&lt;p&gt;At some point early in the development of G2, Toni Schneider, the &lt;span class=&quot;caps&quot;&gt;CEO&lt;/span&gt; of Automattic (the company behind WordPress.com and Akismet) contacted me after hearing my &lt;a href=&quot;http://blog.gravatar.com/2007/10/18/automattic-gravatar/&quot;&gt;interview about the future of Gravatar&lt;/a&gt; on the WordPress podcast. This was exciting news! How perfect a fit would it be for Gravatar to be bought by Automattic? I was already planning a trip up to San Francisco to meet with the Powerset guys, so the timing worked out perfectly for me to meet in person with Toni. I ended up having lunch with Toni and Matt Mullenweg at 21st Ammendment on 2nd Street. It was a bit intimidating to come to the mecca of tech startups to meet with such huge players in the blogging community. Turned out that both Matt and Toni are great guys and so we had drinks for about two hours, talking about my ideas for Gravatar and how we might be able to work together. Everything seemed great&amp;#8212;I was jazzed and they seemed excited&amp;#8212;but a few weeks later Toni let me know that the timing was wrong and they couldn&amp;#8217;t make a play at that time. He suggested I proceed with G2 and they&amp;#8217;d proceed with their own avatar system. I was pretty bummed about the outcome, but I took their advice and kept going.&lt;/p&gt;
&lt;p&gt;A few weeks before G2 was finished, the site imploded in a big way. One machine. Hundreds of requests per second. That poor &lt;span class=&quot;caps&quot;&gt;CPU&lt;/span&gt; must have thought it was the End Times. Instead of wasting time on getting the existing system back up, I put on my headphones, turned it up to eleven, and got back to work on G2.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure if you&amp;#8217;ve ever had to work on a project while your users are publicly skewering you on your blog for allowing the service to go down, but it&amp;#8217;s as close to depression as I&amp;#8217;ve ever come. If I&amp;#8217;d had less pride, I would have popped everyone a huge middle finger and let the service die, but instead I waded through the hundreds of comments and deleted the ones with threats, hatred, or my favorite, the words &amp;#8220;fuck you&amp;#8221; repeated 600 times. It wasn&amp;#8217;t fair, I told myself, that I should be sitting here with high blood pressure trying to raise Gravatar from the dead while the unappreciative masses do what they do best on the internet. The only thing that kept me going was never being able to tell which side of the mistake/success boundary I was sitting on. It was hard to think of the situation as anything but a huge failure, but the shitstorm the downtime was causing indicated that people found the service valuable. I want to say that Twitter went through the same thing, but they suffered their downtime with millions of dollars in the bank. The only thing I had was a full time job unrelated to Gravatar and a credit card that reminded me every month of my bad judgment.&lt;/p&gt;
&lt;p&gt;Finally G2 was done, deployed, and fully operational. I have no idea how many users I lost due to the several weeks of downtime, but I don&amp;#8217;t think it was very many. There seems to be a corollary to the Twitter Effect that I&amp;#8217;d call the Forgiveness Effect. It dictates that if a user enjoys a free service and that service is currently up, all past atrocities will be easily and quickly forgiven. With the site running again, things looked to be shifting back towards a success.&lt;/p&gt;
&lt;p&gt;Things were not all rainbows and unicorns though. My Rube Goldbergian architecture had a few quirks that needed to be dealt with. The site still had some elusive bugs from the overly-rapid development cycle. And just like new lanes on freeways always fill up immediately, the two new servers I was running started causing expensive bandwidth overages. I had taken a job at Powerset at this point and the combined pressures of these two commitments started to weigh me down. Once again I started feeling like all the effort I put into Gravatar was for nothing. Like I would never benefit from any of it.&lt;/p&gt;
&lt;p&gt;In a last ditch effort to save Gravatar from final doom, I emailed Toni and pitched him again on Gravatar. I figured it was a long shot, but what the hell, couldn&amp;#8217;t hurt. Things must have changed in the prior 6 months because Toni was very receptive to the idea. We met again, at 21st Ammendment, and hashed out a tentative deal over drinks. I&amp;#8217;d never sold anything like this before, so my technique was probably very amateurish. I&amp;#8217;m almost certain I could have gotten a better deal out of it, but I had the smell of desperation about me and I really did want to see Gravatar end up in Automattic&amp;#8217;s hands.&lt;/p&gt;
&lt;p&gt;Four days later, Automattic made their official offer. On September 21st, 2007 we inked the deal and Gravatar became both the first company that I ever sold and the first company that Automattic ever acquired.&lt;/p&gt;
&lt;p&gt;I am quite satisfied with the sale to Automattic. Some will say that I should have pursued VC funding. Indeed, I was contacted by several firms but never travelled very far down that road. I always felt like Gravatar was a feature, and I wasn&amp;#8217;t comfortable building a company on such a tiny foundation. Reinforcing this decision, no viable business model ever coalesced during the time I was building the site. It was also made clear by Toni that Automattic would maintain Gravatar as a separate brand and continue its evolution (instead of just absorbing it into WordPress). This appealed to my ego. Most companies kill or maim everything they acquire, but here was a chance for Gravatar to carry forward with all of Automattic&amp;#8217;s resources behind it (instead of two measly servers). Part of me just wanted to see what Gravatar could become with time, money, and man-power moving it forward.&lt;/p&gt;
&lt;p&gt;Things always seem so clear in retrospect. But it was pride and persistence that kept me in the game long enough to have anything to look back on at all. While the line between horrible mistake and runaway success may be difficult to see, you can still find it if you look hard enough.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How I Turned Down $300,000 from Microsoft to go Full-Time on GitHub</title>
   <link href="http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k.html"/>
   <updated>2008-10-18T00:00:00+08:00</updated>
   <id>http://tom.preston-werner.com/2008/10/18/how-i-turned-down-300k</id>
   <content type="html">&lt;h1&gt;How I Turned Down $300,000 from Microsoft to go Full-Time on GitHub&lt;/h1&gt;
&lt;p class=&quot;meta&quot;&gt;18 Oct 2008 &amp;#8211; San Francisco&lt;/p&gt;
&lt;p&gt;2008 is a leap year. That means that three hundred and sixty six days ago, almost to the minute, I was sitting alone in a booth at Zeke&amp;#8217;s Sports Bar and Grill on 3rd Street in San Francisco. I wouldn&amp;#8217;t normally hang out at a sports bar, let alone a sports bar in &lt;span class=&quot;caps&quot;&gt;SOMA&lt;/span&gt;, but back then Thursday was &amp;#8220;I Can Has Ruby&amp;#8221; night. I guess back then &amp;#8220;I can has _______&amp;#8221; was also a reasonable moniker to attach to pretty much anything. &lt;span class=&quot;caps&quot;&gt;ICHR&lt;/span&gt; was a semi-private meeting of like minded Ruby Hackers that generally and willingly devolved into late night drinking sessions. Normally these nights would fade away like my hangover the next morning, but this night was different. This was the night that &lt;a href=&quot;http://github.com/&quot;&gt;GitHub&lt;/a&gt; was born.&lt;/p&gt;
&lt;p&gt;I think I was sitting at the booth alone because I&amp;#8217;d just ordered a fresh Fat Tire and needed a short break from the socializing that was happening over at the long tables in the dimly lit aft portion of the bar. On the fifth or sixth sip, Chris Wanstrath walked in. I have trouble remembering now if I&amp;#8217;d even classify Chris and I as &amp;#8220;friends&amp;#8221; at the time. We knew each other through Ruby meetups and conferences, but only casually. Like a mutual &amp;#8220;hey, I think your code is awesome&amp;#8221; kind of thing. I&amp;#8217;m not sure what made me do it, but I gestured him over to the booth and said &amp;#8220;dude, check this out.&amp;#8221; About a week earlier I&amp;#8217;d started work on a project called &lt;a href=&quot;http://github.com/mojombo/grit&quot;&gt;Grit&lt;/a&gt; that allowed me to access Git repositories in an object oriented manner via Ruby code. Chris was one of only a handful of Rubyists at the time that was starting to become serious about Git. He sat down and I started showing him what I had. It wasn&amp;#8217;t much, but it was enough to see that it had sparked something in Chris. Sensing this, I launched into my half-baked idea for some sort of website that acted as hub for coders to share their Git repositories. I even had a name: GitHub. I may be paraphrasing, but his response was along the lines of a very emphatic &amp;#8220;I&amp;#8217;m in. Let&amp;#8217;s do it!&amp;#8221;&lt;/p&gt;
&lt;p&gt;The next night, Friday, October 19, 2007 at 10:24pm Chris made the first commit to the GitHub repository and sealed in digital stone the beginning of our joint venture. There were, so far, no agreements of any kind regarding how things would proceed. Just two guys that decided to hack together on something that sounded cool.&lt;/p&gt;
&lt;p&gt;Remember those amazing few minutes in Karate Kid where Daniel is training to become a martial arts expert? Remember the music? Well, you should probably go buy and listen to &lt;a href=&quot;http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewAlbum?i=260417864&amp;amp;id=260417040&amp;amp;s=143441&quot;&gt;You&amp;#8217;re The Best&lt;/a&gt; by Joe Esposito in iTunes because I&amp;#8217;m about to hit you with a montage.&lt;/p&gt;
&lt;p&gt;For the next three months Chris and I spent ridiculous hours planning and coding GitHub. I kept going with Grit and designed the UI. Chris built out the Rails app. We met in person every Saturday to make design decisions and try to figure out what the hell our pricing plan would look like. I remember one very rainy day we talked for a good two hours about various pricing strategies over some of the best Vietnamese egg rolls in the city. All of this we did while holding other engagements. I, for one, was employed full time at Powerset as a tools developer for the Ranking and Relevance team.&lt;/p&gt;
&lt;p&gt;In mid January, after three months of nights and weekends, we launched into private beta mode, sending invites to our friends. In mid February PJ Hyett joined in and made us three-strong. We publicly launched the site on April 10th. TechCrunch was not invited. At this point it was still just three 20-somethings without a single penny of outside investment.&lt;/p&gt;
&lt;p&gt;I was still working full time at Powerset on July 1, 2008 when we learned that Powerset had just been acquired by Microsoft for around $100 million. This was interesting timing. With the acquisition, I was going to be faced with a choice sooner than I had anticipated. I could either sign on as a Microsoft employee or quit and go GitHub full time. At 29 years old, I was the oldest of the three GitHubbers, and had accumulated a proportionally larger amount of debt and monthly expenditure. I was used to my six digit lifestyle. Further confounding the issue was the imminent return of my wife, Theresa, from her PhD fieldwork in Costa Rica. I would soon be transitioning from make-believe bachelor back to married man.&lt;/p&gt;
&lt;p&gt;To muddy the waters of decision even more, the Microsoft employment offer was juicy. Salary + $300k over three years juicy. That&amp;#8217;s enough money to make anybody think twice about anything. So I was faced with this: a safe job with lots of guaranteed money as a Microsoft man &amp;#8211;or&amp;#8211; a risky job with unknown amounts of money as an entrepreneur. I knew things with the other GitHub guys would become extremely strained if I stayed on at Powerset much longer. Having saved up some money and become freelancers some time ago, they had both started dedicating full time effort to GitHub. It was do or die time. Either pick GitHub and go for it, or make the safe choice and quit GitHub to make wheelbarrows full of cash at Microsoft.&lt;/p&gt;
&lt;p&gt;If you want a recipe for restless sleep, I can give you one. Add one part &amp;#8220;what will my wife think&amp;#8221; with 3,000 parts Benjamin Franklin; stir in a &amp;#8220;beer anytime you damn well please&amp;#8221; and top with a chance at financial independence.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve become pretty good at giving my employers the bad news that I&amp;#8217;m leaving the company to go do something cooler. I broke the news to my boss at Powerset on the day the employment offer was due. I told him I was quitting to go work full time on GitHub. Like any great boss, he was bummed, but understanding. He didn&amp;#8217;t try to tempt me with a bigger bonus or anything. I think deep down he knew I was going to leave. I may have even received a larger incentive to stay than others, on account of my being a flight risk. Those Microsoft managers are crafty, I tell you. They&amp;#8217;ve got retention bonuses down to a science. Well, except when you throw an entrepreneur, the singularity of the business world, into the mix. Everything goes wacky when you&amp;#8217;ve got one of those around.&lt;/p&gt;
&lt;p&gt;In the end, just as Indiana Jones could never turn down the opportunity to search for the Holy Grail, I could no less turn down the chance to work for myself on something I truly love, no matter how safe the alternative might be. When I&amp;#8217;m old and dying, I plan to look back on my life and say &amp;#8220;wow, that was an adventure,&amp;#8221; not &amp;#8220;wow, I sure felt safe.&amp;#8221;&lt;/p&gt;</content>
 </entry>
 
 
</feed>